{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/webgl/PointsLayer\n */\nimport BaseVector from '../../layer/BaseVector.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport ViewHint from '../../ViewHint.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLLayerRenderer, { WebGLWorkerMessageType, colorDecodeId, colorEncodeId } from './Layer.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER } from '../../webgl.js';\nimport { AttributeType, DefaultUniform } from '../../webgl/Helper.js';\nimport { apply as applyTransform, create as createTransform, makeInverse as makeInverseTransform, multiply as multiplyTransform, translate as translateTransform } from '../../transform.js';\nimport { assert } from '../../asserts.js';\nimport { buffer, createEmpty, equals, getWidth } from '../../extent.js';\nimport { create as createWebGLWorker } from '../../worker/webgl.js';\nimport { getUid } from '../../util.js';\nimport { listen, unlistenByKey } from '../../events.js';\n/**\n * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different\n * for each feature.\n * @property {string} name Attribute name.\n * @property {function(import(\"../../Feature\").default, Object<string, *>):number} callback This callback computes the numerical value of the\n * attribute for a given feature (properties are available as 2nd arg for quicker access).\n */\n/**\n * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize\n * rebuildBuffers by accessing these objects quicker.\n * @property {import(\"../../Feature\").default} feature Feature\n * @property {Object<string, *>} properties Feature properties\n * @property {import(\"../../geom\").Geometry} geometry Feature geometry\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then\n * passed to the GPU. The `name` property of each attribute will serve as its identifier:\n *  * In the vertex shader as an `attribute` by prefixing it with `a_`\n *  * In the fragment shader as a `varying` by prefixing it with `v_`\n * Please note that these can only be numerical values.\n * @property {string} vertexShader Vertex shader source, mandatory.\n * @property {string} fragmentShader Fragment shader source, mandatory.\n * @property {string} [hitVertexShader] Vertex shader source for hit detection rendering.\n * @property {string} [hitFragmentShader] Fragment shader source for hit detection rendering.\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * Please note that `u_texture` is reserved for the main texture slot and `u_opacity` is reserved for the layer opacity.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n/**\n * @classdesc\n * WebGL vector renderer optimized for points.\n * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU\n * every time the vector source changes.\n *\n * You need to provide vertex and fragment shaders for rendering. This can be done using\n * {@link module:ol/webgl/ShaderBuilder~ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute\n * containing the screen-space projected center of the quad, as well as a `a_index` attribute\n * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).\n *\n * To include variable attributes in the shaders, you need to declare them using the `attributes` property of\n * the options object like so:\n * ```js\n * new WebGLPointsLayerRenderer(layer, {\n *   attributes: [\n *     {\n *       name: 'size',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *     {\n *       name: 'weight',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *   ],\n *   vertexShader:\n *     // shader using attribute a_weight and a_size\n *   fragmentShader:\n *     // shader using varying v_weight and v_size\n * ```\n *\n * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`\n * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain\n * the final color that will have to be output for hit detection to work.\n *\n * The following uniform is used for the main texture: `u_texture`.\n * The following uniform is used for the layer opacity: `u_opacity`.\n *\n * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Points are rendered as quads with the following structure:\n *\n * ```\n *   (u0, v1)      (u1, v1)\n *  [3]----------[2]\n *   |`           |\n *   |  `         |\n *   |    `       |\n *   |      `     |\n *   |        `   |\n *   |          ` |\n *  [0]----------[1]\n *   (u0, v0)      (u1, v0)\n *  ```\n *\n * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n *\n * @api\n */\nvar WebGLPointsLayerRenderer = /** @class */function (_super) {\n  __extends(WebGLPointsLayerRenderer, _super);\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   * @param {Options} options Options.\n   */\n  function WebGLPointsLayerRenderer(layer, options) {\n    var _this = this;\n    var uniforms = options.uniforms || {};\n    var projectionMatrixTransform = createTransform();\n    uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;\n    _this = _super.call(this, layer, {\n      uniforms: uniforms,\n      postProcesses: options.postProcesses\n    }) || this;\n    _this.ready = false;\n    _this.sourceRevision_ = -1;\n    _this.verticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n    _this.hitVerticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n    _this.indicesBuffer_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, DYNAMIC_DRAW);\n    /**\n     * @private\n     */\n    _this.vertexShader_ = options.vertexShader;\n    /**\n     * @private\n     */\n    _this.fragmentShader_ = options.fragmentShader;\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    _this.program_;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.hitDetectionEnabled_ = options.hitFragmentShader && options.hitVertexShader ? true : false;\n    /**\n     * @private\n     */\n    _this.hitVertexShader_ = options.hitVertexShader;\n    /**\n     * @private\n     */\n    _this.hitFragmentShader_ = options.hitFragmentShader;\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    _this.hitProgram_;\n    var customAttributes = options.attributes ? options.attributes.map(function (attribute) {\n      return {\n        name: 'a_' + attribute.name,\n        size: 1,\n        type: AttributeType.FLOAT\n      };\n    }) : [];\n    /**\n     * A list of attributes used by the renderer. By default only the position and\n     * index of the vertex (0 to 3) are required.\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     */\n    _this.attributes = [{\n      name: 'a_position',\n      size: 2,\n      type: AttributeType.FLOAT\n    }, {\n      name: 'a_index',\n      size: 1,\n      type: AttributeType.FLOAT\n    }].concat(customAttributes);\n    /**\n     * A list of attributes used for hit detection.\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     */\n    _this.hitDetectionAttributes = [{\n      name: 'a_position',\n      size: 2,\n      type: AttributeType.FLOAT\n    }, {\n      name: 'a_index',\n      size: 1,\n      type: AttributeType.FLOAT\n    }, {\n      name: 'a_hitColor',\n      size: 4,\n      type: AttributeType.FLOAT\n    }, {\n      name: 'a_featureUid',\n      size: 1,\n      type: AttributeType.FLOAT\n    }].concat(customAttributes);\n    _this.customAttributes = options.attributes ? options.attributes : [];\n    _this.previousExtent_ = createEmpty();\n    /**\n     * This transform is updated on every frame and is the composition of:\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n     * - current world->screen transform\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    _this.currentTransform_ = projectionMatrixTransform;\n    /**\n     * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    _this.renderTransform_ = createTransform();\n    /**\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    _this.invertRenderTransform_ = createTransform();\n    /**\n     * @type {Float32Array}\n     * @private\n     */\n    _this.renderInstructions_ = new Float32Array(0);\n    /**\n     * These instructions are used for hit detection\n     * @type {Float32Array}\n     * @private\n     */\n    _this.hitRenderInstructions_ = new Float32Array(0);\n    /**\n     * @type {WebGLRenderTarget}\n     * @private\n     */\n    _this.hitRenderTarget_;\n    /**\n     * Keep track of latest message sent to worker\n     * @type {number}\n     * @private\n     */\n    _this.generateBuffersRun_ = 0;\n    _this.worker_ = createWebGLWorker();\n    _this.worker_.addEventListener('message',\n    /**\n     * @param {*} event Event.\n     * @this {WebGLPointsLayerRenderer}\n     */\n    function (event) {\n      var received = event.data;\n      if (received.type === WebGLWorkerMessageType.GENERATE_BUFFERS) {\n        var projectionTransform = received.projectionTransform;\n        if (received.hitDetection) {\n          this.hitVerticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n          this.helper.flushBufferData(this.hitVerticesBuffer_);\n        } else {\n          this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n          this.helper.flushBufferData(this.verticesBuffer_);\n        }\n        this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);\n        this.helper.flushBufferData(this.indicesBuffer_);\n        this.renderTransform_ = projectionTransform;\n        makeInverseTransform(this.invertRenderTransform_, this.renderTransform_);\n        if (received.hitDetection) {\n          this.hitRenderInstructions_ = new Float32Array(event.data.renderInstructions);\n        } else {\n          this.renderInstructions_ = new Float32Array(event.data.renderInstructions);\n          if (received.generateBuffersRun === this.generateBuffersRun_) {\n            this.ready = true;\n          }\n        }\n        this.getLayer().changed();\n      }\n    }.bind(_this));\n    /**\n     * This object will be updated when the source changes. Key is uid.\n     * @type {Object<string, FeatureCacheItem>}\n     * @private\n     */\n    _this.featureCache_ = {};\n    /**\n     * Amount of features in the cache.\n     * @type {number}\n     * @private\n     */\n    _this.featureCount_ = 0;\n    var source = _this.getLayer().getSource();\n    _this.sourceListenKeys_ = [listen(source, VectorEventType.ADDFEATURE, _this.handleSourceFeatureAdded_, _this), listen(source, VectorEventType.CHANGEFEATURE, _this.handleSourceFeatureChanged_, _this), listen(source, VectorEventType.REMOVEFEATURE, _this.handleSourceFeatureDelete_, _this), listen(source, VectorEventType.CLEAR, _this.handleSourceFeatureClear_, _this)];\n    source.forEachFeature(function (feature) {\n      this.featureCache_[getUid(feature)] = {\n        feature: feature,\n        properties: feature.getProperties(),\n        geometry: feature.getGeometry()\n      };\n      this.featureCount_++;\n    }.bind(_this));\n    return _this;\n  }\n  WebGLPointsLayerRenderer.prototype.afterHelperCreated = function () {\n    this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);\n    if (this.hitDetectionEnabled_) {\n      this.hitProgram_ = this.helper.getProgram(this.hitFragmentShader_, this.hitVertexShader_);\n      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\n    }\n  };\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  WebGLPointsLayerRenderer.prototype.handleSourceFeatureAdded_ = function (event) {\n    var feature = event.feature;\n    this.featureCache_[getUid(feature)] = {\n      feature: feature,\n      properties: feature.getProperties(),\n      geometry: feature.getGeometry()\n    };\n    this.featureCount_++;\n  };\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  WebGLPointsLayerRenderer.prototype.handleSourceFeatureChanged_ = function (event) {\n    var feature = event.feature;\n    this.featureCache_[getUid(feature)] = {\n      feature: feature,\n      properties: feature.getProperties(),\n      geometry: feature.getGeometry()\n    };\n  };\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  WebGLPointsLayerRenderer.prototype.handleSourceFeatureDelete_ = function (event) {\n    var feature = event.feature;\n    delete this.featureCache_[getUid(feature)];\n    this.featureCount_--;\n  };\n  /**\n   * @private\n   */\n  WebGLPointsLayerRenderer.prototype.handleSourceFeatureClear_ = function () {\n    this.featureCache_ = {};\n    this.featureCount_ = 0;\n  };\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   */\n  WebGLPointsLayerRenderer.prototype.renderFrame = function (frameState) {\n    var gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n    var projection = frameState.viewState.projection;\n    var layer = this.getLayer();\n    var vectorSource = layer.getSource();\n    // FIXME fix hit detection isn't reliable when rendering multiple worlds\n    var multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    var projectionExtent = projection.getExtent();\n    var extent = frameState.extent;\n    var worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    var endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n    var startWorld = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n    var world = startWorld;\n    var renderCount = this.indicesBuffer_.getSize();\n    do {\n      // apply the current projection transform with the invert of the one used to fill buffers\n      this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n      translateTransform(this.currentTransform_, world * worldWidth, 0);\n      multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n      this.helper.applyUniforms(frameState);\n      this.helper.drawElements(0, renderCount);\n    } while (++world < endWorld);\n    this.helper.finalizeDraw(frameState, this.dispatchPreComposeEvent, this.dispatchPostComposeEvent);\n    var canvas = this.helper.getCanvas();\n    if (this.hitDetectionEnabled_) {\n      this.renderHitDetection(frameState, startWorld, endWorld, worldWidth);\n      this.hitRenderTarget_.clearCachedData();\n    }\n    this.postRender(gl, frameState);\n    return canvas;\n  };\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  WebGLPointsLayerRenderer.prototype.prepareFrameInternal = function (frameState) {\n    var layer = this.getLayer();\n    var vectorSource = layer.getSource();\n    var viewState = frameState.viewState;\n    var viewNotMoving = !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING];\n    var extentChanged = !equals(this.previousExtent_, frameState.extent);\n    var sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n    if (sourceChanged) {\n      this.sourceRevision_ = vectorSource.getRevision();\n    }\n    if (viewNotMoving && (extentChanged || sourceChanged)) {\n      var projection = viewState.projection;\n      var resolution = viewState.resolution;\n      var renderBuffer = layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n      var extent = buffer(frameState.extent, renderBuffer * resolution);\n      vectorSource.loadFeatures(extent, resolution, projection);\n      this.rebuildBuffers_(frameState);\n      this.previousExtent_ = frameState.extent.slice();\n    }\n    this.helper.useProgram(this.program_);\n    this.helper.prepareDraw(frameState);\n    // write new data\n    this.helper.bindBuffer(this.verticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.attributes);\n    return true;\n  };\n  /**\n   * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much\n   * @param {import(\"../../PluggableMap\").FrameState} frameState Frame state.\n   * @private\n   */\n  WebGLPointsLayerRenderer.prototype.rebuildBuffers_ = function (frameState) {\n    // saves the projection transform for the current frame state\n    var projectionTransform = createTransform();\n    this.helper.makeProjectionTransform(frameState, projectionTransform);\n    // here we anticipate the amount of render instructions that we well generate\n    // this can be done since we know that for normal render we only have x, y as base instructions,\n    // and x, y, r, g, b, a and featureUid for hit render instructions\n    // and we also know the amount of custom attributes to append to these\n    var totalInstructionsCount = (2 + this.customAttributes.length) * this.featureCount_;\n    if (!this.renderInstructions_ || this.renderInstructions_.length !== totalInstructionsCount) {\n      this.renderInstructions_ = new Float32Array(totalInstructionsCount);\n    }\n    if (this.hitDetectionEnabled_) {\n      var totalHitInstructionsCount = (7 + this.customAttributes.length) * this.featureCount_;\n      if (!this.hitRenderInstructions_ || this.hitRenderInstructions_.length !== totalHitInstructionsCount) {\n        this.hitRenderInstructions_ = new Float32Array(totalHitInstructionsCount);\n      }\n    }\n    // loop on features to fill the buffer\n    var featureCache, geometry;\n    var tmpCoords = [];\n    var tmpColor = [];\n    var renderIndex = 0;\n    var hitIndex = 0;\n    var hitColor;\n    for (var featureUid in this.featureCache_) {\n      featureCache = this.featureCache_[featureUid];\n      geometry = /** @type {import(\"../../geom\").Point} */featureCache.geometry;\n      if (!geometry || geometry.getType() !== 'Point') {\n        continue;\n      }\n      tmpCoords[0] = geometry.getFlatCoordinates()[0];\n      tmpCoords[1] = geometry.getFlatCoordinates()[1];\n      applyTransform(projectionTransform, tmpCoords);\n      hitColor = colorEncodeId(hitIndex + 6, tmpColor);\n      this.renderInstructions_[renderIndex++] = tmpCoords[0];\n      this.renderInstructions_[renderIndex++] = tmpCoords[1];\n      // for hit detection, the feature uid is saved in the opacity value\n      // and the index of the opacity value is encoded in the color values\n      if (this.hitDetectionEnabled_) {\n        this.hitRenderInstructions_[hitIndex++] = tmpCoords[0];\n        this.hitRenderInstructions_[hitIndex++] = tmpCoords[1];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[0];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[1];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[2];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[3];\n        this.hitRenderInstructions_[hitIndex++] = Number(featureUid);\n      }\n      // pushing custom attributes\n      var value = void 0;\n      for (var j = 0; j < this.customAttributes.length; j++) {\n        value = this.customAttributes[j].callback(featureCache.feature, featureCache.properties);\n        this.renderInstructions_[renderIndex++] = value;\n        if (this.hitDetectionEnabled_) {\n          this.hitRenderInstructions_[hitIndex++] = value;\n        }\n      }\n    }\n    /** @type {import('./Layer').WebGLWorkerGenerateBuffersMessage} */\n    var message = {\n      type: WebGLWorkerMessageType.GENERATE_BUFFERS,\n      renderInstructions: this.renderInstructions_.buffer,\n      customAttributesCount: this.customAttributes.length\n    };\n    // additional properties will be sent back as-is by the worker\n    message['projectionTransform'] = projectionTransform;\n    message['generateBuffersRun'] = ++this.generateBuffersRun_;\n    this.ready = false;\n    this.worker_.postMessage(message, [this.renderInstructions_.buffer]);\n    this.renderInstructions_ = null;\n    /** @type {import('./Layer').WebGLWorkerGenerateBuffersMessage} */\n    if (this.hitDetectionEnabled_) {\n      var hitMessage = {\n        type: WebGLWorkerMessageType.GENERATE_BUFFERS,\n        renderInstructions: this.hitRenderInstructions_.buffer,\n        customAttributesCount: 5 + this.customAttributes.length\n      };\n      hitMessage['projectionTransform'] = projectionTransform;\n      hitMessage['hitDetection'] = true;\n      this.worker_.postMessage(hitMessage, [this.hitRenderInstructions_.buffer]);\n      this.hitRenderInstructions_ = null;\n    }\n  };\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  WebGLPointsLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n    assert(this.hitDetectionEnabled_, 66);\n    if (!this.hitRenderInstructions_) {\n      return undefined;\n    }\n    var pixel = applyTransform(frameState.coordinateToPixelTransform, coordinate.slice());\n    var data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n    var color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n    var index = colorDecodeId(color);\n    var opacity = this.hitRenderInstructions_[index];\n    var uid = Math.floor(opacity).toString();\n    var source = this.getLayer().getSource();\n    var feature = source.getFeatureByUid(uid);\n    if (feature) {\n      return callback(feature, this.getLayer(), null);\n    }\n    return undefined;\n  };\n  /**\n   * Render the hit detection data to the corresponding render target\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState current frame state\n   * @param {number} startWorld the world to render in the first iteration\n   * @param {number} endWorld the last world to render\n   * @param {number} worldWidth the width of the worlds being rendered\n   */\n  WebGLPointsLayerRenderer.prototype.renderHitDetection = function (frameState, startWorld, endWorld, worldWidth) {\n    // skip render entirely if vertex buffers not ready/generated yet\n    if (!this.hitVerticesBuffer_.getSize()) {\n      return;\n    }\n    var world = startWorld;\n    this.hitRenderTarget_.setSize([Math.floor(frameState.size[0] / 2), Math.floor(frameState.size[1] / 2)]);\n    this.helper.useProgram(this.hitProgram_);\n    this.helper.prepareDrawToRenderTarget(frameState, this.hitRenderTarget_, true);\n    this.helper.bindBuffer(this.hitVerticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.hitDetectionAttributes);\n    do {\n      this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n      translateTransform(this.currentTransform_, world * worldWidth, 0);\n      multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n      this.helper.applyUniforms(frameState);\n      var renderCount = this.indicesBuffer_.getSize();\n      this.helper.drawElements(0, renderCount);\n    } while (++world < endWorld);\n  };\n  /**\n   * Clean up.\n   */\n  WebGLPointsLayerRenderer.prototype.disposeInternal = function () {\n    this.worker_.terminate();\n    this.layer_ = null;\n    this.sourceListenKeys_.forEach(function (key) {\n      unlistenByKey(key);\n    });\n    this.sourceListenKeys_ = null;\n    _super.prototype.disposeInternal.call(this);\n  };\n  return WebGLPointsLayerRenderer;\n}(WebGLLayerRenderer);\nexport default WebGLPointsLayerRenderer;","map":{"version":3,"names":["BaseVector","VectorEventType","ViewHint","WebGLArrayBuffer","WebGLLayerRenderer","WebGLWorkerMessageType","colorDecodeId","colorEncodeId","WebGLRenderTarget","ARRAY_BUFFER","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","AttributeType","DefaultUniform","apply","applyTransform","create","createTransform","makeInverse","makeInverseTransform","multiply","multiplyTransform","translate","translateTransform","assert","buffer","createEmpty","equals","getWidth","createWebGLWorker","getUid","listen","unlistenByKey","WebGLPointsLayerRenderer","_super","__extends","layer","options","_this","uniforms","projectionMatrixTransform","PROJECTION_MATRIX","call","postProcesses","ready","sourceRevision_","verticesBuffer_","hitVerticesBuffer_","indicesBuffer_","vertexShader_","vertexShader","fragmentShader_","fragmentShader","program_","hitDetectionEnabled_","hitFragmentShader","hitVertexShader","hitVertexShader_","hitFragmentShader_","hitProgram_","customAttributes","attributes","map","attribute","name","size","type","FLOAT","concat","hitDetectionAttributes","previousExtent_","currentTransform_","renderTransform_","invertRenderTransform_","renderInstructions_","Float32Array","hitRenderInstructions_","hitRenderTarget_","generateBuffersRun_","worker_","addEventListener","event","received","data","GENERATE_BUFFERS","projectionTransform","hitDetection","fromArrayBuffer","vertexBuffer","helper","flushBufferData","indexBuffer","renderInstructions","generateBuffersRun","getLayer","changed","bind","featureCache_","featureCount_","source","getSource","sourceListenKeys_","ADDFEATURE","handleSourceFeatureAdded_","CHANGEFEATURE","handleSourceFeatureChanged_","REMOVEFEATURE","handleSourceFeatureDelete_","CLEAR","handleSourceFeatureClear_","forEachFeature","feature","properties","getProperties","geometry","getGeometry","prototype","afterHelperCreated","getProgram","renderFrame","frameState","gl","getGL","preRender","projection","viewState","vectorSource","multiWorld","getWrapX","canWrapX","projectionExtent","getExtent","extent","worldWidth","endWorld","Math","ceil","startWorld","floor","world","renderCount","getSize","makeProjectionTransform","applyUniforms","drawElements","finalizeDraw","dispatchPreComposeEvent","dispatchPostComposeEvent","canvas","getCanvas","renderHitDetection","clearCachedData","postRender","prepareFrameInternal","viewNotMoving","viewHints","ANIMATING","INTERACTING","extentChanged","sourceChanged","getRevision","resolution","renderBuffer","getRenderBuffer","loadFeatures","rebuildBuffers_","slice","useProgram","prepareDraw","bindBuffer","enableAttributes","totalInstructionsCount","length","totalHitInstructionsCount","featureCache","tmpCoords","tmpColor","renderIndex","hitIndex","hitColor","featureUid","getType","getFlatCoordinates","Number","value","j","callback","message","customAttributesCount","postMessage","hitMessage","forEachFeatureAtCoordinate","coordinate","hitTolerance","matches","undefined","pixel","coordinateToPixelTransform","readPixel","color","index","opacity","uid","toString","getFeatureByUid","setSize","prepareDrawToRenderTarget","disposeInternal","terminate","layer_","forEach","key"],"sources":["../../src/renderer/webgl/PointsLayer.js"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,OAAOA,UAAU,MAAM,2BAA2B;AAClD,OAAOC,eAAe,MAAM,iCAAiC;AAC7D,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,gBAAgB,MAAM,uBAAuB;AACpD,OAAOC,kBAAkB,IACvBC,sBAAsB,EACtBC,aAAa,EACbC,aAAa,QACR,YAAY;AACnB,OAAOC,iBAAiB,MAAM,6BAA6B;AAC3D,SAAQC,YAAY,EAAEC,YAAY,EAAEC,oBAAoB,QAAO,gBAAgB;AAC/E,SAAQC,aAAa,EAAEC,cAAc,QAAO,uBAAuB;AACnE,SACEC,KAAK,IAAIC,cAAc,EACvBC,MAAM,IAAIC,eAAe,EACzBC,WAAW,IAAIC,oBAAoB,EACnCC,QAAQ,IAAIC,iBAAiB,EAC7BC,SAAS,IAAIC,kBAAkB,QAC1B,oBAAoB;AAC3B,SAAQC,MAAM,QAAO,kBAAkB;AACvC,SAAQC,MAAM,EAAEC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,QAAO,iBAAiB;AACrE,SAAQZ,MAAM,IAAIa,iBAAiB,QAAO,uBAAuB;AACjE,SAAQC,MAAM,QAAO,eAAe;AACpC,SAAQC,MAAM,EAAEC,aAAa,QAAO,iBAAiB;AAErD;;;;;;;AAQA;;;;;;;AAQA;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA,IAAAC,wBAAA,0BAAAC,MAAA;EAAuCC,SAAA,CAAAF,wBAAA,EAAAC,MAAA;EACrC;;;;EAIA,SAAAD,yBAAYG,KAAK,EAAEC,OAAO;IAA1B,IAAAC,KAAA;IACE,IAAMC,QAAQ,GAAGF,OAAO,CAACE,QAAQ,IAAI,EAAE;IACvC,IAAMC,yBAAyB,GAAGvB,eAAe,EAAE;IACnDsB,QAAQ,CAAC1B,cAAc,CAAC4B,iBAAiB,CAAC,GAAGD,yBAAyB;YAEtEN,MAAA,CAAAQ,IAAA,OAAMN,KAAK,EAAE;MACXG,QAAQ,EAAEA,QAAQ;MAClBI,aAAa,EAAEN,OAAO,CAACM;KACxB,CAAC;IAEFL,KAAI,CAACM,KAAK,GAAG,KAAK;IAElBN,KAAI,CAACO,eAAe,GAAG,CAAC,CAAC;IAEzBP,KAAI,CAACQ,eAAe,GAAG,IAAI3C,gBAAgB,CAACM,YAAY,EAAEC,YAAY,CAAC;IACvE4B,KAAI,CAACS,kBAAkB,GAAG,IAAI5C,gBAAgB,CAACM,YAAY,EAAEC,YAAY,CAAC;IAC1E4B,KAAI,CAACU,cAAc,GAAG,IAAI7C,gBAAgB,CACxCQ,oBAAoB,EACpBD,YAAY,CACb;IAED;;;IAGA4B,KAAI,CAACW,aAAa,GAAGZ,OAAO,CAACa,YAAY;IAEzC;;;IAGAZ,KAAI,CAACa,eAAe,GAAGd,OAAO,CAACe,cAAc;IAE7C;;;;IAIAd,KAAI,CAACe,QAAQ;IAEb;;;;IAIAf,KAAI,CAACgB,oBAAoB,GACvBjB,OAAO,CAACkB,iBAAiB,IAAIlB,OAAO,CAACmB,eAAe,GAAG,IAAI,GAAG,KAAK;IAErE;;;IAGAlB,KAAI,CAACmB,gBAAgB,GAAGpB,OAAO,CAACmB,eAAe;IAE/C;;;IAGAlB,KAAI,CAACoB,kBAAkB,GAAGrB,OAAO,CAACkB,iBAAiB;IAEnD;;;;IAIAjB,KAAI,CAACqB,WAAW;IAEhB,IAAMC,gBAAgB,GAAGvB,OAAO,CAACwB,UAAU,GACvCxB,OAAO,CAACwB,UAAU,CAACC,GAAG,CAAC,UAAUC,SAAS;MACxC,OAAO;QACLC,IAAI,EAAE,IAAI,GAAGD,SAAS,CAACC,IAAI;QAC3BC,IAAI,EAAE,CAAC;QACPC,IAAI,EAAEtD,aAAa,CAACuD;OACrB;IACH,CAAC,CAAC,GACF,EAAE;IAEN;;;;;IAKA7B,KAAI,CAACuB,UAAU,GAAG,CAChB;MACEG,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAE,CAAC;MACPC,IAAI,EAAEtD,aAAa,CAACuD;KACrB,EACD;MACEH,IAAI,EAAE,SAAS;MACfC,IAAI,EAAE,CAAC;MACPC,IAAI,EAAEtD,aAAa,CAACuD;KACrB,CACF,CAACC,MAAM,CAACR,gBAAgB,CAAC;IAE1B;;;;IAIAtB,KAAI,CAAC+B,sBAAsB,GAAG,CAC5B;MACEL,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAE,CAAC;MACPC,IAAI,EAAEtD,aAAa,CAACuD;KACrB,EACD;MACEH,IAAI,EAAE,SAAS;MACfC,IAAI,EAAE,CAAC;MACPC,IAAI,EAAEtD,aAAa,CAACuD;KACrB,EACD;MACEH,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAE,CAAC;MACPC,IAAI,EAAEtD,aAAa,CAACuD;KACrB,EACD;MACEH,IAAI,EAAE,cAAc;MACpBC,IAAI,EAAE,CAAC;MACPC,IAAI,EAAEtD,aAAa,CAACuD;KACrB,CACF,CAACC,MAAM,CAACR,gBAAgB,CAAC;IAE1BtB,KAAI,CAACsB,gBAAgB,GAAGvB,OAAO,CAACwB,UAAU,GAAGxB,OAAO,CAACwB,UAAU,GAAG,EAAE;IAEpEvB,KAAI,CAACgC,eAAe,GAAG5C,WAAW,EAAE;IAEpC;;;;;;;IAOAY,KAAI,CAACiC,iBAAiB,GAAG/B,yBAAyB;IAElD;;;;;IAKAF,KAAI,CAACkC,gBAAgB,GAAGvD,eAAe,EAAE;IAEzC;;;;IAIAqB,KAAI,CAACmC,sBAAsB,GAAGxD,eAAe,EAAE;IAE/C;;;;IAIAqB,KAAI,CAACoC,mBAAmB,GAAG,IAAIC,YAAY,CAAC,CAAC,CAAC;IAE9C;;;;;IAKArC,KAAI,CAACsC,sBAAsB,GAAG,IAAID,YAAY,CAAC,CAAC,CAAC;IAEjD;;;;IAIArC,KAAI,CAACuC,gBAAgB;IAErB;;;;;IAKAvC,KAAI,CAACwC,mBAAmB,GAAG,CAAC;IAE5BxC,KAAI,CAACyC,OAAO,GAAGlD,iBAAiB,EAAE;IAClCS,KAAI,CAACyC,OAAO,CAACC,gBAAgB,CAC3B,SAAS;IACT;;;;IAIA,UAAUC,KAAK;MACb,IAAMC,QAAQ,GAAGD,KAAK,CAACE,IAAI;MAC3B,IAAID,QAAQ,CAAChB,IAAI,KAAK7D,sBAAsB,CAAC+E,gBAAgB,EAAE;QAC7D,IAAMC,mBAAmB,GAAGH,QAAQ,CAACG,mBAAmB;QACxD,IAAIH,QAAQ,CAACI,YAAY,EAAE;UACzB,IAAI,CAACvC,kBAAkB,CAACwC,eAAe,CAACL,QAAQ,CAACM,YAAY,CAAC;UAC9D,IAAI,CAACC,MAAM,CAACC,eAAe,CAAC,IAAI,CAAC3C,kBAAkB,CAAC;SACrD,MAAM;UACL,IAAI,CAACD,eAAe,CAACyC,eAAe,CAACL,QAAQ,CAACM,YAAY,CAAC;UAC3D,IAAI,CAACC,MAAM,CAACC,eAAe,CAAC,IAAI,CAAC5C,eAAe,CAAC;;QAEnD,IAAI,CAACE,cAAc,CAACuC,eAAe,CAACL,QAAQ,CAACS,WAAW,CAAC;QACzD,IAAI,CAACF,MAAM,CAACC,eAAe,CAAC,IAAI,CAAC1C,cAAc,CAAC;QAEhD,IAAI,CAACwB,gBAAgB,GAAGa,mBAAmB;QAC3ClE,oBAAoB,CAClB,IAAI,CAACsD,sBAAsB,EAC3B,IAAI,CAACD,gBAAgB,CACtB;QACD,IAAIU,QAAQ,CAACI,YAAY,EAAE;UACzB,IAAI,CAACV,sBAAsB,GAAG,IAAID,YAAY,CAC5CM,KAAK,CAACE,IAAI,CAACS,kBAAkB,CAC9B;SACF,MAAM;UACL,IAAI,CAAClB,mBAAmB,GAAG,IAAIC,YAAY,CACzCM,KAAK,CAACE,IAAI,CAACS,kBAAkB,CAC9B;UACD,IAAIV,QAAQ,CAACW,kBAAkB,KAAK,IAAI,CAACf,mBAAmB,EAAE;YAC5D,IAAI,CAAClC,KAAK,GAAG,IAAI;;;QAIrB,IAAI,CAACkD,QAAQ,EAAE,CAACC,OAAO,EAAE;;IAE7B,CAAC,CAACC,IAAI,CAAC1D,KAAI,CAAC,CACb;IAED;;;;;IAKAA,KAAI,CAAC2D,aAAa,GAAG,EAAE;IAEvB;;;;;IAKA3D,KAAI,CAAC4D,aAAa,GAAG,CAAC;IAEtB,IAAMC,MAAM,GAAG7D,KAAI,CAACwD,QAAQ,EAAE,CAACM,SAAS,EAAE;IAC1C9D,KAAI,CAAC+D,iBAAiB,GAAG,CACvBtE,MAAM,CACJoE,MAAM,EACNlG,eAAe,CAACqG,UAAU,EAC1BhE,KAAI,CAACiE,yBAAyB,EAC9BjE,KAAI,CACL,EACDP,MAAM,CACJoE,MAAM,EACNlG,eAAe,CAACuG,aAAa,EAC7BlE,KAAI,CAACmE,2BAA2B,EAChCnE,KAAI,CACL,EACDP,MAAM,CACJoE,MAAM,EACNlG,eAAe,CAACyG,aAAa,EAC7BpE,KAAI,CAACqE,0BAA0B,EAC/BrE,KAAI,CACL,EACDP,MAAM,CACJoE,MAAM,EACNlG,eAAe,CAAC2G,KAAK,EACrBtE,KAAI,CAACuE,yBAAyB,EAC9BvE,KAAI,CACL,CACF;IACD6D,MAAM,CAACW,cAAc,CACnB,UAAUC,OAAO;MACf,IAAI,CAACd,aAAa,CAACnE,MAAM,CAACiF,OAAO,CAAC,CAAC,GAAG;QACpCA,OAAO,EAAEA,OAAO;QAChBC,UAAU,EAAED,OAAO,CAACE,aAAa,EAAE;QACnCC,QAAQ,EAAEH,OAAO,CAACI,WAAW;OAC9B;MACD,IAAI,CAACjB,aAAa,EAAE;IACtB,CAAC,CAACF,IAAI,CAAC1D,KAAI,CAAC,CACb;;EACH;EAEAL,wBAAA,CAAAmF,SAAA,CAAAC,kBAAkB,GAAlB;IACE,IAAI,CAAChE,QAAQ,GAAG,IAAI,CAACoC,MAAM,CAAC6B,UAAU,CACpC,IAAI,CAACnE,eAAe,EACpB,IAAI,CAACF,aAAa,CACnB;IAED,IAAI,IAAI,CAACK,oBAAoB,EAAE;MAC7B,IAAI,CAACK,WAAW,GAAG,IAAI,CAAC8B,MAAM,CAAC6B,UAAU,CACvC,IAAI,CAAC5D,kBAAkB,EACvB,IAAI,CAACD,gBAAgB,CACtB;MAED,IAAI,CAACoB,gBAAgB,GAAG,IAAIrE,iBAAiB,CAAC,IAAI,CAACiF,MAAM,CAAC;;EAE9D,CAAC;EAED;;;;EAIAxD,wBAAA,CAAAmF,SAAA,CAAAb,yBAAyB,GAAzB,UAA0BtB,KAAK;IAC7B,IAAM8B,OAAO,GAAG9B,KAAK,CAAC8B,OAAO;IAC7B,IAAI,CAACd,aAAa,CAACnE,MAAM,CAACiF,OAAO,CAAC,CAAC,GAAG;MACpCA,OAAO,EAAEA,OAAO;MAChBC,UAAU,EAAED,OAAO,CAACE,aAAa,EAAE;MACnCC,QAAQ,EAAEH,OAAO,CAACI,WAAW;KAC9B;IACD,IAAI,CAACjB,aAAa,EAAE;EACtB,CAAC;EAED;;;;EAIAjE,wBAAA,CAAAmF,SAAA,CAAAX,2BAA2B,GAA3B,UAA4BxB,KAAK;IAC/B,IAAM8B,OAAO,GAAG9B,KAAK,CAAC8B,OAAO;IAC7B,IAAI,CAACd,aAAa,CAACnE,MAAM,CAACiF,OAAO,CAAC,CAAC,GAAG;MACpCA,OAAO,EAAEA,OAAO;MAChBC,UAAU,EAAED,OAAO,CAACE,aAAa,EAAE;MACnCC,QAAQ,EAAEH,OAAO,CAACI,WAAW;KAC9B;EACH,CAAC;EAED;;;;EAIAlF,wBAAA,CAAAmF,SAAA,CAAAT,0BAA0B,GAA1B,UAA2B1B,KAAK;IAC9B,IAAM8B,OAAO,GAAG9B,KAAK,CAAC8B,OAAO;IAC7B,OAAO,IAAI,CAACd,aAAa,CAACnE,MAAM,CAACiF,OAAO,CAAC,CAAC;IAC1C,IAAI,CAACb,aAAa,EAAE;EACtB,CAAC;EAED;;;EAGAjE,wBAAA,CAAAmF,SAAA,CAAAP,yBAAyB,GAAzB;IACE,IAAI,CAACZ,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,aAAa,GAAG,CAAC;EACxB,CAAC;EAED;;;;;EAKAjE,wBAAA,CAAAmF,SAAA,CAAAG,WAAW,GAAX,UAAYC,UAAU;IACpB,IAAMC,EAAE,GAAG,IAAI,CAAChC,MAAM,CAACiC,KAAK,EAAE;IAC9B,IAAI,CAACC,SAAS,CAACF,EAAE,EAAED,UAAU,CAAC;IAE9B,IAAMI,UAAU,GAAGJ,UAAU,CAACK,SAAS,CAACD,UAAU;IAClD,IAAMxF,KAAK,GAAG,IAAI,CAAC0D,QAAQ,EAAE;IAC7B,IAAMgC,YAAY,GAAG1F,KAAK,CAACgE,SAAS,EAAE;IACtC;IACA,IAAM2B,UAAU,GAAGD,YAAY,CAACE,QAAQ,EAAE,IAAIJ,UAAU,CAACK,QAAQ,EAAE;IACnE,IAAMC,gBAAgB,GAAGN,UAAU,CAACO,SAAS,EAAE;IAE/C,IAAMC,MAAM,GAAGZ,UAAU,CAACY,MAAM;IAChC,IAAMC,UAAU,GAAGN,UAAU,GAAGnG,QAAQ,CAACsG,gBAAgB,CAAC,GAAG,IAAI;IACjE,IAAMI,QAAQ,GAAGP,UAAU,GACvBQ,IAAI,CAACC,IAAI,CAAC,CAACJ,MAAM,CAAC,CAAC,CAAC,GAAGF,gBAAgB,CAAC,CAAC,CAAC,IAAIG,UAAU,CAAC,GAAG,CAAC,GAC7D,CAAC;IAEL,IAAMI,UAAU,GAAGV,UAAU,GACzBQ,IAAI,CAACG,KAAK,CAAC,CAACN,MAAM,CAAC,CAAC,CAAC,GAAGF,gBAAgB,CAAC,CAAC,CAAC,IAAIG,UAAU,CAAC,GAC1D,CAAC;IAEL,IAAIM,KAAK,GAAGF,UAAU;IACtB,IAAMG,WAAW,GAAG,IAAI,CAAC5F,cAAc,CAAC6F,OAAO,EAAE;IAEjD,GAAG;MACD;MACA,IAAI,CAACpD,MAAM,CAACqD,uBAAuB,CAACtB,UAAU,EAAE,IAAI,CAACjD,iBAAiB,CAAC;MACvEhD,kBAAkB,CAAC,IAAI,CAACgD,iBAAiB,EAAEoE,KAAK,GAAGN,UAAU,EAAE,CAAC,CAAC;MACjEhH,iBAAiB,CAAC,IAAI,CAACkD,iBAAiB,EAAE,IAAI,CAACE,sBAAsB,CAAC;MACtE,IAAI,CAACgB,MAAM,CAACsD,aAAa,CAACvB,UAAU,CAAC;MAErC,IAAI,CAAC/B,MAAM,CAACuD,YAAY,CAAC,CAAC,EAAEJ,WAAW,CAAC;KACzC,QAAQ,EAAED,KAAK,GAAGL,QAAQ;IAE3B,IAAI,CAAC7C,MAAM,CAACwD,YAAY,CACtBzB,UAAU,EACV,IAAI,CAAC0B,uBAAuB,EAC5B,IAAI,CAACC,wBAAwB,CAC9B;IACD,IAAMC,MAAM,GAAG,IAAI,CAAC3D,MAAM,CAAC4D,SAAS,EAAE;IAEtC,IAAI,IAAI,CAAC/F,oBAAoB,EAAE;MAC7B,IAAI,CAACgG,kBAAkB,CAAC9B,UAAU,EAAEiB,UAAU,EAAEH,QAAQ,EAAED,UAAU,CAAC;MACrE,IAAI,CAACxD,gBAAgB,CAAC0E,eAAe,EAAE;;IAGzC,IAAI,CAACC,UAAU,CAAC/B,EAAE,EAAED,UAAU,CAAC;IAE/B,OAAO4B,MAAM;EACf,CAAC;EAED;;;;;EAKAnH,wBAAA,CAAAmF,SAAA,CAAAqC,oBAAoB,GAApB,UAAqBjC,UAAU;IAC7B,IAAMpF,KAAK,GAAG,IAAI,CAAC0D,QAAQ,EAAE;IAC7B,IAAMgC,YAAY,GAAG1F,KAAK,CAACgE,SAAS,EAAE;IACtC,IAAMyB,SAAS,GAAGL,UAAU,CAACK,SAAS;IACtC,IAAM6B,aAAa,GACjB,CAAClC,UAAU,CAACmC,SAAS,CAACzJ,QAAQ,CAAC0J,SAAS,CAAC,IACzC,CAACpC,UAAU,CAACmC,SAAS,CAACzJ,QAAQ,CAAC2J,WAAW,CAAC;IAC7C,IAAMC,aAAa,GAAG,CAACnI,MAAM,CAAC,IAAI,CAAC2C,eAAe,EAAEkD,UAAU,CAACY,MAAM,CAAC;IACtE,IAAM2B,aAAa,GAAG,IAAI,CAAClH,eAAe,GAAGiF,YAAY,CAACkC,WAAW,EAAE;IAEvE,IAAID,aAAa,EAAE;MACjB,IAAI,CAAClH,eAAe,GAAGiF,YAAY,CAACkC,WAAW,EAAE;;IAGnD,IAAIN,aAAa,KAAKI,aAAa,IAAIC,aAAa,CAAC,EAAE;MACrD,IAAMnC,UAAU,GAAGC,SAAS,CAACD,UAAU;MACvC,IAAMqC,UAAU,GAAGpC,SAAS,CAACoC,UAAU;MAEvC,IAAMC,YAAY,GAChB9H,KAAK,YAAYpC,UAAU,GAAGoC,KAAK,CAAC+H,eAAe,EAAE,GAAG,CAAC;MAC3D,IAAM/B,MAAM,GAAG3G,MAAM,CAAC+F,UAAU,CAACY,MAAM,EAAE8B,YAAY,GAAGD,UAAU,CAAC;MACnEnC,YAAY,CAACsC,YAAY,CAAChC,MAAM,EAAE6B,UAAU,EAAErC,UAAU,CAAC;MAEzD,IAAI,CAACyC,eAAe,CAAC7C,UAAU,CAAC;MAChC,IAAI,CAAClD,eAAe,GAAGkD,UAAU,CAACY,MAAM,CAACkC,KAAK,EAAE;;IAGlD,IAAI,CAAC7E,MAAM,CAAC8E,UAAU,CAAC,IAAI,CAAClH,QAAQ,CAAC;IACrC,IAAI,CAACoC,MAAM,CAAC+E,WAAW,CAAChD,UAAU,CAAC;IAEnC;IACA,IAAI,CAAC/B,MAAM,CAACgF,UAAU,CAAC,IAAI,CAAC3H,eAAe,CAAC;IAC5C,IAAI,CAAC2C,MAAM,CAACgF,UAAU,CAAC,IAAI,CAACzH,cAAc,CAAC;IAC3C,IAAI,CAACyC,MAAM,CAACiF,gBAAgB,CAAC,IAAI,CAAC7G,UAAU,CAAC;IAE7C,OAAO,IAAI;EACb,CAAC;EAED;;;;;EAKA5B,wBAAA,CAAAmF,SAAA,CAAAiD,eAAe,GAAf,UAAgB7C,UAAU;IACxB;IACA,IAAMnC,mBAAmB,GAAGpE,eAAe,EAAE;IAC7C,IAAI,CAACwE,MAAM,CAACqD,uBAAuB,CAACtB,UAAU,EAAEnC,mBAAmB,CAAC;IAEpE;IACA;IACA;IACA;IACA,IAAMsF,sBAAsB,GAC1B,CAAC,CAAC,GAAG,IAAI,CAAC/G,gBAAgB,CAACgH,MAAM,IAAI,IAAI,CAAC1E,aAAa;IACzD,IACE,CAAC,IAAI,CAACxB,mBAAmB,IACzB,IAAI,CAACA,mBAAmB,CAACkG,MAAM,KAAKD,sBAAsB,EAC1D;MACA,IAAI,CAACjG,mBAAmB,GAAG,IAAIC,YAAY,CAACgG,sBAAsB,CAAC;;IAErE,IAAI,IAAI,CAACrH,oBAAoB,EAAE;MAC7B,IAAMuH,yBAAyB,GAC7B,CAAC,CAAC,GAAG,IAAI,CAACjH,gBAAgB,CAACgH,MAAM,IAAI,IAAI,CAAC1E,aAAa;MACzD,IACE,CAAC,IAAI,CAACtB,sBAAsB,IAC5B,IAAI,CAACA,sBAAsB,CAACgG,MAAM,KAAKC,yBAAyB,EAChE;QACA,IAAI,CAACjG,sBAAsB,GAAG,IAAID,YAAY,CAC5CkG,yBAAyB,CAC1B;;;IAIL;IACA,IAAIC,YAAY,EAAE5D,QAAQ;IAC1B,IAAM6D,SAAS,GAAG,EAAE;IACpB,IAAMC,QAAQ,GAAG,EAAE;IACnB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,QAAQ;IACZ,KAAK,IAAMC,UAAU,IAAI,IAAI,CAACnF,aAAa,EAAE;MAC3C6E,YAAY,GAAG,IAAI,CAAC7E,aAAa,CAACmF,UAAU,CAAC;MAC7ClE,QAAQ,GAAG,yCACT4D,YAAY,CAAC5D,QACd;MACD,IAAI,CAACA,QAAQ,IAAIA,QAAQ,CAACmE,OAAO,EAAE,KAAK,OAAO,EAAE;QAC/C;;MAGFN,SAAS,CAAC,CAAC,CAAC,GAAG7D,QAAQ,CAACoE,kBAAkB,EAAE,CAAC,CAAC,CAAC;MAC/CP,SAAS,CAAC,CAAC,CAAC,GAAG7D,QAAQ,CAACoE,kBAAkB,EAAE,CAAC,CAAC,CAAC;MAC/CvK,cAAc,CAACsE,mBAAmB,EAAE0F,SAAS,CAAC;MAE9CI,QAAQ,GAAG5K,aAAa,CAAC2K,QAAQ,GAAG,CAAC,EAAEF,QAAQ,CAAC;MAEhD,IAAI,CAACtG,mBAAmB,CAACuG,WAAW,EAAE,CAAC,GAAGF,SAAS,CAAC,CAAC,CAAC;MACtD,IAAI,CAACrG,mBAAmB,CAACuG,WAAW,EAAE,CAAC,GAAGF,SAAS,CAAC,CAAC,CAAC;MAEtD;MACA;MACA,IAAI,IAAI,CAACzH,oBAAoB,EAAE;QAC7B,IAAI,CAACsB,sBAAsB,CAACsG,QAAQ,EAAE,CAAC,GAAGH,SAAS,CAAC,CAAC,CAAC;QACtD,IAAI,CAACnG,sBAAsB,CAACsG,QAAQ,EAAE,CAAC,GAAGH,SAAS,CAAC,CAAC,CAAC;QACtD,IAAI,CAACnG,sBAAsB,CAACsG,QAAQ,EAAE,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC;QACrD,IAAI,CAACvG,sBAAsB,CAACsG,QAAQ,EAAE,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC;QACrD,IAAI,CAACvG,sBAAsB,CAACsG,QAAQ,EAAE,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC;QACrD,IAAI,CAACvG,sBAAsB,CAACsG,QAAQ,EAAE,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC;QACrD,IAAI,CAACvG,sBAAsB,CAACsG,QAAQ,EAAE,CAAC,GAAGK,MAAM,CAACH,UAAU,CAAC;;MAG9D;MACA,IAAII,KAAK;MACT,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC7H,gBAAgB,CAACgH,MAAM,EAAEa,CAAC,EAAE,EAAE;QACrDD,KAAK,GAAG,IAAI,CAAC5H,gBAAgB,CAAC6H,CAAC,CAAC,CAACC,QAAQ,CACvCZ,YAAY,CAAC/D,OAAO,EACpB+D,YAAY,CAAC9D,UAAU,CACxB;QACD,IAAI,CAACtC,mBAAmB,CAACuG,WAAW,EAAE,CAAC,GAAGO,KAAK;QAC/C,IAAI,IAAI,CAAClI,oBAAoB,EAAE;UAC7B,IAAI,CAACsB,sBAAsB,CAACsG,QAAQ,EAAE,CAAC,GAAGM,KAAK;;;;IAKrD;IACA,IAAMG,OAAO,GAAG;MACdzH,IAAI,EAAE7D,sBAAsB,CAAC+E,gBAAgB;MAC7CQ,kBAAkB,EAAE,IAAI,CAAClB,mBAAmB,CAACjD,MAAM;MACnDmK,qBAAqB,EAAE,IAAI,CAAChI,gBAAgB,CAACgH;KAC9C;IACD;IACAe,OAAO,CAAC,qBAAqB,CAAC,GAAGtG,mBAAmB;IACpDsG,OAAO,CAAC,oBAAoB,CAAC,GAAG,EAAE,IAAI,CAAC7G,mBAAmB;IAC1D,IAAI,CAAClC,KAAK,GAAG,KAAK;IAClB,IAAI,CAACmC,OAAO,CAAC8G,WAAW,CAACF,OAAO,EAAE,CAAC,IAAI,CAACjH,mBAAmB,CAACjD,MAAM,CAAC,CAAC;IACpE,IAAI,CAACiD,mBAAmB,GAAG,IAAI;IAE/B;IACA,IAAI,IAAI,CAACpB,oBAAoB,EAAE;MAC7B,IAAMwI,UAAU,GAAG;QACjB5H,IAAI,EAAE7D,sBAAsB,CAAC+E,gBAAgB;QAC7CQ,kBAAkB,EAAE,IAAI,CAAChB,sBAAsB,CAACnD,MAAM;QACtDmK,qBAAqB,EAAE,CAAC,GAAG,IAAI,CAAChI,gBAAgB,CAACgH;OAClD;MACDkB,UAAU,CAAC,qBAAqB,CAAC,GAAGzG,mBAAmB;MACvDyG,UAAU,CAAC,cAAc,CAAC,GAAG,IAAI;MACjC,IAAI,CAAC/G,OAAO,CAAC8G,WAAW,CAACC,UAAU,EAAE,CACnC,IAAI,CAAClH,sBAAsB,CAACnD,MAAM,CACnC,CAAC;MACF,IAAI,CAACmD,sBAAsB,GAAG,IAAI;;EAEtC,CAAC;EAED;;;;;;;;;EASA3C,wBAAA,CAAAmF,SAAA,CAAA2E,0BAA0B,GAA1B,UACEC,UAAU,EACVxE,UAAU,EACVyE,YAAY,EACZP,QAAQ,EACRQ,OAAO;IAEP1K,MAAM,CAAC,IAAI,CAAC8B,oBAAoB,EAAE,EAAE,CAAC;IACrC,IAAI,CAAC,IAAI,CAACsB,sBAAsB,EAAE;MAChC,OAAOuH,SAAS;;IAGlB,IAAMC,KAAK,GAAGrL,cAAc,CAC1ByG,UAAU,CAAC6E,0BAA0B,EACrCL,UAAU,CAAC1B,KAAK,EAAE,CACnB;IAED,IAAMnF,IAAI,GAAG,IAAI,CAACN,gBAAgB,CAACyH,SAAS,CAACF,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxE,IAAMG,KAAK,GAAG,CAACpH,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IAC1E,IAAMqH,KAAK,GAAGlM,aAAa,CAACiM,KAAK,CAAC;IAClC,IAAME,OAAO,GAAG,IAAI,CAAC7H,sBAAsB,CAAC4H,KAAK,CAAC;IAClD,IAAME,GAAG,GAAGnE,IAAI,CAACG,KAAK,CAAC+D,OAAO,CAAC,CAACE,QAAQ,EAAE;IAE1C,IAAMxG,MAAM,GAAG,IAAI,CAACL,QAAQ,EAAE,CAACM,SAAS,EAAE;IAC1C,IAAMW,OAAO,GAAGZ,MAAM,CAACyG,eAAe,CAACF,GAAG,CAAC;IAC3C,IAAI3F,OAAO,EAAE;MACX,OAAO2E,QAAQ,CAAC3E,OAAO,EAAE,IAAI,CAACjB,QAAQ,EAAE,EAAE,IAAI,CAAC;;IAEjD,OAAOqG,SAAS;EAClB,CAAC;EAED;;;;;;;EAOAlK,wBAAA,CAAAmF,SAAA,CAAAkC,kBAAkB,GAAlB,UAAmB9B,UAAU,EAAEiB,UAAU,EAAEH,QAAQ,EAAED,UAAU;IAC7D;IACA,IAAI,CAAC,IAAI,CAACtF,kBAAkB,CAAC8F,OAAO,EAAE,EAAE;MACtC;;IAGF,IAAIF,KAAK,GAAGF,UAAU;IAEtB,IAAI,CAAC5D,gBAAgB,CAACgI,OAAO,CAAC,CAC5BtE,IAAI,CAACG,KAAK,CAAClB,UAAU,CAACvD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAClCsE,IAAI,CAACG,KAAK,CAAClB,UAAU,CAACvD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CACnC,CAAC;IAEF,IAAI,CAACwB,MAAM,CAAC8E,UAAU,CAAC,IAAI,CAAC5G,WAAW,CAAC;IACxC,IAAI,CAAC8B,MAAM,CAACqH,yBAAyB,CACnCtF,UAAU,EACV,IAAI,CAAC3C,gBAAgB,EACrB,IAAI,CACL;IAED,IAAI,CAACY,MAAM,CAACgF,UAAU,CAAC,IAAI,CAAC1H,kBAAkB,CAAC;IAC/C,IAAI,CAAC0C,MAAM,CAACgF,UAAU,CAAC,IAAI,CAACzH,cAAc,CAAC;IAC3C,IAAI,CAACyC,MAAM,CAACiF,gBAAgB,CAAC,IAAI,CAACrG,sBAAsB,CAAC;IAEzD,GAAG;MACD,IAAI,CAACoB,MAAM,CAACqD,uBAAuB,CAACtB,UAAU,EAAE,IAAI,CAACjD,iBAAiB,CAAC;MACvEhD,kBAAkB,CAAC,IAAI,CAACgD,iBAAiB,EAAEoE,KAAK,GAAGN,UAAU,EAAE,CAAC,CAAC;MACjEhH,iBAAiB,CAAC,IAAI,CAACkD,iBAAiB,EAAE,IAAI,CAACE,sBAAsB,CAAC;MACtE,IAAI,CAACgB,MAAM,CAACsD,aAAa,CAACvB,UAAU,CAAC;MAErC,IAAMoB,WAAW,GAAG,IAAI,CAAC5F,cAAc,CAAC6F,OAAO,EAAE;MACjD,IAAI,CAACpD,MAAM,CAACuD,YAAY,CAAC,CAAC,EAAEJ,WAAW,CAAC;KACzC,QAAQ,EAAED,KAAK,GAAGL,QAAQ;EAC7B,CAAC;EAED;;;EAGArG,wBAAA,CAAAmF,SAAA,CAAA2F,eAAe,GAAf;IACE,IAAI,CAAChI,OAAO,CAACiI,SAAS,EAAE;IACxB,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAAC5G,iBAAiB,CAAC6G,OAAO,CAAC,UAAUC,GAAG;MAC1CnL,aAAa,CAACmL,GAAG,CAAC;IACpB,CAAC,CAAC;IACF,IAAI,CAAC9G,iBAAiB,GAAG,IAAI;IAC7BnE,MAAA,CAAAkF,SAAA,CAAM2F,eAAe,CAAArK,IAAA,MAAE;EACzB,CAAC;EACH,OAAAT,wBAAC;AAAD,CAAC,CA9nBsC7B,kBAAkB;AAgoBzD,eAAe6B,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module"}