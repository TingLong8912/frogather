{"ast":null,"code":"/**\n * @module ol/webgl/Helper\n */\nimport ContextEventType from '../webgl/ContextEventType.js';\nimport Disposable from '../Disposable.js';\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\nimport { FLOAT, UNSIGNED_BYTE, UNSIGNED_INT, UNSIGNED_SHORT, getContext } from '../webgl.js';\nimport { clear } from '../obj.js';\nimport { compose as composeTransform, create as createTransform, reset as resetTransform, rotate as rotateTransform, scale as scaleTransform } from '../transform.js';\nimport { create, fromTransform } from '../vec/mat4.js';\nimport { getUid } from '../util.js';\n\n/**\n * @typedef {Object} BufferCacheEntry\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\n */\n\n/**\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\n * @enum {number}\n */\nexport const ShaderType = {\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31\n};\n\n/**\n * Names of uniforms made available to all shaders.\n * Please note: changing these *will* break custom shaders!\n * @enum {string}\n */\nexport const DefaultUniform = {\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  OFFSET_SCALE_MATRIX: 'u_offsetScaleMatrix',\n  OFFSET_ROTATION_MATRIX: 'u_offsetRotateMatrix',\n  TIME: 'u_time',\n  ZOOM: 'u_zoom',\n  RESOLUTION: 'u_resolution',\n  VIEWPORT_SIZE_PX: 'u_viewportSizePx',\n  PIXEL_RATIO: 'u_pixelRatio',\n  HIT_DETECTION: 'u_hitDetection'\n};\n\n/**\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\n * @enum {number}\n */\nexport const AttributeType = {\n  UNSIGNED_BYTE: UNSIGNED_BYTE,\n  UNSIGNED_SHORT: UNSIGNED_SHORT,\n  UNSIGNED_INT: UNSIGNED_INT,\n  FLOAT: FLOAT\n};\n\n/**\n * Description of an attribute in a buffer\n * @typedef {Object} AttributeDescription\n * @property {string} name Attribute name to use in shaders\n * @property {number} size Number of components per attributes\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\n * Default is `FLOAT`.\n */\n\n/**\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|import(\"../transform\").Transform} UniformLiteralValue\n */\n\n/**\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\n * one of the previous types.\n * @typedef {UniformLiteralValue|function(import(\"../Map.js\").FrameState):UniformLiteralValue} UniformValue\n */\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\n * names in the provided or default shaders.\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n * @property {string} [canvasCacheKey] The cache key for the canvas.\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {string} name Name\n * @property {UniformValue} [value] Value\n * @property {UniformValue} [prevValue] The previous value.\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @typedef {Object} CanvasCacheItem\n * @property {WebGLRenderingContext} context The context of this canvas.\n * @property {number} users The count of users of this canvas.\n */\n\n/**\n * @type {Object<string,CanvasCacheItem>}\n */\nconst canvasCache = {};\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {string} The shared cache key.\n */\nfunction getSharedCanvasCacheKey(key) {\n  return 'shared/' + key;\n}\nlet uniqueCanvasCacheKeyCount = 0;\n\n/**\n * @return {string} The unique cache key.\n */\nfunction getUniqueCanvasCacheKey() {\n  const key = 'unique/' + uniqueCanvasCacheKeyCount;\n  uniqueCanvasCacheKeyCount += 1;\n  return key;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {WebGLRenderingContext} The canvas.\n */\nfunction getOrCreateContext(key) {\n  let cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    canvas.style.position = 'absolute';\n    canvas.style.left = '0';\n    const context = getContext(canvas);\n    cacheItem = {\n      users: 0,\n      context\n    };\n    canvasCache[key] = cacheItem;\n  }\n  cacheItem.users += 1;\n  return cacheItem.context;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n */\nfunction releaseCanvas(key) {\n  const cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    return;\n  }\n  cacheItem.users -= 1;\n  if (cacheItem.users > 0) {\n    return;\n  }\n  const gl = cacheItem.context;\n  const extension = gl.getExtension('WEBGL_lose_context');\n  if (extension) {\n    extension.loseContext();\n  }\n  const canvas = gl.canvas;\n  canvas.width = 1;\n  canvas.height = 1;\n  delete canvasCache[key];\n}\n\n/**\n * @classdesc\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\n * directly the WebGL API should not be required anymore.\n *\n * Several operations are handled by the `WebGLHelper` class:\n *\n * ### Define custom shaders and uniforms\n *\n *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\n *\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\n *   Outputs are:\n *\n *   * `gl_Position`: position of the vertex in screen space\n *\n *   * Varyings usually prefixed with `v_` are passed on to the fragment shader\n *\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\n *\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\n *   can be changed at every frame and can be of type float, arrays of float or images.\n *\n *   Shaders must be compiled and assembled into a program like so:\n *   ```js\n *   // here we simply create two shaders and assemble them in a program which is then used\n *   // for subsequent rendering calls; note how a frameState is required to set up a program,\n *   // as several default uniforms are computed from it (projection matrix, zoom level, etc.)\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\n *   helper.useProgram(this.program, frameState);\n *   ```\n *\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\n *   You can also change their value along the way like so:\n *   ```js\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\n *   ```\n *\n * ### Defining post processing passes\n *\n *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\n *   while applying special effects in screen space.\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\n *\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\n *   A post process step accepts the following options:\n *\n *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\n *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\n *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\n *\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\n *\n * ### Binding WebGL buffers and flushing data into them\n *\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\n *   This is done using {@link bindBuffer}.\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\n *\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\n *\n *   Examples below:\n *   ```js\n *   // at initialization phase\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *\n *   // when array values have changed\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *\n *   // at rendering phase\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *   ```\n *\n * ### Specifying attributes\n *\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\n *   Attributes are used to specify these uses. Specify the attribute names with\n *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes} (see code snippet below).\n *\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\n *   ```js\n *   // here we indicate that the data array has the following structure:\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\n *   helper.enableAttributes([\n *     {\n *        name: 'a_position',\n *        size: 2\n *     },\n *     {\n *       name: 'a_offset',\n *       size: 2\n *     },\n *     {\n *       name: 'a_texCoord',\n *       size: 2\n *     }\n *   ])\n *   ```\n *\n * ### Rendering primitives\n *\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\n *   ```js\n *   // frame preparation step\n *   helper.prepareDraw(frameState);\n *\n *   // call this for every data array that has to be rendered on screen\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\n *\n *   // finalize the rendering by applying post processes\n *   helper.finalizeDraw(frameState);\n *   ```\n *\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n */\nclass WebGLHelper extends Disposable {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n\n    /** @private */\n    this.boundHandleWebGLContextLost_ = this.handleWebGLContextLost.bind(this);\n\n    /** @private */\n    this.boundHandleWebGLContextRestored_ = this.handleWebGLContextRestored.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.canvasCacheKey_ = options.canvasCacheKey ? getSharedCanvasCacheKey(options.canvasCacheKey) : getUniqueCanvasCacheKey();\n\n    /**\n     * @private\n     * @type {WebGLRenderingContext}\n     */\n    this.gl_ = getOrCreateContext(this.canvasCacheKey_);\n\n    /**\n     * @private\n     * @type {!Object<string, BufferCacheEntry>}\n     */\n    this.bufferCache_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object>}\n     */\n    this.extensionCache_ = {};\n\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n    this.currentProgram_ = null;\n    const canvas = this.gl_.canvas;\n    canvas.addEventListener(ContextEventType.LOST, this.boundHandleWebGLContextLost_);\n    canvas.addEventListener(ContextEventType.RESTORED, this.boundHandleWebGLContextRestored_);\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetRotateMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetScaleMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.tmpMat4_ = create();\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, WebGLUniformLocation>>}\n     */\n    this.uniformLocationsByProgram_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.attribLocationsByProgram_ = {};\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass.\n     * If the uniform is a texture, the WebGL Texture object will be stored here.\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    if (options.uniforms) {\n      this.setUniforms(options.uniforms);\n    }\n\n    /**\n     * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\n     * options. If no post process was given, a default one is used (so as not to have to make an exception to\n     * the frame buffer logic).\n     * @type {Array<WebGLPostProcessingPass>}\n     * @private\n     */\n    this.postProcessPasses_ = options.postProcesses ? options.postProcesses.map(options => new WebGLPostProcessingPass({\n      webGlContext: this.gl_,\n      scaleRatio: options.scaleRatio,\n      vertexShader: options.vertexShader,\n      fragmentShader: options.fragmentShader,\n      uniforms: options.uniforms\n    })) : [new WebGLPostProcessingPass({\n      webGlContext: this.gl_\n    })];\n\n    /**\n     * @type {string|null}\n     * @private\n     */\n    this.shaderCompileErrors_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.startTime_ = Date.now();\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  setUniforms(uniforms) {\n    this.uniforms_ = [];\n    for (const name in uniforms) {\n      this.uniforms_.push({\n        name: name,\n        value: uniforms[name]\n      });\n    }\n  }\n\n  /**\n   * @param {string} canvasCacheKey The canvas cache key.\n   * @return {boolean} The provided key matches the one this helper was constructed with.\n   */\n  canvasCacheKeyMatches(canvasCacheKey) {\n    return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\n  }\n\n  /**\n   * Get a WebGL extension.  If the extension is not supported, null is returned.\n   * Extensions are cached after they are enabled for the first time.\n   * @param {string} name The extension name.\n   * @return {Object|null} The extension or null if not supported.\n   */\n  getExtension(name) {\n    if (name in this.extensionCache_) {\n      return this.extensionCache_[name];\n    }\n    const extension = this.gl_.getExtension(name);\n    this.extensionCache_[name] = extension;\n    return extension;\n  }\n\n  /**\n   * Just bind the buffer if it's in the cache. Otherwise create\n   * the WebGL buffer, bind it, populate it, and add an entry to\n   * the cache.\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  bindBuffer(buffer) {\n    const gl = this.gl_;\n    const bufferKey = getUid(buffer);\n    let bufferCache = this.bufferCache_[bufferKey];\n    if (!bufferCache) {\n      const webGlBuffer = gl.createBuffer();\n      bufferCache = {\n        buffer: buffer,\n        webGlBuffer: webGlBuffer\n      };\n      this.bufferCache_[bufferKey] = bufferCache;\n    }\n    gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\n  }\n\n  /**\n   * Update the data contained in the buffer array; this is required for the\n   * new data to be rendered\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  flushBufferData(buffer) {\n    const gl = this.gl_;\n    this.bindBuffer(buffer);\n    gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\n  }\n\n  /**\n   * @param {import(\"./Buffer.js\").default} buf Buffer.\n   */\n  deleteBuffer(buf) {\n    const gl = this.gl_;\n    const bufferKey = getUid(buf);\n    const bufferCacheEntry = this.bufferCache_[bufferKey];\n    if (bufferCacheEntry && !gl.isContextLost()) {\n      gl.deleteBuffer(bufferCacheEntry.webGlBuffer);\n    }\n    delete this.bufferCache_[bufferKey];\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    const canvas = this.gl_.canvas;\n    canvas.removeEventListener(ContextEventType.LOST, this.boundHandleWebGLContextLost_);\n    canvas.removeEventListener(ContextEventType.RESTORED, this.boundHandleWebGLContextRestored_);\n    releaseCanvas(this.canvasCacheKey_);\n    delete this.gl_;\n  }\n\n  /**\n   * Clear the buffer & set the viewport to draw.\n   * Post process passes will be initialized here, the first one being bound as a render target for\n   * subsequent draw calls.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDraw(frameState, disableAlphaBlend, enableDepth) {\n    const gl = this.gl_;\n    const canvas = this.getCanvas();\n    const size = frameState.size;\n    const pixelRatio = frameState.pixelRatio;\n    if (canvas.width !== size[0] * pixelRatio || canvas.height !== size[1] * pixelRatio) {\n      canvas.width = size[0] * pixelRatio;\n      canvas.height = size[1] * pixelRatio;\n      canvas.style.width = size[0] + 'px';\n      canvas.style.height = size[1] + 'px';\n    }\n\n    // loop backwards in post processes list\n    for (let i = this.postProcessPasses_.length - 1; i >= 0; i--) {\n      this.postProcessPasses_[i].init(frameState);\n    }\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * Prepare a program to use a texture.\n   * @param {WebGLTexture} texture The texture.\n   * @param {number} slot The texture slot.\n   * @param {string} uniformName The corresponding uniform name.\n   */\n  bindTexture(texture, slot, uniformName) {\n    const gl = this.gl_;\n    gl.activeTexture(gl.TEXTURE0 + slot);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.uniform1i(this.getUniformLocation(uniformName), slot);\n  }\n\n  /**\n   * Clear the render target & bind it for future draw operations.\n   * This is similar to `prepareDraw`, only post processes will not be applied.\n   * Note: the whole viewport will be drawn to the render target, regardless of its size.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDrawToRenderTarget(frameState, renderTarget, disableAlphaBlend, enableDepth) {\n    const gl = this.gl_;\n    const size = renderTarget.getSize();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderTarget.getDepthbuffer());\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * Execute a draw call based on the currently bound program, texture, buffers, attributes.\n   * @param {number} start Start index.\n   * @param {number} end End index.\n   */\n  drawElements(start, end) {\n    const gl = this.gl_;\n    this.getExtension('OES_element_index_uint');\n    const elementType = gl.UNSIGNED_INT;\n    const elementSize = 4;\n    const numItems = end - start;\n    const offsetInBytes = start * elementSize;\n    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\n  }\n\n  /**\n   * Apply the successive post process passes which will eventually render to the actual canvas.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  finalizeDraw(frameState, preCompose, postCompose) {\n    // apply post processes using the next one as target\n    for (let i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\n      if (i === ii - 1) {\n        this.postProcessPasses_[i].apply(frameState, null, preCompose, postCompose);\n      } else {\n        this.postProcessPasses_[i].apply(frameState, this.postProcessPasses_[i + 1]);\n      }\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getCanvas() {\n    return /** @type {HTMLCanvasElement} */this.gl_.canvas;\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyFrameState(frameState) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n    const offsetScaleMatrix = resetTransform(this.offsetScaleMatrix_);\n    scaleTransform(offsetScaleMatrix, 2 / size[0], 2 / size[1]);\n    const offsetRotateMatrix = resetTransform(this.offsetRotateMatrix_);\n    if (rotation !== 0) {\n      rotateTransform(offsetRotateMatrix, -rotation);\n    }\n    this.setUniformMatrixValue(DefaultUniform.OFFSET_SCALE_MATRIX, fromTransform(this.tmpMat4_, offsetScaleMatrix));\n    this.setUniformMatrixValue(DefaultUniform.OFFSET_ROTATION_MATRIX, fromTransform(this.tmpMat4_, offsetRotateMatrix));\n    this.setUniformFloatValue(DefaultUniform.TIME, (Date.now() - this.startTime_) * 0.001);\n    this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\n    this.setUniformFloatValue(DefaultUniform.RESOLUTION, frameState.viewState.resolution);\n    this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, pixelRatio);\n    this.setUniformFloatVec2(DefaultUniform.VIEWPORT_SIZE_PX, [size[0], size[1]]);\n  }\n\n  /**\n   * Sets the `u_hitDetection` uniform.\n   * @param {boolean} enabled Whether to enable the hit detection code path\n   */\n  applyHitDetectionUniform(enabled) {\n    const loc = this.getUniformLocation(DefaultUniform.HIT_DETECTION);\n    this.getGL().uniform1i(loc, enabled ? 1 : 0);\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyUniforms(frameState) {\n    const gl = this.gl_;\n    let value;\n    let textureSlot = 0;\n    this.uniforms_.forEach(uniform => {\n      value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof HTMLImageElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        const imageReady = !(value instanceof HTMLImageElement) || /** @type {HTMLImageElement} */value.complete;\n        if (imageReady && uniform.prevValue !== value) {\n          uniform.prevValue = value;\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n        }\n\n        // fill texture slots by increasing index\n        gl.uniform1i(this.getUniformLocation(uniform.name), textureSlot++);\n      } else if (Array.isArray(value) && value.length === 6) {\n        this.setUniformMatrixValue(uniform.name, fromTransform(this.tmpMat4_, value));\n      } else if (Array.isArray(value) && value.length <= 4) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(this.getUniformLocation(uniform.name), value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(this.getUniformLocation(uniform.name), value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(this.getUniformLocation(uniform.name), value[0], value[1], value[2], value[3]);\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(this.getUniformLocation(uniform.name), value);\n      }\n    });\n  }\n\n  /**\n   * Set up a program for use. The program will be set as the current one. Then, the uniforms used\n   * in the program will be set based on the current frame state and the helper configuration.\n   * @param {WebGLProgram} program Program.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  useProgram(program, frameState) {\n    const gl = this.gl_;\n    gl.useProgram(program);\n    this.currentProgram_ = program;\n    this.applyFrameState(frameState);\n    this.applyUniforms(frameState);\n  }\n\n  /**\n   * Will attempt to compile a vertex or fragment shader based on source\n   * On error, the shader will be returned but\n   * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\n   * Use `gl.getShaderInfoLog(shader)` to have details\n   * @param {string} source Shader source\n   * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\n   * @return {WebGLShader} Shader object\n   */\n  compileShader(source, type) {\n    const gl = this.gl_;\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    return shader;\n  }\n\n  /**\n   * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\n   * @param {string} fragmentShaderSource Fragment shader source.\n   * @param {string} vertexShaderSource Vertex shader source.\n   * @return {WebGLProgram} Program\n   */\n  getProgram(fragmentShaderSource, vertexShaderSource) {\n    const gl = this.gl_;\n    const fragmentShader = this.compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n    const vertexShader = this.compileShader(vertexShaderSource, gl.VERTEX_SHADER);\n    const program = gl.createProgram();\n    gl.attachShader(program, fragmentShader);\n    gl.attachShader(program, vertexShader);\n    gl.linkProgram(program);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      const message = `Fragment shader compilation failed: ${gl.getShaderInfoLog(fragmentShader)}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(fragmentShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      const message = `Vertex shader compilation failed: ${gl.getShaderInfoLog(vertexShader)}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(vertexShader);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      const message = `GL program linking failed: ${gl.getProgramInfoLog(program)}`;\n      throw new Error(message);\n    }\n    return program;\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Uniform name\n   * @return {WebGLUniformLocation} uniformLocation\n   */\n  getUniformLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.uniformLocationsByProgram_[programUid] === undefined) {\n      this.uniformLocationsByProgram_[programUid] = {};\n    }\n    if (this.uniformLocationsByProgram_[programUid][name] === undefined) {\n      this.uniformLocationsByProgram_[programUid][name] = this.gl_.getUniformLocation(this.currentProgram_, name);\n    }\n    return this.uniformLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Attribute name\n   * @return {number} attribLocation\n   */\n  getAttributeLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.attribLocationsByProgram_[programUid] === undefined) {\n      this.attribLocationsByProgram_[programUid] = {};\n    }\n    if (this.attribLocationsByProgram_[programUid][name] === undefined) {\n      this.attribLocationsByProgram_[programUid][name] = this.gl_.getAttribLocation(this.currentProgram_, name);\n    }\n    return this.attribLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Sets the given transform to apply the rotation/translation/scaling of the given frame state.\n   * The resulting transform can be used to convert world space coordinates to view coordinates in the [-1, 1] range.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../transform\").Transform} transform Transform to update.\n   * @return {import(\"../transform\").Transform} The updated transform object.\n   */\n  makeProjectionTransform(frameState, transform) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const resolution = frameState.viewState.resolution;\n    const center = frameState.viewState.center;\n    composeTransform(transform, 0, 0, 2 / (resolution * size[0]), 2 / (resolution * size[1]), -rotation, -center[0], -center[1]);\n    return transform;\n  }\n\n  /**\n   * Give a value for a standard float uniform\n   * @param {string} uniform Uniform name\n   * @param {number} value Value\n   */\n  setUniformFloatValue(uniform, value) {\n    this.gl_.uniform1f(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec2 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec2(uniform, value) {\n    this.gl_.uniform2fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec4(uniform, value) {\n    this.gl_.uniform4fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a standard matrix4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Matrix value\n   */\n  setUniformMatrixValue(uniform, value) {\n    this.gl_.uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\n  }\n\n  /**\n   * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\n   * internally.\n   * @param {string} attribName Attribute name\n   * @param {number} size Number of components per attributes\n   * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\n   * @param {number} stride Stride in bytes (0 means attribs are packed)\n   * @param {number} offset Offset in bytes\n   * @private\n   */\n  enableAttributeArray_(attribName, size, type, stride, offset) {\n    const location = this.getAttributeLocation(attribName);\n    // the attribute has not been found in the shaders or is not used; do not enable it\n    if (location < 0) {\n      return;\n    }\n    this.gl_.enableVertexAttribArray(location);\n    this.gl_.vertexAttribPointer(location, size, type, false, stride, offset);\n  }\n\n  /**\n   * Will enable the following attributes to be read from the currently bound buffer,\n   * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\n   * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\n   * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\n   */\n  enableAttributes(attributes) {\n    const stride = computeAttributesStride(attributes);\n    let offset = 0;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes[i];\n      this.enableAttributeArray_(attr.name, attr.size, attr.type || FLOAT, stride, offset);\n      offset += attr.size * getByteSizeFromType(attr.type);\n    }\n  }\n\n  /**\n   * WebGL context was lost\n   * @private\n   */\n  handleWebGLContextLost() {\n    clear(this.bufferCache_);\n    this.currentProgram_ = null;\n  }\n\n  /**\n   * WebGL context was restored\n   * @private\n   */\n  handleWebGLContextRestored() {}\n\n  /**\n   * Will create or reuse a given webgl texture and apply the given size. If no image data\n   * specified, the texture will be empty, otherwise image data will be used and the `size`\n   * parameter will be ignored.\n   * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\n   * @param {Array<number>} size Expected size of the texture\n   * @param {ImageData|HTMLImageElement|HTMLCanvasElement} [data] Image data/object to bind to the texture\n   * @param {WebGLTexture} [texture] Existing texture to reuse\n   * @return {WebGLTexture} The generated texture\n   */\n  createTexture(size, data, texture) {\n    const gl = this.gl_;\n    texture = texture || gl.createTexture();\n\n    // set params & size\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const border = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    if (data) {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, data);\n    } else {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, size[0], size[1], border, format, type, null);\n    }\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    return texture;\n  }\n}\n\n/**\n * Compute a stride in bytes based on a list of attributes\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\n */\nexport function computeAttributesStride(attributes) {\n  let stride = 0;\n  for (let i = 0; i < attributes.length; i++) {\n    const attr = attributes[i];\n    stride += attr.size * getByteSizeFromType(attr.type);\n  }\n  return stride;\n}\n\n/**\n * Computes the size in byte of an attribute type.\n * @param {AttributeType} type Attribute type\n * @return {number} The size in bytes\n */\nfunction getByteSizeFromType(type) {\n  switch (type) {\n    case AttributeType.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n    case AttributeType.FLOAT:\n    default:\n      return Float32Array.BYTES_PER_ELEMENT;\n  }\n}\nexport default WebGLHelper;","map":{"version":3,"names":["ContextEventType","Disposable","WebGLPostProcessingPass","FLOAT","UNSIGNED_BYTE","UNSIGNED_INT","UNSIGNED_SHORT","getContext","clear","compose","composeTransform","create","createTransform","reset","resetTransform","rotate","rotateTransform","scale","scaleTransform","fromTransform","getUid","ShaderType","FRAGMENT_SHADER","VERTEX_SHADER","DefaultUniform","PROJECTION_MATRIX","OFFSET_SCALE_MATRIX","OFFSET_ROTATION_MATRIX","TIME","ZOOM","RESOLUTION","VIEWPORT_SIZE_PX","PIXEL_RATIO","HIT_DETECTION","AttributeType","canvasCache","getSharedCanvasCacheKey","key","uniqueCanvasCacheKeyCount","getUniqueCanvasCacheKey","getOrCreateContext","cacheItem","canvas","document","createElement","width","height","style","position","left","context","users","releaseCanvas","gl","extension","getExtension","loseContext","WebGLHelper","constructor","options","boundHandleWebGLContextLost_","handleWebGLContextLost","bind","boundHandleWebGLContextRestored_","handleWebGLContextRestored","canvasCacheKey_","canvasCacheKey","gl_","bufferCache_","extensionCache_","currentProgram_","addEventListener","LOST","RESTORED","offsetRotateMatrix_","offsetScaleMatrix_","tmpMat4_","uniformLocationsByProgram_","attribLocationsByProgram_","uniforms_","uniforms","setUniforms","postProcessPasses_","postProcesses","map","webGlContext","scaleRatio","vertexShader","fragmentShader","shaderCompileErrors_","startTime_","Date","now","name","push","value","canvasCacheKeyMatches","bindBuffer","buffer","bufferKey","bufferCache","webGlBuffer","createBuffer","getType","flushBufferData","bufferData","getArray","getUsage","deleteBuffer","buf","bufferCacheEntry","isContextLost","disposeInternal","removeEventListener","prepareDraw","frameState","disableAlphaBlend","enableDepth","getCanvas","size","pixelRatio","i","length","init","bindTexture","TEXTURE_2D","clearColor","depthRange","clearDepth","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","BLEND","blendFunc","ONE","ZERO","ONE_MINUS_SRC_ALPHA","DEPTH_TEST","depthFunc","LEQUAL","disable","texture","slot","uniformName","activeTexture","TEXTURE0","uniform1i","getUniformLocation","prepareDrawToRenderTarget","renderTarget","getSize","bindFramebuffer","FRAMEBUFFER","getFramebuffer","bindRenderbuffer","RENDERBUFFER","getDepthbuffer","viewport","getTexture","drawElements","start","end","elementType","elementSize","numItems","offsetInBytes","TRIANGLES","finalizeDraw","preCompose","postCompose","ii","apply","getGL","applyFrameState","rotation","viewState","offsetScaleMatrix","offsetRotateMatrix","setUniformMatrixValue","setUniformFloatValue","zoom","resolution","setUniformFloatVec2","applyHitDetectionUniform","enabled","loc","applyUniforms","textureSlot","forEach","uniform","HTMLCanvasElement","HTMLImageElement","ImageData","prevValue","undefined","createTexture","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","imageReady","complete","texImage2D","RGBA","Array","isArray","uniform2f","uniform3f","uniform4f","uniform1f","useProgram","program","compileShader","source","type","shader","createShader","shaderSource","getProgram","fragmentShaderSource","vertexShaderSource","createProgram","attachShader","linkProgram","getShaderParameter","COMPILE_STATUS","message","getShaderInfoLog","Error","deleteShader","getProgramParameter","LINK_STATUS","getProgramInfoLog","programUid","getAttributeLocation","getAttribLocation","makeProjectionTransform","transform","center","uniform2fv","setUniformFloatVec4","uniform4fv","uniformMatrix4fv","enableAttributeArray_","attribName","stride","offset","location","enableVertexAttribArray","vertexAttribPointer","enableAttributes","attributes","computeAttributesStride","attr","getByteSizeFromType","data","level","internalFormat","border","format","Uint8Array","BYTES_PER_ELEMENT","Uint16Array","Uint32Array","Float32Array"],"sources":["/Users/yantinglong/Documents/project/frogather/node_modules/ol/webgl/Helper.js"],"sourcesContent":["/**\n * @module ol/webgl/Helper\n */\nimport ContextEventType from '../webgl/ContextEventType.js';\nimport Disposable from '../Disposable.js';\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\nimport {\n  FLOAT,\n  UNSIGNED_BYTE,\n  UNSIGNED_INT,\n  UNSIGNED_SHORT,\n  getContext,\n} from '../webgl.js';\nimport {clear} from '../obj.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n  reset as resetTransform,\n  rotate as rotateTransform,\n  scale as scaleTransform,\n} from '../transform.js';\nimport {create, fromTransform} from '../vec/mat4.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} BufferCacheEntry\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\n */\n\n/**\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\n * @enum {number}\n */\nexport const ShaderType = {\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31,\n};\n\n/**\n * Names of uniforms made available to all shaders.\n * Please note: changing these *will* break custom shaders!\n * @enum {string}\n */\nexport const DefaultUniform = {\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  OFFSET_SCALE_MATRIX: 'u_offsetScaleMatrix',\n  OFFSET_ROTATION_MATRIX: 'u_offsetRotateMatrix',\n  TIME: 'u_time',\n  ZOOM: 'u_zoom',\n  RESOLUTION: 'u_resolution',\n  VIEWPORT_SIZE_PX: 'u_viewportSizePx',\n  PIXEL_RATIO: 'u_pixelRatio',\n  HIT_DETECTION: 'u_hitDetection',\n};\n\n/**\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\n * @enum {number}\n */\nexport const AttributeType = {\n  UNSIGNED_BYTE: UNSIGNED_BYTE,\n  UNSIGNED_SHORT: UNSIGNED_SHORT,\n  UNSIGNED_INT: UNSIGNED_INT,\n  FLOAT: FLOAT,\n};\n\n/**\n * Description of an attribute in a buffer\n * @typedef {Object} AttributeDescription\n * @property {string} name Attribute name to use in shaders\n * @property {number} size Number of components per attributes\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\n * Default is `FLOAT`.\n */\n\n/**\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|import(\"../transform\").Transform} UniformLiteralValue\n */\n\n/**\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\n * one of the previous types.\n * @typedef {UniformLiteralValue|function(import(\"../Map.js\").FrameState):UniformLiteralValue} UniformValue\n */\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\n * names in the provided or default shaders.\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n * @property {string} [canvasCacheKey] The cache key for the canvas.\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {string} name Name\n * @property {UniformValue} [value] Value\n * @property {UniformValue} [prevValue] The previous value.\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @typedef {Object} CanvasCacheItem\n * @property {WebGLRenderingContext} context The context of this canvas.\n * @property {number} users The count of users of this canvas.\n */\n\n/**\n * @type {Object<string,CanvasCacheItem>}\n */\nconst canvasCache = {};\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {string} The shared cache key.\n */\nfunction getSharedCanvasCacheKey(key) {\n  return 'shared/' + key;\n}\n\nlet uniqueCanvasCacheKeyCount = 0;\n\n/**\n * @return {string} The unique cache key.\n */\nfunction getUniqueCanvasCacheKey() {\n  const key = 'unique/' + uniqueCanvasCacheKeyCount;\n  uniqueCanvasCacheKeyCount += 1;\n  return key;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {WebGLRenderingContext} The canvas.\n */\nfunction getOrCreateContext(key) {\n  let cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    canvas.style.position = 'absolute';\n    canvas.style.left = '0';\n    const context = getContext(canvas);\n    cacheItem = {users: 0, context};\n    canvasCache[key] = cacheItem;\n  }\n\n  cacheItem.users += 1;\n  return cacheItem.context;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n */\nfunction releaseCanvas(key) {\n  const cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    return;\n  }\n\n  cacheItem.users -= 1;\n  if (cacheItem.users > 0) {\n    return;\n  }\n\n  const gl = cacheItem.context;\n  const extension = gl.getExtension('WEBGL_lose_context');\n  if (extension) {\n    extension.loseContext();\n  }\n  const canvas = gl.canvas;\n  canvas.width = 1;\n  canvas.height = 1;\n\n  delete canvasCache[key];\n}\n\n/**\n * @classdesc\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\n * directly the WebGL API should not be required anymore.\n *\n * Several operations are handled by the `WebGLHelper` class:\n *\n * ### Define custom shaders and uniforms\n *\n *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\n *\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\n *   Outputs are:\n *\n *   * `gl_Position`: position of the vertex in screen space\n *\n *   * Varyings usually prefixed with `v_` are passed on to the fragment shader\n *\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\n *\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\n *   can be changed at every frame and can be of type float, arrays of float or images.\n *\n *   Shaders must be compiled and assembled into a program like so:\n *   ```js\n *   // here we simply create two shaders and assemble them in a program which is then used\n *   // for subsequent rendering calls; note how a frameState is required to set up a program,\n *   // as several default uniforms are computed from it (projection matrix, zoom level, etc.)\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\n *   helper.useProgram(this.program, frameState);\n *   ```\n *\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\n *   You can also change their value along the way like so:\n *   ```js\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\n *   ```\n *\n * ### Defining post processing passes\n *\n *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\n *   while applying special effects in screen space.\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\n *\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\n *   A post process step accepts the following options:\n *\n *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\n *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\n *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\n *\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\n *\n * ### Binding WebGL buffers and flushing data into them\n *\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\n *   This is done using {@link bindBuffer}.\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\n *\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\n *\n *   Examples below:\n *   ```js\n *   // at initialization phase\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *\n *   // when array values have changed\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *\n *   // at rendering phase\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *   ```\n *\n * ### Specifying attributes\n *\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\n *   Attributes are used to specify these uses. Specify the attribute names with\n *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes} (see code snippet below).\n *\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\n *   ```js\n *   // here we indicate that the data array has the following structure:\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\n *   helper.enableAttributes([\n *     {\n *        name: 'a_position',\n *        size: 2\n *     },\n *     {\n *       name: 'a_offset',\n *       size: 2\n *     },\n *     {\n *       name: 'a_texCoord',\n *       size: 2\n *     }\n *   ])\n *   ```\n *\n * ### Rendering primitives\n *\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\n *   ```js\n *   // frame preparation step\n *   helper.prepareDraw(frameState);\n *\n *   // call this for every data array that has to be rendered on screen\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\n *\n *   // finalize the rendering by applying post processes\n *   helper.finalizeDraw(frameState);\n *   ```\n *\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n */\nclass WebGLHelper extends Disposable {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n\n    /** @private */\n    this.boundHandleWebGLContextLost_ = this.handleWebGLContextLost.bind(this);\n\n    /** @private */\n    this.boundHandleWebGLContextRestored_ =\n      this.handleWebGLContextRestored.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.canvasCacheKey_ = options.canvasCacheKey\n      ? getSharedCanvasCacheKey(options.canvasCacheKey)\n      : getUniqueCanvasCacheKey();\n\n    /**\n     * @private\n     * @type {WebGLRenderingContext}\n     */\n    this.gl_ = getOrCreateContext(this.canvasCacheKey_);\n\n    /**\n     * @private\n     * @type {!Object<string, BufferCacheEntry>}\n     */\n    this.bufferCache_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object>}\n     */\n    this.extensionCache_ = {};\n\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n    this.currentProgram_ = null;\n\n    const canvas = this.gl_.canvas;\n\n    canvas.addEventListener(\n      ContextEventType.LOST,\n      this.boundHandleWebGLContextLost_\n    );\n    canvas.addEventListener(\n      ContextEventType.RESTORED,\n      this.boundHandleWebGLContextRestored_\n    );\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetRotateMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetScaleMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.tmpMat4_ = create();\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, WebGLUniformLocation>>}\n     */\n    this.uniformLocationsByProgram_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.attribLocationsByProgram_ = {};\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass.\n     * If the uniform is a texture, the WebGL Texture object will be stored here.\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    if (options.uniforms) {\n      this.setUniforms(options.uniforms);\n    }\n\n    /**\n     * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\n     * options. If no post process was given, a default one is used (so as not to have to make an exception to\n     * the frame buffer logic).\n     * @type {Array<WebGLPostProcessingPass>}\n     * @private\n     */\n    this.postProcessPasses_ = options.postProcesses\n      ? options.postProcesses.map(\n          (options) =>\n            new WebGLPostProcessingPass({\n              webGlContext: this.gl_,\n              scaleRatio: options.scaleRatio,\n              vertexShader: options.vertexShader,\n              fragmentShader: options.fragmentShader,\n              uniforms: options.uniforms,\n            })\n        )\n      : [new WebGLPostProcessingPass({webGlContext: this.gl_})];\n\n    /**\n     * @type {string|null}\n     * @private\n     */\n    this.shaderCompileErrors_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.startTime_ = Date.now();\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  setUniforms(uniforms) {\n    this.uniforms_ = [];\n    for (const name in uniforms) {\n      this.uniforms_.push({\n        name: name,\n        value: uniforms[name],\n      });\n    }\n  }\n\n  /**\n   * @param {string} canvasCacheKey The canvas cache key.\n   * @return {boolean} The provided key matches the one this helper was constructed with.\n   */\n  canvasCacheKeyMatches(canvasCacheKey) {\n    return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\n  }\n\n  /**\n   * Get a WebGL extension.  If the extension is not supported, null is returned.\n   * Extensions are cached after they are enabled for the first time.\n   * @param {string} name The extension name.\n   * @return {Object|null} The extension or null if not supported.\n   */\n  getExtension(name) {\n    if (name in this.extensionCache_) {\n      return this.extensionCache_[name];\n    }\n    const extension = this.gl_.getExtension(name);\n    this.extensionCache_[name] = extension;\n    return extension;\n  }\n\n  /**\n   * Just bind the buffer if it's in the cache. Otherwise create\n   * the WebGL buffer, bind it, populate it, and add an entry to\n   * the cache.\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  bindBuffer(buffer) {\n    const gl = this.gl_;\n    const bufferKey = getUid(buffer);\n    let bufferCache = this.bufferCache_[bufferKey];\n    if (!bufferCache) {\n      const webGlBuffer = gl.createBuffer();\n      bufferCache = {\n        buffer: buffer,\n        webGlBuffer: webGlBuffer,\n      };\n      this.bufferCache_[bufferKey] = bufferCache;\n    }\n    gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\n  }\n\n  /**\n   * Update the data contained in the buffer array; this is required for the\n   * new data to be rendered\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  flushBufferData(buffer) {\n    const gl = this.gl_;\n    this.bindBuffer(buffer);\n    gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\n  }\n\n  /**\n   * @param {import(\"./Buffer.js\").default} buf Buffer.\n   */\n  deleteBuffer(buf) {\n    const gl = this.gl_;\n    const bufferKey = getUid(buf);\n    const bufferCacheEntry = this.bufferCache_[bufferKey];\n    if (bufferCacheEntry && !gl.isContextLost()) {\n      gl.deleteBuffer(bufferCacheEntry.webGlBuffer);\n    }\n    delete this.bufferCache_[bufferKey];\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    const canvas = this.gl_.canvas;\n    canvas.removeEventListener(\n      ContextEventType.LOST,\n      this.boundHandleWebGLContextLost_\n    );\n    canvas.removeEventListener(\n      ContextEventType.RESTORED,\n      this.boundHandleWebGLContextRestored_\n    );\n\n    releaseCanvas(this.canvasCacheKey_);\n\n    delete this.gl_;\n  }\n\n  /**\n   * Clear the buffer & set the viewport to draw.\n   * Post process passes will be initialized here, the first one being bound as a render target for\n   * subsequent draw calls.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDraw(frameState, disableAlphaBlend, enableDepth) {\n    const gl = this.gl_;\n    const canvas = this.getCanvas();\n    const size = frameState.size;\n    const pixelRatio = frameState.pixelRatio;\n\n    if (\n      canvas.width !== size[0] * pixelRatio ||\n      canvas.height !== size[1] * pixelRatio\n    ) {\n      canvas.width = size[0] * pixelRatio;\n      canvas.height = size[1] * pixelRatio;\n      canvas.style.width = size[0] + 'px';\n      canvas.style.height = size[1] + 'px';\n    }\n\n    // loop backwards in post processes list\n    for (let i = this.postProcessPasses_.length - 1; i >= 0; i--) {\n      this.postProcessPasses_[i].init(frameState);\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * Prepare a program to use a texture.\n   * @param {WebGLTexture} texture The texture.\n   * @param {number} slot The texture slot.\n   * @param {string} uniformName The corresponding uniform name.\n   */\n  bindTexture(texture, slot, uniformName) {\n    const gl = this.gl_;\n    gl.activeTexture(gl.TEXTURE0 + slot);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.uniform1i(this.getUniformLocation(uniformName), slot);\n  }\n\n  /**\n   * Clear the render target & bind it for future draw operations.\n   * This is similar to `prepareDraw`, only post processes will not be applied.\n   * Note: the whole viewport will be drawn to the render target, regardless of its size.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDrawToRenderTarget(\n    frameState,\n    renderTarget,\n    disableAlphaBlend,\n    enableDepth\n  ) {\n    const gl = this.gl_;\n    const size = renderTarget.getSize();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderTarget.getDepthbuffer());\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * Execute a draw call based on the currently bound program, texture, buffers, attributes.\n   * @param {number} start Start index.\n   * @param {number} end End index.\n   */\n  drawElements(start, end) {\n    const gl = this.gl_;\n    this.getExtension('OES_element_index_uint');\n\n    const elementType = gl.UNSIGNED_INT;\n    const elementSize = 4;\n\n    const numItems = end - start;\n    const offsetInBytes = start * elementSize;\n    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\n  }\n\n  /**\n   * Apply the successive post process passes which will eventually render to the actual canvas.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  finalizeDraw(frameState, preCompose, postCompose) {\n    // apply post processes using the next one as target\n    for (let i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\n      if (i === ii - 1) {\n        this.postProcessPasses_[i].apply(\n          frameState,\n          null,\n          preCompose,\n          postCompose\n        );\n      } else {\n        this.postProcessPasses_[i].apply(\n          frameState,\n          this.postProcessPasses_[i + 1]\n        );\n      }\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getCanvas() {\n    return /** @type {HTMLCanvasElement} */ (this.gl_.canvas);\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyFrameState(frameState) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n\n    const offsetScaleMatrix = resetTransform(this.offsetScaleMatrix_);\n    scaleTransform(offsetScaleMatrix, 2 / size[0], 2 / size[1]);\n\n    const offsetRotateMatrix = resetTransform(this.offsetRotateMatrix_);\n    if (rotation !== 0) {\n      rotateTransform(offsetRotateMatrix, -rotation);\n    }\n\n    this.setUniformMatrixValue(\n      DefaultUniform.OFFSET_SCALE_MATRIX,\n      fromTransform(this.tmpMat4_, offsetScaleMatrix)\n    );\n    this.setUniformMatrixValue(\n      DefaultUniform.OFFSET_ROTATION_MATRIX,\n      fromTransform(this.tmpMat4_, offsetRotateMatrix)\n    );\n\n    this.setUniformFloatValue(\n      DefaultUniform.TIME,\n      (Date.now() - this.startTime_) * 0.001\n    );\n    this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\n    this.setUniformFloatValue(\n      DefaultUniform.RESOLUTION,\n      frameState.viewState.resolution\n    );\n    this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, pixelRatio);\n    this.setUniformFloatVec2(DefaultUniform.VIEWPORT_SIZE_PX, [\n      size[0],\n      size[1],\n    ]);\n  }\n\n  /**\n   * Sets the `u_hitDetection` uniform.\n   * @param {boolean} enabled Whether to enable the hit detection code path\n   */\n  applyHitDetectionUniform(enabled) {\n    const loc = this.getUniformLocation(DefaultUniform.HIT_DETECTION);\n    this.getGL().uniform1i(loc, enabled ? 1 : 0);\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyUniforms(frameState) {\n    const gl = this.gl_;\n\n    let value;\n    let textureSlot = 0;\n    this.uniforms_.forEach((uniform) => {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (\n        value instanceof HTMLCanvasElement ||\n        value instanceof HTMLImageElement ||\n        value instanceof ImageData\n      ) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        const imageReady =\n          !(value instanceof HTMLImageElement) ||\n          /** @type {HTMLImageElement} */ (value).complete;\n        if (imageReady && uniform.prevValue !== value) {\n          uniform.prevValue = value;\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value\n          );\n        }\n\n        // fill texture slots by increasing index\n        gl.uniform1i(this.getUniformLocation(uniform.name), textureSlot++);\n      } else if (Array.isArray(value) && value.length === 6) {\n        this.setUniformMatrixValue(\n          uniform.name,\n          fromTransform(this.tmpMat4_, value)\n        );\n      } else if (Array.isArray(value) && value.length <= 4) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1]\n            );\n            return;\n          case 3:\n            gl.uniform3f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n              value[2]\n            );\n            return;\n          case 4:\n            gl.uniform4f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n              value[2],\n              value[3]\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(this.getUniformLocation(uniform.name), value);\n      }\n    });\n  }\n\n  /**\n   * Set up a program for use. The program will be set as the current one. Then, the uniforms used\n   * in the program will be set based on the current frame state and the helper configuration.\n   * @param {WebGLProgram} program Program.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  useProgram(program, frameState) {\n    const gl = this.gl_;\n    gl.useProgram(program);\n    this.currentProgram_ = program;\n    this.applyFrameState(frameState);\n    this.applyUniforms(frameState);\n  }\n\n  /**\n   * Will attempt to compile a vertex or fragment shader based on source\n   * On error, the shader will be returned but\n   * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\n   * Use `gl.getShaderInfoLog(shader)` to have details\n   * @param {string} source Shader source\n   * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\n   * @return {WebGLShader} Shader object\n   */\n  compileShader(source, type) {\n    const gl = this.gl_;\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    return shader;\n  }\n\n  /**\n   * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\n   * @param {string} fragmentShaderSource Fragment shader source.\n   * @param {string} vertexShaderSource Vertex shader source.\n   * @return {WebGLProgram} Program\n   */\n  getProgram(fragmentShaderSource, vertexShaderSource) {\n    const gl = this.gl_;\n\n    const fragmentShader = this.compileShader(\n      fragmentShaderSource,\n      gl.FRAGMENT_SHADER\n    );\n\n    const vertexShader = this.compileShader(\n      vertexShaderSource,\n      gl.VERTEX_SHADER\n    );\n\n    const program = gl.createProgram();\n    gl.attachShader(program, fragmentShader);\n    gl.attachShader(program, vertexShader);\n    gl.linkProgram(program);\n\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      const message = `Fragment shader compilation failed: ${gl.getShaderInfoLog(\n        fragmentShader\n      )}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(fragmentShader);\n\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      const message = `Vertex shader compilation failed: ${gl.getShaderInfoLog(\n        vertexShader\n      )}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(vertexShader);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      const message = `GL program linking failed: ${gl.getProgramInfoLog(\n        program\n      )}`;\n      throw new Error(message);\n    }\n\n    return program;\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Uniform name\n   * @return {WebGLUniformLocation} uniformLocation\n   */\n  getUniformLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.uniformLocationsByProgram_[programUid] === undefined) {\n      this.uniformLocationsByProgram_[programUid] = {};\n    }\n    if (this.uniformLocationsByProgram_[programUid][name] === undefined) {\n      this.uniformLocationsByProgram_[programUid][name] =\n        this.gl_.getUniformLocation(this.currentProgram_, name);\n    }\n    return this.uniformLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Attribute name\n   * @return {number} attribLocation\n   */\n  getAttributeLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.attribLocationsByProgram_[programUid] === undefined) {\n      this.attribLocationsByProgram_[programUid] = {};\n    }\n    if (this.attribLocationsByProgram_[programUid][name] === undefined) {\n      this.attribLocationsByProgram_[programUid][name] =\n        this.gl_.getAttribLocation(this.currentProgram_, name);\n    }\n    return this.attribLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Sets the given transform to apply the rotation/translation/scaling of the given frame state.\n   * The resulting transform can be used to convert world space coordinates to view coordinates in the [-1, 1] range.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../transform\").Transform} transform Transform to update.\n   * @return {import(\"../transform\").Transform} The updated transform object.\n   */\n  makeProjectionTransform(frameState, transform) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const resolution = frameState.viewState.resolution;\n    const center = frameState.viewState.center;\n    composeTransform(\n      transform,\n      0,\n      0,\n      2 / (resolution * size[0]),\n      2 / (resolution * size[1]),\n      -rotation,\n      -center[0],\n      -center[1]\n    );\n    return transform;\n  }\n\n  /**\n   * Give a value for a standard float uniform\n   * @param {string} uniform Uniform name\n   * @param {number} value Value\n   */\n  setUniformFloatValue(uniform, value) {\n    this.gl_.uniform1f(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec2 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec2(uniform, value) {\n    this.gl_.uniform2fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec4(uniform, value) {\n    this.gl_.uniform4fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a standard matrix4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Matrix value\n   */\n  setUniformMatrixValue(uniform, value) {\n    this.gl_.uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\n  }\n\n  /**\n   * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\n   * internally.\n   * @param {string} attribName Attribute name\n   * @param {number} size Number of components per attributes\n   * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\n   * @param {number} stride Stride in bytes (0 means attribs are packed)\n   * @param {number} offset Offset in bytes\n   * @private\n   */\n  enableAttributeArray_(attribName, size, type, stride, offset) {\n    const location = this.getAttributeLocation(attribName);\n    // the attribute has not been found in the shaders or is not used; do not enable it\n    if (location < 0) {\n      return;\n    }\n    this.gl_.enableVertexAttribArray(location);\n    this.gl_.vertexAttribPointer(location, size, type, false, stride, offset);\n  }\n\n  /**\n   * Will enable the following attributes to be read from the currently bound buffer,\n   * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\n   * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\n   * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\n   */\n  enableAttributes(attributes) {\n    const stride = computeAttributesStride(attributes);\n    let offset = 0;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes[i];\n      this.enableAttributeArray_(\n        attr.name,\n        attr.size,\n        attr.type || FLOAT,\n        stride,\n        offset\n      );\n      offset += attr.size * getByteSizeFromType(attr.type);\n    }\n  }\n\n  /**\n   * WebGL context was lost\n   * @private\n   */\n  handleWebGLContextLost() {\n    clear(this.bufferCache_);\n    this.currentProgram_ = null;\n  }\n\n  /**\n   * WebGL context was restored\n   * @private\n   */\n  handleWebGLContextRestored() {}\n\n  /**\n   * Will create or reuse a given webgl texture and apply the given size. If no image data\n   * specified, the texture will be empty, otherwise image data will be used and the `size`\n   * parameter will be ignored.\n   * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\n   * @param {Array<number>} size Expected size of the texture\n   * @param {ImageData|HTMLImageElement|HTMLCanvasElement} [data] Image data/object to bind to the texture\n   * @param {WebGLTexture} [texture] Existing texture to reuse\n   * @return {WebGLTexture} The generated texture\n   */\n  createTexture(size, data, texture) {\n    const gl = this.gl_;\n    texture = texture || gl.createTexture();\n\n    // set params & size\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const border = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    if (data) {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, data);\n    } else {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        size[0],\n        size[1],\n        border,\n        format,\n        type,\n        null\n      );\n    }\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    return texture;\n  }\n}\n\n/**\n * Compute a stride in bytes based on a list of attributes\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\n */\nexport function computeAttributesStride(attributes) {\n  let stride = 0;\n  for (let i = 0; i < attributes.length; i++) {\n    const attr = attributes[i];\n    stride += attr.size * getByteSizeFromType(attr.type);\n  }\n  return stride;\n}\n\n/**\n * Computes the size in byte of an attribute type.\n * @param {AttributeType} type Attribute type\n * @return {number} The size in bytes\n */\nfunction getByteSizeFromType(type) {\n  switch (type) {\n    case AttributeType.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n    case AttributeType.FLOAT:\n    default:\n      return Float32Array.BYTES_PER_ELEMENT;\n  }\n}\n\nexport default WebGLHelper;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,gBAAgB,MAAM,8BAA8B;AAC3D,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAOC,uBAAuB,MAAM,yBAAyB;AAC7D,SACEC,KAAK,EACLC,aAAa,EACbC,YAAY,EACZC,cAAc,EACdC,UAAU,QACL,aAAa;AACpB,SAAQC,KAAK,QAAO,WAAW;AAC/B,SACEC,OAAO,IAAIC,gBAAgB,EAC3BC,MAAM,IAAIC,eAAe,EACzBC,KAAK,IAAIC,cAAc,EACvBC,MAAM,IAAIC,eAAe,EACzBC,KAAK,IAAIC,cAAc,QAClB,iBAAiB;AACxB,SAAQP,MAAM,EAAEQ,aAAa,QAAO,gBAAgB;AACpD,SAAQC,MAAM,QAAO,YAAY;;AAEjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG;EACxBC,eAAe,EAAE,MAAM;EACvBC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG;EAC5BC,iBAAiB,EAAE,oBAAoB;EACvCC,mBAAmB,EAAE,qBAAqB;EAC1CC,sBAAsB,EAAE,sBAAsB;EAC9CC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,cAAc;EAC1BC,gBAAgB,EAAE,kBAAkB;EACpCC,WAAW,EAAE,cAAc;EAC3BC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3B9B,aAAa,EAAEA,aAAa;EAC5BE,cAAc,EAAEA,cAAc;EAC9BD,YAAY,EAAEA,YAAY;EAC1BF,KAAK,EAAEA;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMgC,WAAW,GAAG,CAAC,CAAC;;AAEtB;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAACC,GAAG,EAAE;EACpC,OAAO,SAAS,GAAGA,GAAG;AACxB;AAEA,IAAIC,yBAAyB,GAAG,CAAC;;AAEjC;AACA;AACA;AACA,SAASC,uBAAuBA,CAAA,EAAG;EACjC,MAAMF,GAAG,GAAG,SAAS,GAAGC,yBAAyB;EACjDA,yBAAyB,IAAI,CAAC;EAC9B,OAAOD,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA,SAASG,kBAAkBA,CAACH,GAAG,EAAE;EAC/B,IAAII,SAAS,GAAGN,WAAW,CAACE,GAAG,CAAC;EAChC,IAAI,CAACI,SAAS,EAAE;IACd,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC/CF,MAAM,CAACG,KAAK,GAAG,CAAC;IAChBH,MAAM,CAACI,MAAM,GAAG,CAAC;IACjBJ,MAAM,CAACK,KAAK,CAACC,QAAQ,GAAG,UAAU;IAClCN,MAAM,CAACK,KAAK,CAACE,IAAI,GAAG,GAAG;IACvB,MAAMC,OAAO,GAAG3C,UAAU,CAACmC,MAAM,CAAC;IAClCD,SAAS,GAAG;MAACU,KAAK,EAAE,CAAC;MAAED;IAAO,CAAC;IAC/Bf,WAAW,CAACE,GAAG,CAAC,GAAGI,SAAS;EAC9B;EAEAA,SAAS,CAACU,KAAK,IAAI,CAAC;EACpB,OAAOV,SAAS,CAACS,OAAO;AAC1B;;AAEA;AACA;AACA;AACA,SAASE,aAAaA,CAACf,GAAG,EAAE;EAC1B,MAAMI,SAAS,GAAGN,WAAW,CAACE,GAAG,CAAC;EAClC,IAAI,CAACI,SAAS,EAAE;IACd;EACF;EAEAA,SAAS,CAACU,KAAK,IAAI,CAAC;EACpB,IAAIV,SAAS,CAACU,KAAK,GAAG,CAAC,EAAE;IACvB;EACF;EAEA,MAAME,EAAE,GAAGZ,SAAS,CAACS,OAAO;EAC5B,MAAMI,SAAS,GAAGD,EAAE,CAACE,YAAY,CAAC,oBAAoB,CAAC;EACvD,IAAID,SAAS,EAAE;IACbA,SAAS,CAACE,WAAW,CAAC,CAAC;EACzB;EACA,MAAMd,MAAM,GAAGW,EAAE,CAACX,MAAM;EACxBA,MAAM,CAACG,KAAK,GAAG,CAAC;EAChBH,MAAM,CAACI,MAAM,GAAG,CAAC;EAEjB,OAAOX,WAAW,CAACE,GAAG,CAAC;AACzoB,WAAW,SAASxD,UAAU,CAAC;EACnC;AACF;AACA;EACEyD,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC,CAAC;IACPA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;;IAEvB;IACA,IAAI,CAACC,4BAA4B,GAAG,IAAI,CAACC,sBAAsB,CAACC,IAAI,CAAC,IAAI,CAAC;;IAE1E;IACA,IAAI,CAACC,gCAAgC,GACnC,IAAI,CAACC,0BAA0B,CAACF,IAAI,CAAC,IAAI,CAAC;;IAE5C;AACJ;AACA;AACA;IACI,IAAI,CAACG,eAAe,GAAGN,OAAO,CAACO,cAAc,GACzC9B,uBAAuB,CAACuB,OAAO,CAACO,cAAc,CAAC,GAC/C3B,uBAAuB,CAAC,CAAC;;IAE7B;AACJ;AACA;AACA;IACI,IAAI,CAAC4B,GAAG,GAAG3B,kBAAkB,CAAC,IAAI,CAACyB,eAAe,CAAC;;IAEnD;AACJ;AACA;AACA;IACI,IAAI,CAACG,YAAY,GAAG,CAAC,CAAC;;IAEtB;AACJ;AACA;AACA;IACI,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC;;IAEzB;AACJ;AACA;AACA;IACI,IAAI,CAACC,eAAe,GAAG,IAAI;IAE3B,MAAM5B,MAAM,GAAG,IAAI,CAACyB,GAAG,CAACzB,MAAM;IAE9BA,MAAM,CAAC6B,gBAAgB,CACrBvE,gBAAgB,CAACwE,IAAI,EACrB,IAAI,CAACZ,4BACP,CAAC;IACDlB,MAAM,CAAC6B,gBAAgB,CACrBvE,gBAAgB,CAACyE,QAAQ,EACzB,IAAI,CAACV,gCACP,CAAC;;IAED;AACJ;AACA;AACA;IACI,IAAI,CAACW,mBAAmB,GAAG9D,eAAe,CAAC,CAAC;;IAE5C;AACJ;AACA;AACA;IACI,IAAI,CAAC+D,kBAAkB,GAAG/D,eAAe,CAAC,CAAC;;IAE3C;AACJ;AACA;AACA;IACI,IAAI,CAACgE,QAAQ,GAAGjE,MAAM,CAAC,CAAC;;IAExB;AACJ;AACA;AACA;IACI,IAAI,CAACkE,0BAA0B,GAAG,CAAC,CAAC;;IAEpC;AACJ;AACA;AACA;IACI,IAAI,CAACC,yBAAyB,GAAG,CAAC,CAAC;;IAEnC;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAIpB,OAAO,CAACqB,QAAQ,EAAE;MACpB,IAAI,CAACC,WAAW,CAACtB,OAAO,CAACqB,QAAQ,CAAC;IACpC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACE,kBAAkB,GAAGvB,OAAO,CAACwB,aAAa,GAC3CxB,OAAO,CAACwB,aAAa,CAACC,GAAG,CACtBzB,OAAO,IACN,IAAIzD,uBAAuB,CAAC;MAC1BmF,YAAY,EAAE,IAAI,CAAClB,GAAG;MACtBmB,UAAU,EAAE3B,OAAO,CAAC2B,UAAU;MAC9BC,YAAY,EAAE5B,OAAO,CAAC4B,YAAY;MAClCC,cAAc,EAAE7B,OAAO,CAAC6B,cAAc;MACtCR,QAAQ,EAAErB,OAAO,CAACqB;IACpB,CAAC,CACL,CAAC,GACD,CAAC,IAAI9E,uBAAuB,CAAC;MAACmF,YAAY,EAAE,IAAI,CAAClB;IAAG,CAAC,CAAC,CAAC;;IAE3D;AACJ;AACA;AACA;IACI,IAAI,CAACsB,oBAAoB,GAAG,IAAI;;IAEhC;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;EAC9B;;EAEA;AACF;AACA;EACEX,WAAWA,CAACD,QAAQ,EAAE;IACpB,IAAI,CAACD,SAAS,GAAG,EAAE;IACnB,KAAK,MAAMc,IAAI,IAAIb,QAAQ,EAAE;MAC3B,IAAI,CAACD,SAAS,CAACe,IAAI,CAAC;QAClBD,IAAI,EAAEA,IAAI;QACVE,KAAK,EAAEf,QAAQ,CAACa,IAAI;MACtB,CAAC,CAAC;IACJ;EACF;;EAEA;AACF;AACA;AACA;EACEG,qBAAqBA,CAAC9B,cAAc,EAAE;IACpC,OAAO,IAAI,CAACD,eAAe,KAAK7B,uBAAuB,CAAC8B,cAAc,CAAC;EACzE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEX,YAAYA,CAACsC,IAAI,EAAE;IACjB,IAAIA,IAAI,IAAI,IAAI,CAACxB,eAAe,EAAE;MAChC,OAAO,IAAI,CAACA,eAAe,CAACwB,IAAI,CAAC;IACnC;IACA,MAAMvC,SAAS,GAAG,IAAI,CAACa,GAAG,CAACZ,YAAY,CAACsC,IAAI,CAAC;IAC7C,IAAI,CAACxB,eAAe,CAACwB,IAAI,CAAC,GAAGvC,SAAS;IACtC,OAAOA,SAAS;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE2C,UAAUA,CAACC,MAAM,EAAE;IACjB,MAAM7C,EAAE,GAAG,IAAI,CAACc,GAAG;IACnB,MAAMgC,SAAS,GAAG/E,MAAM,CAAC8E,MAAM,CAAC;IAChC,IAAIE,WAAW,GAAG,IAAI,CAAChC,YAAY,CAAC+B,SAAS,CAAC;IAC9C,IAAI,CAACC,WAAW,EAAE;MAChB,MAAMC,WAAW,GAAGhD,EAAE,CAACiD,YAAY,CAAC,CAAC;MACrCF,WAAW,GAAG;QACZF,MAAM,EAAEA,MAAM;QACdG,WAAW,EAAEA;MACf,CAAC;MACD,IAAI,CAACjC,YAAY,CAAC+B,SAAS,CAAC,GAAGC,WAAW;IAC5C;IACA/C,EAAE,CAAC4C,UAAU,CAACC,MAAM,CAACK,OAAO,CAAC,CAAC,EAAEH,WAAW,CAACC,WAAW,CAAC;EAC1D;;EAEA;AACF;AACA;AACA;AACA;EACEG,eAAeA,CAACN,MAAM,EAAE;IACtB,MAAM7C,EAAE,GAAG,IAAI,CAACc,GAAG;IACnB,IAAI,CAAC8B,UAAU,CAACC,MAAM,CAAC;IACvB7C,EAAE,CAACoD,UAAU,CAACP,MAAM,CAACK,OAAO,CAAC,CAAC,EAAEL,MAAM,CAACQ,QAAQ,CAAC,CAAC,EAAER,MAAM,CAACS,QAAQ,CAAC,CAAC,CAAC;EACvE;;EAEA;AACF;AACA;EACEC,YAAYA,CAACC,GAAG,EAAE;IAChB,MAAMxD,EAAE,GAAG,IAAI,CAACc,GAAG;IACnB,MAAMgC,SAAS,GAAG/E,MAAM,CAACyF,GAAG,CAAC;IAC7B,MAAMC,gBAAgB,GAAG,IAAI,CAAC1C,YAAY,CAAC+B,SAAS,CAAC;IACrD,IAAIW,gBAAgB,IAAI,CAACzD,EAAE,CAAC0D,aAAa,CAAC,CAAC,EAAE;MAC3C1D,EAAE,CAACuD,YAAY,CAACE,gBAAgB,CAACT,WAAW,CAAC;IAC/C;IACA,OAAO,IAAI,CAACjC,YAAY,CAAC+B,SAAS,CAAC;EACrC;;EAEA;AACF;AACA;EACEa,eAAeA,CAAA,EAAG;IAChB,MAAMtE,MAAM,GAAG,IAAI,CAACyB,GAAG,CAACzB,MAAM;IAC9BA,MAAM,CAACuE,mBAAmB,CACxBjH,gBAAgB,CAACwE,IAAI,EACrB,IAAI,CAACZ,4BACP,CAAC;IACDlB,MAAM,CAACuE,mBAAmB,CACxBjH,gBAAgB,CAACyE,QAAQ,EACzB,IAAI,CAACV,gCACP,CAAC;IAEDX,aAAa,CAAC,IAAI,CAACa,eAAe,CAAC;IAEnC,OAAO,IAAI,CAACE,GAAG;EACjB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE+C,WAAWA,CAACC,UAAU,EAAEC,iBAAiB,EAAEC,WAAW,EAAE;IACtD,MAAMhE,EAAE,GAAG,IAAI,CAACc,GAAG;IACnB,MAAMzB,MAAM,GAAG,IAAI,CAAC4E,SAAS,CAAC,CAAC;IAC/B,MAAMC,IAAI,GAAGJ,UAAU,CAACI,IAAI;IAC5B,MAAMC,UAAU,GAAGL,UAAU,CAACK,UAAU;IAExC,IACE9E,MAAM,CAACG,KAAK,KAAK0E,IAAI,CAAC,CAAC,CAAC,GAAGC,UAAU,IACrC9E,MAAM,CAACI,MAAM,KAAKyE,IAAI,CAAC,CAAC,CAAC,GAAGC,UAAU,EACtC;MACA9E,MAAM,CAACG,KAAK,GAAG0E,IAAI,CAAC,CAAC,CAAC,GAAGC,UAAU;MACnC9E,MAAM,CAACI,MAAM,GAAGyE,IAAI,CAAC,CAAC,CAAC,GAAGC,UAAU;MACpC9E,MAAM,CAACK,KAAK,CAACF,KAAK,GAAG0E,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;MACnC7E,MAAM,CAACK,KAAK,CAACD,MAAM,GAAGyE,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;IACtC;;IAEA;IACA,KAAK,IAAIE,CAAC,GAAG,IAAI,CAACvC,kBAAkB,CAACwC,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC5D,IAAI,CAACvC,kBAAkB,CAACuC,CAAC,CAAC,CAACE,IAAI,CAACR,UAAU,CAAC;IAC7C;IAEA9D,EAAE,CAACuE,WAAW,CAACvE,EAAE,CAACwE,UAAU,EAAE,IAAI,CAAC;IAEnCxE,EAAE,CAACyE,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACjCzE,EAAE,CAAC0E,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC;IACvB1E,EAAE,CAAC2E,UAAU,CAAC,GAAG,CAAC;IAClB3E,EAAE,CAAC7C,KAAK,CAAC6C,EAAE,CAAC4E,gBAAgB,GAAG5E,EAAE,CAAC6E,gBAAgB,CAAC;IAEnD7E,EAAE,CAAC8E,MAAM,CAAC9E,EAAE,CAAC+E,KAAK,CAAC;IACnB/E,EAAE,CAACgF,SAAS,CAAChF,EAAE,CAACiF,GAAG,EAAElB,iBAAiB,GAAG/D,EAAE,CAACkF,IAAI,GAAGlF,EAAE,CAACmF,mBAAmB,CAAC;IAC1E,IAAInB,WAAW,EAAE;MACfhE,EAAE,CAAC8E,MAAM,CAAC9E,EAAE,CAACoF,UAAU,CAAC;MACxBpF,EAAE,CAACqF,SAAS,CAACrF,EAAE,CAACsF,MAAM,CAAC;IACzB,CAAC,MAAM;MACLtF,EAAE,CAACuF,OAAO,CAACvF,EAAE,CAACoF,UAAU,CAAC;IAC3B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEb,WAAWA,CAACiB,OAAO,EAAEC,IAAI,EAAEC,WAAW,EAAE;IACtC,MAAM1F,EAAE,GAAG,IAAI,CAACc,GAAG;IACnBd,EAAE,CAAC2F,aAAa,CAAC3F,EAAE,CAAC4F,QAAQ,GAAGH,IAAI,CAAC;IACpCzF,EAAE,CAACuE,WAAW,CAACvE,EAAE,CAACwE,UAAU,EAAEgB,OAAO,CAAC;IACtCxF,EAAE,CAAC6F,SAAS,CAAC,IAAI,CAACC,kBAAkB,CAACJ,WAAW,CAAC,EAAED,IAAI,CAAC;EAC1D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,yBAAyBA,CACvBjC,UAAU,EACVkC,YAAY,EACZjC,iBAAiB,EACjBC,WAAW,EACX;IACA,MAAMhE,EAAE,GAAG,IAAI,CAACc,GAAG;IACnB,MAAMoD,IAAI,GAAG8B,YAAY,CAACC,OAAO,CAAC,CAAC;IAEnCjG,EAAE,CAACkG,eAAe,CAAClG,EAAE,CAACmG,WAAW,EAAEH,YAAY,CAACI,cAAc,CAAC,CAAC,CAAC;IACjEpG,EAAE,CAACqG,gBAAgB,CAACrG,EAAE,CAACsG,YAAY,EAAEN,YAAY,CAACO,cAAc,CAAC,CAAC,CAAC;IACnEvG,EAAE,CAACwG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEtC,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;IACnClE,EAAE,CAACuE,WAAW,CAACvE,EAAE,CAACwE,UAAU,EAAEwB,YAAY,CAACS,UAAU,CAAC,CAAC,CAAC;IACxDzG,EAAE,CAACyE,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACjCzE,EAAE,CAAC0E,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC;IACvB1E,EAAE,CAAC2E,UAAU,CAAC,GAAG,CAAC;IAClB3E,EAAE,CAAC7C,KAAK,CAAC6C,EAAE,CAAC4E,gBAAgB,GAAG5E,EAAE,CAAC6E,gBAAgB,CAAC;IACnD7E,EAAE,CAAC8E,MAAM,CAAC9E,EAAE,CAAC+E,KAAK,CAAC;IACnB/E,EAAE,CAACgF,SAAS,CAAChF,EAAE,CAACiF,GAAG,EAAElB,iBAAiB,GAAG/D,EAAE,CAACkF,IAAI,GAAGlF,EAAE,CAACmF,mBAAmB,CAAC;IAC1E,IAAInB,WAAW,EAAE;MACfhE,EAAE,CAAC8E,MAAM,CAAC9E,EAAE,CAACoF,UAAU,CAAC;MACxBpF,EAAE,CAACqF,SAAS,CAACrF,EAAE,CAACsF,MAAM,CAAC;IACzB,CAAC,MAAM;MACLtF,EAAE,CAACuF,OAAO,CAACvF,EAAE,CAACoF,UAAU,CAAC;IAC3B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEsB,YAAYA,CAACC,KAAK,EAAEC,GAAG,EAAE;IACvB,MAAM5G,EAAE,GAAG,IAAI,CAACc,GAAG;IACnB,IAAI,CAACZ,YAAY,CAAC,wBAAwB,CAAC;IAE3C,MAAM2G,WAAW,GAAG7G,EAAE,CAAChD,YAAY;IACnC,MAAM8J,WAAW,GAAG,CAAC;IAErB,MAAMC,QAAQ,GAAGH,GAAG,GAAGD,KAAK;IAC5B,MAAMK,aAAa,GAAGL,KAAK,GAAGG,WAAW;IACzC9G,EAAE,CAAC0G,YAAY,CAAC1G,EAAE,CAACiH,SAAS,EAAEF,QAAQ,EAAEF,WAAW,EAAEG,aAAa,CAAC;EACrE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEE,YAAYA,CAACpD,UAAU,EAAEqD,UAAU,EAAEC,WAAW,EAAE;IAChD;IACA,KAAK,IAAIhD,CAAC,GAAG,CAAC,EAAEiD,EAAE,GAAG,IAAI,CAACxF,kBAAkB,CAACwC,MAAM,EAAED,CAAC,GAAGiD,EAAE,EAAEjD,CAAC,EAAE,EAAE;MAChE,IAAIA,CAAC,KAAKiD,EAAE,GAAG,CAAC,EAAE;QAChB,IAAI,CAACxF,kBAAkB,CAACuC,CAAC,CAAC,CAACkD,KAAK,CAC9BxD,UAAU,EACV,IAAI,EACJqD,UAAU,EACVC,WACF,CAAC;MACH,CAAC,MAAM;QACL,IAAI,CAACvF,kBAAkB,CAACuC,CAAC,CAAC,CAACkD,KAAK,CAC9BxD,UAAU,EACV,IAAI,CAACjC,kBAAkB,CAACuC,CAAC,GAAG,CAAC,CAC/B,CAAC;MACH;IACF;EACF;;EAEA;AACF;AACA;EACEH,SAASA,CAAA,EAAG;IACV,OAAO,gCAAkC,IAAI,CAACnD,GAAG,CAACzB,MAAM;EAC1D;;EAEA;AACF;AACA;AACA;EACEkI,KAAKA,CAAA,EAAG;IACN,OAAO,IAAI,CAACzG,GAAG;EACjB;;EAEA;AACF;AACA;AACA;EACE0G,eAAeA,CAAC1D,UAAU,EAAE;IAC1B,MAAMI,IAAI,GAAGJ,UAAU,CAACI,IAAI;IAC5B,MAAMuD,QAAQ,GAAG3D,UAAU,CAAC4D,SAAS,CAACD,QAAQ;IAC9C,MAAMtD,UAAU,GAAGL,UAAU,CAACK,UAAU;IAExC,MAAMwD,iBAAiB,GAAGlK,cAAc,CAAC,IAAI,CAAC6D,kBAAkB,CAAC;IACjEzD,cAAc,CAAC8J,iBAAiB,EAAE,CAAC,GAAGzD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,CAAC;IAE3D,MAAM0D,kBAAkB,GAAGnK,cAAc,CAAC,IAAI,CAAC4D,mBAAmB,CAAC;IACnE,IAAIoG,QAAQ,KAAK,CAAC,EAAE;MAClB9J,eAAe,CAACiK,kBAAkB,EAAE,CAACH,QAAQ,CAAC;IAChD;IAEA,IAAI,CAACI,qBAAqB,CACxB1J,cAAc,CAACE,mBAAmB,EAClCP,aAAa,CAAC,IAAI,CAACyD,QAAQ,EAAEoG,iBAAiB,CAChD,CAAC;IACD,IAAI,CAACE,qBAAqB,CACxB1J,cAAc,CAACG,sBAAsB,EACrCR,aAAa,CAAC,IAAI,CAACyD,QAAQ,EAAEqG,kBAAkB,CACjD,CAAC;IAED,IAAI,CAACE,oBAAoB,CACvB3J,cAAc,CAACI,IAAI,EACnB,CAAC+D,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACF,UAAU,IAAI,KACnC,CAAC;IACD,IAAI,CAACyF,oBAAoB,CAAC3J,cAAc,CAACK,IAAI,EAAEsF,UAAU,CAAC4D,SAAS,CAACK,IAAI,CAAC;IACzE,IAAI,CAACD,oBAAoB,CACvB3J,cAAc,CAACM,UAAU,EACzBqF,UAAU,CAAC4D,SAAS,CAACM,UACvB,CAAC;IACD,IAAI,CAACF,oBAAoB,CAAC3J,cAAc,CAACQ,WAAW,EAAEwF,UAAU,CAAC;IACjE,IAAI,CAAC8D,mBAAmB,CAAC9J,cAAc,CAACO,gBAAgB,EAAE,CACxDwF,IAAI,CAAC,CAAC,CAAC,EACPA,IAAI,CAAC,CAAC,CAAC,CACR,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACEgE,wBAAwBA,CAACC,OAAO,EAAE;IAChC,MAAMC,GAAG,GAAG,IAAI,CAACtC,kBAAkB,CAAC3H,cAAc,CAACS,aAAa,CAAC;IACjE,IAAI,CAAC2I,KAAK,CAAC,CAAC,CAAC1B,SAAS,CAACuC,GAAG,EAAED,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;EAC9C;;EAEA;AACF;AACA;AACA;EACEE,aAAaA,CAACvE,UAAU,EAAE;IACxB,MAAM9D,EAAE,GAAG,IAAI,CAACc,GAAG;IAEnB,IAAI4B,KAAK;IACT,IAAI4F,WAAW,GAAG,CAAC;IACnB,IAAI,CAAC5G,SAAS,CAAC6G,OAAO,CAAEC,OAAO,IAAK;MAClC9F,KAAK,GACH,OAAO8F,OAAO,CAAC9F,KAAK,KAAK,UAAU,GAC/B8F,OAAO,CAAC9F,KAAK,CAACoB,UAAU,CAAC,GACzB0E,OAAO,CAAC9F,KAAK;;MAEnB;MACA,IACEA,KAAK,YAAY+F,iBAAiB,IAClC/F,KAAK,YAAYgG,gBAAgB,IACjChG,KAAK,YAAYiG,SAAS,EAC1B;QACA;QACA,IAAI,CAACH,OAAO,CAAChD,OAAO,EAAE;UACpBgD,OAAO,CAACI,SAAS,GAAGC,SAAS;UAC7BL,OAAO,CAAChD,OAAO,GAAGxF,EAAE,CAAC8I,aAAa,CAAC,CAAC;QACtC;QACA9I,EAAE,CAAC2F,aAAa,CAAC3F,EAAE,CAAC,UAAUsI,WAAW,EAAE,CAAC,CAAC;QAC7CtI,EAAE,CAACuE,WAAW,CAACvE,EAAE,CAACwE,UAAU,EAAEgE,OAAO,CAAChD,OAAO,CAAC;QAC9CxF,EAAE,CAAC+I,aAAa,CAAC/I,EAAE,CAACwE,UAAU,EAAExE,EAAE,CAACgJ,kBAAkB,EAAEhJ,EAAE,CAACiJ,MAAM,CAAC;QACjEjJ,EAAE,CAAC+I,aAAa,CAAC/I,EAAE,CAACwE,UAAU,EAAExE,EAAE,CAACkJ,cAAc,EAAElJ,EAAE,CAACmJ,aAAa,CAAC;QACpEnJ,EAAE,CAAC+I,aAAa,CAAC/I,EAAE,CAACwE,UAAU,EAAExE,EAAE,CAACoJ,cAAc,EAAEpJ,EAAE,CAACmJ,aAAa,CAAC;QAEpE,MAAME,UAAU,GACd,EAAE3G,KAAK,YAAYgG,gBAAgB,CAAC,IACpC,+BAAiChG,KAAK,CAAE4G,QAAQ;QAClD,IAAID,UAAU,IAAIb,OAAO,CAACI,SAAS,KAAKlG,KAAK,EAAE;UAC7C8F,OAAO,CAACI,SAAS,GAAGlG,KAAK;UACzB1C,EAAE,CAACuJ,UAAU,CACXvJ,EAAE,CAACwE,UAAU,EACb,CAAC,EACDxE,EAAE,CAACwJ,IAAI,EACPxJ,EAAE,CAACwJ,IAAI,EACPxJ,EAAE,CAACjD,aAAa,EAChB2F,KACF,CAAC;QACH;;QAEA;QACA1C,EAAE,CAAC6F,SAAS,CAAC,IAAI,CAACC,kBAAkB,CAAC0C,OAAO,CAAChG,IAAI,CAAC,EAAE8F,WAAW,EAAE,CAAC;MACpE,CAAC,MAAM,IAAImB,KAAK,CAACC,OAAO,CAAChH,KAAK,CAAC,IAAIA,KAAK,CAAC2B,MAAM,KAAK,CAAC,EAAE;QACrD,IAAI,CAACwD,qBAAqB,CACxBW,OAAO,CAAChG,IAAI,EACZ1E,aAAa,CAAC,IAAI,CAACyD,QAAQ,EAAEmB,KAAK,CACpC,CAAC;MACH,CAAC,MAAM,IAAI+G,KAAK,CAACC,OAAO,CAAChH,KAAK,CAAC,IAAIA,KAAK,CAAC2B,MAAM,IAAI,CAAC,EAAE;QACpD,QAAQ3B,KAAK,CAAC2B,MAAM;UAClB,KAAK,CAAC;YACJrE,EAAE,CAAC2J,SAAS,CACV,IAAI,CAAC7D,kBAAkB,CAAC0C,OAAO,CAAChG,IAAI,CAAC,EACrCE,KAAK,CAAC,CAAC,CAAC,EACRA,KAAK,CAAC,CAAC,CACT,CAAC;YACD;UACF,KAAK,CAAC;YACJ1C,EAAE,CAAC4J,SAAS,CACV,IAAI,CAAC9D,kBAAkB,CAAC0C,OAAO,CAAChG,IAAI,CAAC,EACrCE,KAAK,CAAC,CAAC,CAAC,EACRA,KAAK,CAAC,CAAC,CAAC,EACRA,KAAK,CAAC,CAAC,CACT,CAAC;YACD;UACF,KAAK,CAAC;YACJ1C,EAAE,CAAC6J,SAAS,CACV,IAAI,CAAC/D,kBAAkB,CAAC0C,OAAO,CAAChG,IAAI,CAAC,EACrCE,KAAK,CAAC,CAAC,CAAC,EACRA,KAAK,CAAC,CAAC,CAAC,EACRA,KAAK,CAAC,CAAC,CAAC,EACRA,KAAK,CAAC,CAAC,CACT,CAAC;YACD;UACF;YACE;QACJ;MACF,CAAC,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACpC1C,EAAE,CAAC8J,SAAS,CAAC,IAAI,CAAChE,kBAAkB,CAAC0C,OAAO,CAAChG,IAAI,CAAC,EAAEE,KAAK,CAAC;MAC5D;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEqH,UAAUA,CAACC,OAAO,EAAElG,UAAU,EAAE;IAC9B,MAAM9D,EAAE,GAAG,IAAI,CAACc,GAAG;IACnBd,EAAE,CAAC+J,UAAU,CAACC,OAAO,CAAC;IACtB,IAAI,CAAC/I,eAAe,GAAG+I,OAAO;IAC9B,IAAI,CAACxC,eAAe,CAAC1D,UAAU,CAAC;IAChC,IAAI,CAACuE,aAAa,CAACvE,UAAU,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEmG,aAAaA,CAACC,MAAM,EAAEC,IAAI,EAAE;IAC1B,MAAMnK,EAAE,GAAG,IAAI,CAACc,GAAG;IACnB,MAAMsJ,MAAM,GAAGpK,EAAE,CAACqK,YAAY,CAACF,IAAI,CAAC;IACpCnK,EAAE,CAACsK,YAAY,CAACF,MAAM,EAAEF,MAAM,CAAC;IAC/BlK,EAAE,CAACiK,aAAa,CAACG,MAAM,CAAC;IACxB,OAAOA,MAAM;EACf;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEG,UAAUA,CAACC,oBAAoB,EAAEC,kBAAkB,EAAE;IACnD,MAAMzK,EAAE,GAAG,IAAI,CAACc,GAAG;IAEnB,MAAMqB,cAAc,GAAG,IAAI,CAAC8H,aAAa,CACvCO,oBAAoB,EACpBxK,EAAE,CAAC/B,eACL,CAAC;IAED,MAAMiE,YAAY,GAAG,IAAI,CAAC+H,aAAa,CACrCQ,kBAAkB,EAClBzK,EAAE,CAAC9B,aACL,CAAC;IAED,MAAM8L,OAAO,GAAGhK,EAAE,CAAC0K,aAAa,CAAC,CAAC;IAClC1K,EAAE,CAAC2K,YAAY,CAACX,OAAO,EAAE7H,cAAc,CAAC;IACxCnC,EAAE,CAAC2K,YAAY,CAACX,OAAO,EAAE9H,YAAY,CAAC;IACtClC,EAAE,CAAC4K,WAAW,CAACZ,OAAO,CAAC;IAEvB,IAAI,CAAChK,EAAE,CAAC6K,kBAAkB,CAAC1I,cAAc,EAAEnC,EAAE,CAAC8K,cAAc,CAAC,EAAE;MAC7D,MAAMC,OAAO,GAAG,uCAAuC/K,EAAE,CAACgL,gBAAgB,CACxE7I,cACF,CAAC,EAAE;MACH,MAAM,IAAI8I,KAAK,CAACF,OAAO,CAAC;IAC1B;IACA/K,EAAE,CAACkL,YAAY,CAAC/I,cAAc,CAAC;IAE/B,IAAI,CAACnC,EAAE,CAAC6K,kBAAkB,CAAC3I,YAAY,EAAElC,EAAE,CAAC8K,cAAc,CAAC,EAAE;MAC3D,MAAMC,OAAO,GAAG,qCAAqC/K,EAAE,CAACgL,gBAAgB,CACtE9I,YACF,CAAC,EAAE;MACH,MAAM,IAAI+I,KAAK,CAACF,OAAO,CAAC;IAC1B;IACA/K,EAAE,CAACkL,YAAY,CAAChJ,YAAY,CAAC;IAE7B,IAAI,CAAClC,EAAE,CAACmL,mBAAmB,CAACnB,OAAO,EAAEhK,EAAE,CAACoL,WAAW,CAAC,EAAE;MACpD,MAAML,OAAO,GAAG,8BAA8B/K,EAAE,CAACqL,iBAAiB,CAChErB,OACF,CAAC,EAAE;MACH,MAAM,IAAIiB,KAAK,CAACF,OAAO,CAAC;IAC1B;IAEA,OAAOf,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;EACElE,kBAAkBA,CAACtD,IAAI,EAAE;IACvB,MAAM8I,UAAU,GAAGvN,MAAM,CAAC,IAAI,CAACkD,eAAe,CAAC;IAC/C,IAAI,IAAI,CAACO,0BAA0B,CAAC8J,UAAU,CAAC,KAAKzC,SAAS,EAAE;MAC7D,IAAI,CAACrH,0BAA0B,CAAC8J,UAAU,CAAC,GAAG,CAAC,CAAC;IAClD;IACA,IAAI,IAAI,CAAC9J,0BAA0B,CAAC8J,UAAU,CAAC,CAAC9I,IAAI,CAAC,KAAKqG,SAAS,EAAE;MACnE,IAAI,CAACrH,0BAA0B,CAAC8J,UAAU,CAAC,CAAC9I,IAAI,CAAC,GAC/C,IAAI,CAAC1B,GAAG,CAACgF,kBAAkB,CAAC,IAAI,CAAC7E,eAAe,EAAEuB,IAAI,CAAC;IAC3D;IACA,OAAO,IAAI,CAAChB,0BAA0B,CAAC8J,UAAU,CAAC,CAAC9I,IAAI,CAAC;EAC1D;;EAEA;AACF;AACA;AACA;AACA;EACE+I,oBAAoBA,CAAC/I,IAAI,EAAE;IACzB,MAAM8I,UAAU,GAAGvN,MAAM,CAAC,IAAI,CAACkD,eAAe,CAAC;IAC/C,IAAI,IAAI,CAACQ,yBAAyB,CAAC6J,UAAU,CAAC,KAAKzC,SAAS,EAAE;MAC5D,IAAI,CAACpH,yBAAyB,CAAC6J,UAAU,CAAC,GAAG,CAAC,CAAC;IACjD;IACA,IAAI,IAAI,CAAC7J,yBAAyB,CAAC6J,UAAU,CAAC,CAAC9I,IAAI,CAAC,KAAKqG,SAAS,EAAE;MAClE,IAAI,CAACpH,yBAAyB,CAAC6J,UAAU,CAAC,CAAC9I,IAAI,CAAC,GAC9C,IAAI,CAAC1B,GAAG,CAAC0K,iBAAiB,CAAC,IAAI,CAACvK,eAAe,EAAEuB,IAAI,CAAC;IAC1D;IACA,OAAO,IAAI,CAACf,yBAAyB,CAAC6J,UAAU,CAAC,CAAC9I,IAAI,CAAC;EACzD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEiJ,uBAAuBA,CAAC3H,UAAU,EAAE4H,SAAS,EAAE;IAC7C,MAAMxH,IAAI,GAAGJ,UAAU,CAACI,IAAI;IAC5B,MAAMuD,QAAQ,GAAG3D,UAAU,CAAC4D,SAAS,CAACD,QAAQ;IAC9C,MAAMO,UAAU,GAAGlE,UAAU,CAAC4D,SAAS,CAACM,UAAU;IAClD,MAAM2D,MAAM,GAAG7H,UAAU,CAAC4D,SAAS,CAACiE,MAAM;IAC1CtO,gBAAgB,CACdqO,SAAS,EACT,CAAC,EACD,CAAC,EACD,CAAC,IAAI1D,UAAU,GAAG9D,IAAI,CAAC,CAAC,CAAC,CAAC,EAC1B,CAAC,IAAI8D,UAAU,GAAG9D,IAAI,CAAC,CAAC,CAAC,CAAC,EAC1B,CAACuD,QAAQ,EACT,CAACkE,MAAM,CAAC,CAAC,CAAC,EACV,CAACA,MAAM,CAAC,CAAC,CACX,CAAC;IACD,OAAOD,SAAS;EAClB;;EAEA;AACF;AACA;AACA;AACA;EACE5D,oBAAoBA,CAACU,OAAO,EAAE9F,KAAK,EAAE;IACnC,IAAI,CAAC5B,GAAG,CAACgJ,SAAS,CAAC,IAAI,CAAChE,kBAAkB,CAAC0C,OAAO,CAAC,EAAE9F,KAAK,CAAC;EAC7D;;EAEA;AACF;AACA;AACA;AACA;EACEuF,mBAAmBA,CAACO,OAAO,EAAE9F,KAAK,EAAE;IAClC,IAAI,CAAC5B,GAAG,CAAC8K,UAAU,CAAC,IAAI,CAAC9F,kBAAkB,CAAC0C,OAAO,CAAC,EAAE9F,KAAK,CAAC;EAC9D;;EAEA;AACF;AACA;AACA;AACA;EACEmJ,mBAAmBA,CAACrD,OAAO,EAAE9F,KAAK,EAAE;IAClC,IAAI,CAAC5B,GAAG,CAACgL,UAAU,CAAC,IAAI,CAAChG,kBAAkB,CAAC0C,OAAO,CAAC,EAAE9F,KAAK,CAAC;EAC9D;;EAEA;AACF;AACA;AACA;AACA;EACEmF,qBAAqBA,CAACW,OAAO,EAAE9F,KAAK,EAAE;IACpC,IAAI,CAAC5B,GAAG,CAACiL,gBAAgB,CAAC,IAAI,CAACjG,kBAAkB,CAAC0C,OAAO,CAAC,EAAE,KAAK,EAAE9F,KAAK,CAAC;EAC3E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEsJ,qBAAqBA,CAACC,UAAU,EAAE/H,IAAI,EAAEiG,IAAI,EAAE+B,MAAM,EAAEC,MAAM,EAAE;IAC5D,MAAMC,QAAQ,GAAG,IAAI,CAACb,oBAAoB,CAACU,UAAU,CAAC;IACtD;IACA,IAAIG,QAAQ,GAAG,CAAC,EAAE;MAChB;IACF;IACA,IAAI,CAACtL,GAAG,CAACuL,uBAAuB,CAACD,QAAQ,CAAC;IAC1C,IAAI,CAACtL,GAAG,CAACwL,mBAAmB,CAACF,QAAQ,EAAElI,IAAI,EAAEiG,IAAI,EAAE,KAAK,EAAE+B,MAAM,EAAEC,MAAM,CAAC;EAC3E;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEI,gBAAgBA,CAACC,UAAU,EAAE;IAC3B,MAAMN,MAAM,GAAGO,uBAAuB,CAACD,UAAU,CAAC;IAClD,IAAIL,MAAM,GAAG,CAAC;IACd,KAAK,IAAI/H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoI,UAAU,CAACnI,MAAM,EAAED,CAAC,EAAE,EAAE;MAC1C,MAAMsI,IAAI,GAAGF,UAAU,CAACpI,CAAC,CAAC;MAC1B,IAAI,CAAC4H,qBAAqB,CACxBU,IAAI,CAAClK,IAAI,EACTkK,IAAI,CAACxI,IAAI,EACTwI,IAAI,CAACvC,IAAI,IAAIrN,KAAK,EAClBoP,MAAM,EACNC,MACF,CAAC;MACDA,MAAM,IAAIO,IAAI,CAACxI,IAAI,GAAGyI,mBAAmB,CAACD,IAAI,CAACvC,IAAI,CAAC;IACtD;EACF;;EAEA;AACF;AACA;AACA;EACE3J,sBAAsBA,CAAA,EAAG;IACvBrD,KAAK,CAAC,IAAI,CAAC4D,YAAY,CAAC;IACxB,IAAI,CAACE,eAAe,GAAG,IAAI;EAC7B;;EAEA;AACF;AACA;AACA;EACEN,0BAA0BA,CAAA,EAAG,CAAC;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEmI,aAAaA,CAAC5E,IAAI,EAAE0I,IAAI,EAAEpH,OAAO,EAAE;IACjC,MAAMxF,EAAE,GAAG,IAAI,CAACc,GAAG;IACnB0E,OAAO,GAAGA,OAAO,IAAIxF,EAAE,CAAC8I,aAAa,CAAC,CAAC;;IAEvC;IACA,MAAM+D,KAAK,GAAG,CAAC;IACf,MAAMC,cAAc,GAAG9M,EAAE,CAACwJ,IAAI;IAC9B,MAAMuD,MAAM,GAAG,CAAC;IAChB,MAAMC,MAAM,GAAGhN,EAAE,CAACwJ,IAAI;IACtB,MAAMW,IAAI,GAAGnK,EAAE,CAACjD,aAAa;IAC7BiD,EAAE,CAACuE,WAAW,CAACvE,EAAE,CAACwE,UAAU,EAAEgB,OAAO,CAAC;IACtC,IAAIoH,IAAI,EAAE;MACR5M,EAAE,CAACuJ,UAAU,CAACvJ,EAAE,CAACwE,UAAU,EAAEqI,KAAK,EAAEC,cAAc,EAAEE,MAAM,EAAE7C,IAAI,EAAEyC,IAAI,CAAC;IACzE,CAAC,MAAM;MACL5M,EAAE,CAACuJ,UAAU,CACXvJ,EAAE,CAACwE,UAAU,EACbqI,KAAK,EACLC,cAAc,EACd5I,IAAI,CAAC,CAAC,CAAC,EACPA,IAAI,CAAC,CAAC,CAAC,EACP6I,MAAM,EACNC,MAAM,EACN7C,IAAI,EACJ,IACF,CAAC;IACH;IACAnK,EAAE,CAAC+I,aAAa,CAAC/I,EAAE,CAACwE,UAAU,EAAExE,EAAE,CAACgJ,kBAAkB,EAAEhJ,EAAE,CAACiJ,MAAM,CAAC;IACjEjJ,EAAE,CAAC+I,aAAa,CAAC/I,EAAE,CAACwE,UAAU,EAAExE,EAAE,CAACkJ,cAAc,EAAElJ,EAAE,CAACmJ,aAAa,CAAC;IACpEnJ,EAAE,CAAC+I,aAAa,CAAC/I,EAAE,CAACwE,UAAU,EAAExE,EAAE,CAACoJ,cAAc,EAAEpJ,EAAE,CAACmJ,aAAa,CAAC;IAEpE,OAAO3D,OAAO;EAChB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASiH,uBAAuBA,CAACD,UAAU,EAAE;EAClD,IAAIN,MAAM,GAAG,CAAC;EACd,KAAK,IAAI9H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoI,UAAU,CAACnI,MAAM,EAAED,CAAC,EAAE,EAAE;IAC1C,MAAMsI,IAAI,GAAGF,UAAU,CAACpI,CAAC,CAAC;IAC1B8H,MAAM,IAAIQ,IAAI,CAACxI,IAAI,GAAGyI,mBAAmB,CAACD,IAAI,CAACvC,IAAI,CAAC;EACtD;EACA,OAAO+B,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASS,mBAAmBA,CAACxC,IAAI,EAAE;EACjC,QAAQA,IAAI;IACV,KAAKtL,aAAa,CAAC9B,aAAa;MAC9B,OAAOkQ,UAAU,CAACC,iBAAiB;IACrC,KAAKrO,aAAa,CAAC5B,cAAc;MAC/B,OAAOkQ,WAAW,CAACD,iBAAiB;IACtC,KAAKrO,aAAa,CAAC7B,YAAY;MAC7B,OAAOoQ,WAAW,CAACF,iBAAiB;IACtC,KAAKrO,aAAa,CAAC/B,KAAK;IACxB;MACE,OAAOuQ,YAAY,CAACH,iBAAiB;EACzC;AACF;AAEA,eAAe9M,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}