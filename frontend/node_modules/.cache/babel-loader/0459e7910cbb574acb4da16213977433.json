{"ast":null,"code":"/**\n * @module ol/source/ImageWMS\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport { DEFAULT_VERSION } from './wms.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { ceil, floor, round } from '../math.js';\nimport { compareVersions } from '../string.js';\nimport { containsExtent, getCenter, getForViewAndSize, getHeight, getWidth } from '../extent.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { get as getProjection, transform } from '../proj.js';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nconst DECIMALS = 4;\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} [url] WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageWMS extends ImageSource {\n  /**\n   * @param {Options} [options] ImageWMS options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = createCanvasContext2D(1, 1);\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = Object.assign({}, options.params);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n    this.updateV13_();\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n    const extent = getForViewAndSize(coordinate, resolution, 0, GETFEATUREINFO_IMAGE_SIZE);\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    Object.assign(baseParams, this.params_, params);\n    const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\n    const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(extent, GETFEATUREINFO_IMAGE_SIZE, 1, sourceProjectionObj || projectionObj, baseParams);\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png'\n    };\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n    if (resolution !== undefined) {\n      const mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = resolution * mpu / pixelSize;\n    }\n    Object.assign(baseParams, params);\n    return appendParams(/** @type {string} */this.url_, baseParams);\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    resolution = this.findNearestResolution(resolution);\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n    const imageResolution = resolution / pixelRatio;\n    const center = getCenter(extent);\n    const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n    const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n    const viewExtent = getForViewAndSize(center, imageResolution, 0, [viewWidth, viewHeight]);\n    const marginWidth = ceil((this.ratio_ - 1) * viewWidth / 2, DECIMALS);\n    const requestWidth = viewWidth + 2 * marginWidth;\n    const marginHeight = ceil((this.ratio_ - 1) * viewHeight / 2, DECIMALS);\n    const requestHeight = viewHeight + 2 * marginHeight;\n    const requestExtent = getForViewAndSize(center, imageResolution, 0, [requestWidth, requestHeight]);\n    const image = this.image_;\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), viewExtent)) {\n      return image;\n    }\n    const params = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    Object.assign(params, this.params_);\n    this.imageSize_[0] = round(getWidth(requestExtent) / imageResolution, DECIMALS);\n    this.imageSize_[1] = round(getHeight(requestExtent) / imageResolution, DECIMALS);\n    const url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio, projection, params);\n    this.image_ = new ImageWrapper(requestExtent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_, this.context_);\n    this.renderedRevision_ = this.getRevision();\n    this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    return this.image_;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case 'geoserver':\n          const dpi = 90 * pixelRatio + 0.5 | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case 'mapserver':\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case 'carmentaserver':\n        case 'qgis':\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default:\n          // Unknown `serverType` configured\n          assert(false, 8);\n          break;\n      }\n    }\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n    const axisOrientation = projection.getAxisOrientation();\n    let bbox;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n    params['BBOX'] = bbox.join(',');\n    return appendParams(/** @type {string} */this.url_, params);\n  }\n\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n}\nexport default ImageWMS;","map":{"version":3,"names":["EventType","ImageSource","defaultImageLoadFunction","ImageWrapper","DEFAULT_VERSION","appendParams","assert","calculateSourceResolution","ceil","floor","round","compareVersions","containsExtent","getCenter","getForViewAndSize","getHeight","getWidth","createCanvasContext2D","get","getProjection","transform","DECIMALS","GETFEATUREINFO_IMAGE_SIZE","ImageWMS","constructor","options","attributions","interpolate","projection","resolutions","context_","crossOrigin_","crossOrigin","undefined","url_","url","imageLoadFunction_","imageLoadFunction","params_","Object","assign","params","v13_","updateV13_","serverType_","serverType","hidpi_","hidpi","image_","imageSize_","renderedRevision_","ratio_","ratio","getFeatureInfoUrl","coordinate","resolution","projectionObj","sourceProjectionObj","extent","baseParams","x","y","getRequestUrl_","getLegendUrl","layers","LAYERS","isSingleLayer","Array","isArray","length","mpu","getMetersPerUnit","pixelSize","getParams","getImageInternal","pixelRatio","findNearestResolution","imageResolution","center","viewWidth","viewHeight","viewExtent","marginWidth","requestWidth","marginHeight","requestHeight","requestExtent","image","getRevision","getResolution","getPixelRatio","getExtent","addEventListener","CHANGE","handleImageChange","bind","getImageLoadFunction","size","getCode","dpi","axisOrientation","getAxisOrientation","bbox","substr","join","getUrl","setImageLoadFunction","changed","setUrl","updateParams","version"],"sources":["/Users/yantinglong/Documents/project/frogather/node_modules/ol/source/ImageWMS.js"],"sourcesContent":["/**\n * @module ol/source/ImageWMS\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport {DEFAULT_VERSION} from './wms.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {ceil, floor, round} from '../math.js';\nimport {compareVersions} from '../string.js';\nimport {\n  containsExtent,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {get as getProjection, transform} from '../proj.js';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nconst DECIMALS = 4;\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} [url] WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageWMS extends ImageSource {\n  /**\n   * @param {Options} [options] ImageWMS options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = createCanvasContext2D(1, 1);\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = Object.assign({}, options.params);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n    this.updateV13_();\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        resolution\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const extent = getForViewAndSize(\n      coordinate,\n      resolution,\n      0,\n      GETFEATUREINFO_IMAGE_SIZE\n    );\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    Object.assign(baseParams, this.params_, params);\n\n    const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\n    const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      extent,\n      GETFEATUREINFO_IMAGE_SIZE,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    Object.assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.url_), baseParams);\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const imageResolution = resolution / pixelRatio;\n\n    const center = getCenter(extent);\n    const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n    const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n    const viewExtent = getForViewAndSize(center, imageResolution, 0, [\n      viewWidth,\n      viewHeight,\n    ]);\n    const marginWidth = ceil(((this.ratio_ - 1) * viewWidth) / 2, DECIMALS);\n    const requestWidth = viewWidth + 2 * marginWidth;\n    const marginHeight = ceil(((this.ratio_ - 1) * viewHeight) / 2, DECIMALS);\n    const requestHeight = viewHeight + 2 * marginHeight;\n    const requestExtent = getForViewAndSize(center, imageResolution, 0, [\n      requestWidth,\n      requestHeight,\n    ]);\n\n    const image = this.image_;\n    if (\n      image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), viewExtent)\n    ) {\n      return image;\n    }\n\n    const params = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n    };\n    Object.assign(params, this.params_);\n\n    this.imageSize_[0] = round(\n      getWidth(requestExtent) / imageResolution,\n      DECIMALS\n    );\n    this.imageSize_[1] = round(\n      getHeight(requestExtent) / imageResolution,\n      DECIMALS\n    );\n\n    const url = this.getRequestUrl_(\n      requestExtent,\n      this.imageSize_,\n      pixelRatio,\n      projection,\n      params\n    );\n\n    this.image_ = new ImageWrapper(\n      requestExtent,\n      resolution,\n      pixelRatio,\n      url,\n      this.crossOrigin_,\n      this.imageLoadFunction_,\n      this.context_\n    );\n\n    this.renderedRevision_ = this.getRevision();\n\n    this.image_.addEventListener(\n      EventType.CHANGE,\n      this.handleImageChange.bind(this)\n    );\n\n    return this.image_;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case 'geoserver':\n          const dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case 'mapserver':\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case 'carmentaserver':\n        case 'qgis':\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default: // Unknown `serverType` configured\n          assert(false, 8);\n          break;\n      }\n    }\n\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n\n    const axisOrientation = projection.getAxisOrientation();\n    let bbox;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    return appendParams(/** @type {string} */ (this.url_), params);\n  }\n\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n}\n\nexport default ImageWMS;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}