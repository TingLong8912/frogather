{"ast":null,"code":"/**\n * @module ol/webgl/Buffer\n */\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER, STATIC_DRAW, STREAM_DRAW } from '../webgl.js';\nimport { assert } from '../asserts.js';\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\nexport var BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW\n};\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n * @api\n */\nvar WebGLArrayBuffer = /** @class */function () {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [opt_usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `DYNAMIC_DRAW`.\n   */\n  function WebGLArrayBuffer(type, opt_usage) {\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array}\n     */\n    this.array = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.type = type;\n    assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 62);\n    /**\n     * @private\n     * @type {number}\n     */\n    this.usage = opt_usage !== undefined ? opt_usage : BufferUsage.STATIC_DRAW;\n  }\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   */\n  WebGLArrayBuffer.prototype.ofSize = function (size) {\n    this.array = new (getArrayClassForType(this.type))(size);\n  };\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {Array<number>} array Numerical array\n   */\n  WebGLArrayBuffer.prototype.fromArray = function (array) {\n    var arrayClass = getArrayClassForType(this.type);\n    this.array = arrayClass.from ? arrayClass.from(array) : new arrayClass(array);\n  };\n  /**\n   * Populates the buffer with a raw binary array buffer.\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n   * initialized for the same typed array class.\n   */\n  WebGLArrayBuffer.prototype.fromArrayBuffer = function (buffer) {\n    this.array = new (getArrayClassForType(this.type))(buffer);\n  };\n  /**\n   * @return {number} Buffer type.\n   */\n  WebGLArrayBuffer.prototype.getType = function () {\n    return this.type;\n  };\n  /**\n   * Will return null if the buffer was not initialized\n   * @return {Float32Array|Uint32Array} Array.\n   */\n  WebGLArrayBuffer.prototype.getArray = function () {\n    return this.array;\n  };\n  /**\n   * @return {number} Usage.\n   */\n  WebGLArrayBuffer.prototype.getUsage = function () {\n    return this.usage;\n  };\n  /**\n   * Will return 0 if the buffer is not initialized\n   * @return {number} Array size\n   */\n  WebGLArrayBuffer.prototype.getSize = function () {\n    return this.array ? this.array.length : 0;\n  };\n  return WebGLArrayBuffer;\n}();\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n    default:\n      return Float32Array;\n  }\n}\nexport default WebGLArrayBuffer;","map":{"version":3,"names":["ARRAY_BUFFER","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","STREAM_DRAW","assert","BufferUsage","WebGLArrayBuffer","type","opt_usage","array","usage","undefined","prototype","ofSize","size","getArrayClassForType","fromArray","arrayClass","from","fromArrayBuffer","buffer","getType","getArray","getUsage","getSize","length","Float32Array","Uint32Array"],"sources":["../src/webgl/Buffer.js"],"sourcesContent":[null],"mappings":"AAAA;;;AAGA,SACEA,YAAY,EACZC,YAAY,EACZC,oBAAoB,EACpBC,WAAW,EACXC,WAAW,QACN,aAAa;AACpB,SAAQC,MAAM,QAAO,eAAe;AAEpC;;;;;AAKA,OAAO,IAAMC,WAAW,GAAG;EACzBH,WAAW,EAAEA,WAAW;EACxBC,WAAW,EAAEA,WAAW;EACxBH,YAAY,EAAEA;CACf;AAED;;;;;;;;;;;;;;;;AAgBA,IAAAM,gBAAA;EACE;;;;;EAKA,SAAAA,iBAAYC,IAAI,EAAEC,SAAS;IACzB;;;;IAIA,IAAI,CAACC,KAAK,GAAG,IAAI;IAEjB;;;;IAIA,IAAI,CAACF,IAAI,GAAGA,IAAI;IAEhBH,MAAM,CAACG,IAAI,KAAKR,YAAY,IAAIQ,IAAI,KAAKN,oBAAoB,EAAE,EAAE,CAAC;IAElE;;;;IAIA,IAAI,CAACS,KAAK,GAAGF,SAAS,KAAKG,SAAS,GAAGH,SAAS,GAAGH,WAAW,CAACH,WAAW;EAC5E;EAEA;;;;EAIAI,gBAAA,CAAAM,SAAA,CAAAC,MAAM,GAAN,UAAOC,IAAI;IACT,IAAI,CAACL,KAAK,GAAG,KAAKM,oBAAoB,CAAC,IAAI,CAACR,IAAI,CAAC,EAAEO,IAAI,CAAC;EAC1D,CAAC;EAED;;;;EAIAR,gBAAA,CAAAM,SAAA,CAAAI,SAAS,GAAT,UAAUP,KAAK;IACb,IAAMQ,UAAU,GAAGF,oBAAoB,CAAC,IAAI,CAACR,IAAI,CAAC;IAClD,IAAI,CAACE,KAAK,GAAGQ,UAAU,CAACC,IAAI,GACxBD,UAAU,CAACC,IAAI,CAACT,KAAK,CAAC,GACtB,IAAIQ,UAAU,CAACR,KAAK,CAAC;EAC3B,CAAC;EAED;;;;;EAKAH,gBAAA,CAAAM,SAAA,CAAAO,eAAe,GAAf,UAAgBC,MAAM;IACpB,IAAI,CAACX,KAAK,GAAG,KAAKM,oBAAoB,CAAC,IAAI,CAACR,IAAI,CAAC,EAAEa,MAAM,CAAC;EAC5D,CAAC;EAED;;;EAGAd,gBAAA,CAAAM,SAAA,CAAAS,OAAO,GAAP;IACE,OAAO,IAAI,CAACd,IAAI;EAClB,CAAC;EAED;;;;EAIAD,gBAAA,CAAAM,SAAA,CAAAU,QAAQ,GAAR;IACE,OAAO,IAAI,CAACb,KAAK;EACnB,CAAC;EAED;;;EAGAH,gBAAA,CAAAM,SAAA,CAAAW,QAAQ,GAAR;IACE,OAAO,IAAI,CAACb,KAAK;EACnB,CAAC;EAED;;;;EAIAJ,gBAAA,CAAAM,SAAA,CAAAY,OAAO,GAAP;IACE,OAAO,IAAI,CAACf,KAAK,GAAG,IAAI,CAACA,KAAK,CAACgB,MAAM,GAAG,CAAC;EAC3C,CAAC;EACH,OAAAnB,gBAAC;AAAD,CAAC,CArFD;AAuFA;;;;;AAKA,OAAM,SAAUS,oBAAoBA,CAACR,IAAI;EACvC,QAAQA,IAAI;IACV,KAAKR,YAAY;MACf,OAAO2B,YAAY;IACrB,KAAKzB,oBAAoB;MACvB,OAAO0B,WAAW;IACpB;MACE,OAAOD,YAAY;;AAEzB;AAEA,eAAepB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module"}