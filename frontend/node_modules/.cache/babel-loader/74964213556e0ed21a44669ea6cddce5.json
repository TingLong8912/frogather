{"ast":null,"code":"/**\n * @module ol/source/WMTS\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport TileImage from './TileImage.js';\nimport { appendParams } from '../uri.js';\nimport { assign } from '../obj.js';\nimport { containsExtent } from '../extent.js';\nimport { createFromCapabilitiesMatrixSet } from '../tilegrid/WMTS.js';\nimport { createFromTileUrlFunctions, expandUrl } from '../tileurlfunction.js';\nimport { equivalent, get as getProjection, transformExtent } from '../proj.js';\nimport { find, findIndex, includes } from '../array.js';\n/**\n * Request encoding. One of 'KVP', 'REST'.\n * @typedef {'KVP' | 'REST'} RequestEncoding\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\nvar WMTS = /** @class */function (_super) {\n  __extends(WMTS, _super);\n  /**\n   * @param {Options} options WMTS options.\n   */\n  function WMTS(options) {\n    var _this = this;\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n    // TODO: add support for TileMatrixLimits\n    var requestEncoding = options.requestEncoding !== undefined ? options.requestEncoding : 'KVP';\n    // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n    var tileGrid = options.tileGrid;\n    var urls = options.urls;\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.version_ = options.version !== undefined ? options.version : '1.0.0';\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n    /**\n     * @private\n     * @type {!Object}\n     */\n    _this.dimensions_ = options.dimensions !== undefined ? options.dimensions : {};\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.layer_ = options.layer;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.matrixSet_ = options.matrixSet;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.style_ = options.style;\n    // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n    /**\n     * @private\n     * @type {RequestEncoding}\n     */\n    _this.requestEncoding_ = requestEncoding;\n    _this.setKey(_this.getKeyForDimensions_());\n    if (urls && urls.length > 0) {\n      _this.tileUrlFunction = createFromTileUrlFunctions(urls.map(_this.createFromWMTSTemplate.bind(_this)));\n    }\n    return _this;\n  }\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   */\n  WMTS.prototype.setUrls = function (urls) {\n    this.urls = urls;\n    var key = urls.join('\\n');\n    this.setTileUrlFunction(createFromTileUrlFunctions(urls.map(this.createFromWMTSTemplate.bind(this))), key);\n  };\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n  WMTS.prototype.getDimensions = function () {\n    return this.dimensions_;\n  };\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n  WMTS.prototype.getFormat = function () {\n    return this.format_;\n  };\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n  WMTS.prototype.getLayer = function () {\n    return this.layer_;\n  };\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n  WMTS.prototype.getMatrixSet = function () {\n    return this.matrixSet_;\n  };\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {RequestEncoding} Request encoding.\n   * @api\n   */\n  WMTS.prototype.getRequestEncoding = function () {\n    return this.requestEncoding_;\n  };\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n  WMTS.prototype.getStyle = function () {\n    return this.style_;\n  };\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n  WMTS.prototype.getVersion = function () {\n    return this.version_;\n  };\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n  WMTS.prototype.getKeyForDimensions_ = function () {\n    var i = 0;\n    var res = [];\n    for (var key in this.dimensions_) {\n      res[i++] = key + '-' + this.dimensions_[key];\n    }\n    return res.join('/');\n  };\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n  WMTS.prototype.updateDimensions = function (dimensions) {\n    assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  };\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n  WMTS.prototype.createFromWMTSTemplate = function (template) {\n    var requestEncoding = this.requestEncoding_;\n    // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n    var context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_\n    };\n    if (requestEncoding == 'KVP') {\n      assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_\n      });\n    }\n    // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n    template = requestEncoding == 'KVP' ? appendParams(template, context) : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n      return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n    });\n    var tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */this.tileGrid;\n    var dimensions = this.dimensions_;\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        } else {\n          var localContext_1 = {\n            'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n            'TileCol': tileCoord[1],\n            'TileRow': tileCoord[2]\n          };\n          assign(localContext_1, dimensions);\n          var url = template;\n          if (requestEncoding == 'KVP') {\n            url = appendParams(url, localContext_1);\n          } else {\n            url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n              return localContext_1[p];\n            });\n          }\n          return url;\n        }\n      }\n    );\n  };\n  return WMTS;\n}(TileImage);\nexport default WMTS;\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {Options|null} WMTS source options object or `null` if the layer was not found.\n * @api\n */\nexport function optionsFromCapabilities(wmtsCap, config) {\n  var layers = wmtsCap['Contents']['Layer'];\n  var l = find(layers, function (elt, index, array) {\n    return elt['Identifier'] == config['layer'];\n  });\n  if (l === null) {\n    return null;\n  }\n  var tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  var idx;\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {\n        var tileMatrixSet = find(tileMatrixSets, function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        var supportedCRS = tileMatrixSet['SupportedCRS'];\n        var proj1 = getProjection(supportedCRS);\n        var proj2 = getProjection(config['projection']);\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        } else {\n          return supportedCRS == config['projection'];\n        }\n      });\n    } else {\n      idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n  if (idx < 0) {\n    idx = 0;\n  }\n  var matrixSet = /** @type {string} */\n  l['TileMatrixSetLink'][idx]['TileMatrixSet'];\n  var matrixLimits = /** @type {Array<Object>} */\n  l['TileMatrixSetLink'][idx]['TileMatrixSetLimits'];\n  var format = /** @type {string} */l['Format'][0];\n  if ('format' in config) {\n    format = config['format'];\n  }\n  idx = findIndex(l['Style'], function (elt, index, array) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    } else {\n      return elt['isDefault'];\n    }\n  });\n  if (idx < 0) {\n    idx = 0;\n  }\n  var style = /** @type {string} */l['Style'][idx]['Identifier'];\n  var dimensions = {};\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      var key = elt['Identifier'];\n      var value = elt['Default'];\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n      dimensions[key] = value;\n    });\n  }\n  var matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  var matrixSetObj = find(matrixSets, function (elt, index, array) {\n    return elt['Identifier'] == matrixSet;\n  });\n  var projection;\n  var code = matrixSetObj['SupportedCRS'];\n  if (code) {\n    projection = getProjection(code);\n  }\n  if ('projection' in config) {\n    var projConfig = getProjection(config['projection']);\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n  var wrapX = false;\n  var switchXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n  var matrix = matrixSetObj.TileMatrix[0];\n  // create default matrixLimit\n  var selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // subtract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1\n  };\n  //in case of matrix limits, use matrix limits to calculate extent\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    var m = find(matrixSetObj.TileMatrix, function (tileMatrixValue) {\n      return tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix || matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix;\n    });\n    if (m) {\n      matrix = m;\n    }\n  }\n  var resolution = matrix.ScaleDenominator * 0.00028 / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n  var origin = switchXY ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]] : matrix.TopLeftCorner;\n  var tileSpanX = matrix.TileWidth * resolution;\n  var tileSpanY = matrix.TileHeight * resolution;\n  var matrixSetExtent = matrixSetObj['BoundingBox'];\n  if (matrixSetExtent && switchXY) {\n    matrixSetExtent = [matrixSetExtent[1], matrixSetExtent[0], matrixSetExtent[3], matrixSetExtent[2]];\n  }\n  var extent = [origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n  // add one to get proper bottom/right coordinate\n  origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow), origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol), origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow];\n  if (matrixSetExtent !== undefined && !containsExtent(matrixSetExtent, extent)) {\n    var wgs84BoundingBox = l['WGS84BoundingBox'];\n    var wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n    extent = matrixSetExtent;\n    if (wgs84BoundingBox) {\n      wrapX = wgs84BoundingBox[0] === wgs84ProjectionExtent[0] && wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n    } else {\n      var wgs84MatrixSetExtent = transformExtent(matrixSetExtent, matrixSetObj['SupportedCRS'], 'EPSG:4326');\n      // Ignore slight deviation from the correct x limits\n      wrapX = wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] && wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n    }\n  }\n  var tileGrid = createFromCapabilitiesMatrixSet(matrixSetObj, extent, matrixLimits);\n  /** @type {!Array<string>} */\n  var urls = [];\n  var requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n  if ('OperationsMetadata' in wmtsCap && 'GetTile' in wmtsCap['OperationsMetadata']) {\n    var gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n    for (var i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        var constraint = find(gets[i]['Constraint'], function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        var encodings = constraint['AllowedValues']['Value'];\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n        if (requestEncoding === 'KVP') {\n          if (includes(encodings, 'KVP')) {\n            urls.push(/** @type {string} */gets[i]['href']);\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = 'KVP';\n        urls.push(/** @type {string} */gets[i]['href']);\n      }\n    }\n  }\n  if (urls.length === 0) {\n    requestEncoding = 'REST';\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push(/** @type {string} */element['template']);\n      }\n    });\n  }\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin']\n  };\n}","map":{"version":3,"names":["TileImage","appendParams","assign","containsExtent","createFromCapabilitiesMatrixSet","createFromTileUrlFunctions","expandUrl","equivalent","get","getProjection","transformExtent","find","findIndex","includes","WMTS","_super","__extends","options","_this","interpolate","imageSmoothing","undefined","requestEncoding","tileGrid","urls","url","call","attributions","attributionsCollapsible","cacheSize","crossOrigin","projection","reprojectionErrorThreshold","tileClass","tileLoadFunction","tilePixelRatio","wrapX","transition","zDirection","version_","version","format_","format","dimensions_","dimensions","layer_","layer","matrixSet_","matrixSet","style_","style","requestEncoding_","setKey","getKeyForDimensions_","length","tileUrlFunction","map","createFromWMTSTemplate","bind","prototype","setUrls","key","join","setTileUrlFunction","getDimensions","getFormat","getLayer","getMatrixSet","getRequestEncoding","getStyle","getVersion","i","res","updateDimensions","template","context","replace","m","p","toLowerCase","tileCoord","pixelRatio","localContext_1","getMatrixId","optionsFromCapabilities","wmtsCap","config","layers","l","elt","index","array","tileMatrixSets","idx","tileMatrixSet","el","supportedCRS","proj1","proj2","matrixLimits","forEach","value","matrixSets","matrixSetObj","code","projConfig","switchXY","getAxisOrientation","substr","matrix","TileMatrix","selectedMatrixLimit","MinTileCol","MinTileRow","MaxTileCol","MatrixWidth","MaxTileRow","MatrixHeight","tileMatrixValue","Identifier","resolution","ScaleDenominator","getMetersPerUnit","origin","TopLeftCorner","tileSpanX","TileWidth","tileSpanY","TileHeight","matrixSetExtent","extent","wgs84BoundingBox","wgs84ProjectionExtent","getExtent","wgs84MatrixSetExtent","gets","ii","constraint","element","encodings","push"],"sources":["../src/source/WMTS.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}