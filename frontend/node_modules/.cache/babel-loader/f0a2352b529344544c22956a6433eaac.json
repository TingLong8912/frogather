{"ast":null,"code":"/**\n * @module ol/source/VectorTile\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport EventType from '../events/EventType.js';\nimport Tile from '../VectorTile.js';\nimport TileCache from '../TileCache.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport VectorRenderTile from '../VectorRenderTile.js';\nimport { DEFAULT_MAX_ZOOM } from '../tilegrid/common.js';\nimport { buffer as bufferExtent, getIntersection, intersects } from '../extent.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { fromKey, getCacheKeyForTileKey, getKeyZXY } from '../tilecoord.js';\nimport { isEmpty } from '../obj.js';\nimport { loadFeaturesXhr } from '../featureloader.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least twice the number of tiles in the viewport.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {import(\"../format/Feature.js\").default} [format] Feature format for tiles. Used and required by the default.\n * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this\n * to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../VectorTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/VectorTile~VectorTile}.\n * @property {number} [maxZoom=22] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=512] Optional tile size. Not used if `tileGrid` is provided.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\n * Optional function to load a tile given a URL. Could look like this for pbf tiles:\n * ```js\n * function(tile, url) {\n *   tile.setLoader(function(extent, resolution, projection) {\n *     fetch(url).then(function(response) {\n *       response.arrayBuffer().then(function(data) {\n *         const format = tile.getFormat() // ol/format/MVT configured as source format\n *         const features = format.readFeatures(data, {\n *           extent: extent,\n *           featureProjection: projection\n *         });\n *         tile.setFeatures(features);\n *       });\n *     });\n *   });\n * }\n * ```\n * If you do not need extent, resolution and projection to get the features for a tile (e.g.\n * for GeoJSON tiles), your `tileLoadFunction` does not need a `setLoader()` call. Only make sure\n * to call `setFeatures()` on the tile:\n * ```js\n * const format = new GeoJSON({featureProjection: map.getView().getProjection()});\n * async function tileLoadFunction(tile, url) {\n *   const response = await fetch(url);\n *   const data = await response.json();\n *   tile.setFeatures(format.readFeatures(data));\n * }\n * ```\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {number} [transition] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When set to `true`, tiles will be wrapped horizontally to\n * render multiple worlds.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=1]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n/**\n * @classdesc\n * Class for layer sources providing vector data divided into a tile grid, to be\n * used with {@link module:ol/layer/VectorTile~VectorTileLayer}. Although this source receives tiles\n * with vector features from the server, it is not meant for feature editing.\n * Features are optimized for rendering, their geometries are clipped at or near\n * tile boundaries and simplified for a view resolution. See\n * {@link module:ol/source/Vector~VectorSource} for vector sources that are suitable for feature\n * editing.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nvar VectorTile = /** @class */function (_super) {\n  __extends(VectorTile, _super);\n  /**\n   * @param {!Options} options Vector tile options.\n   */\n  function VectorTile(options) {\n    var _this = this;\n    var projection = options.projection || 'EPSG:3857';\n    var extent = options.extent || extentFromProjection(projection);\n    var tileGrid = options.tileGrid || createXYZ({\n      extent: extent,\n      maxResolution: options.maxResolution,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 22,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize || 512\n    });\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      interpolate: true,\n      opaque: false,\n      projection: projection,\n      state: options.state,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultLoadFunction,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX === undefined ? true : options.wrapX,\n      transition: options.transition,\n      zDirection: options.zDirection === undefined ? 1 : options.zDirection\n    }) || this;\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|null}\n     */\n    _this.format_ = options.format ? options.format : null;\n    /**\n     * @private\n     * @type {TileCache}\n     */\n    _this.sourceTileCache = new TileCache(_this.tileCache.highWaterMark);\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n    /**\n     * @protected\n     * @type {typeof import(\"../VectorTile.js\").default}\n     */\n    _this.tileClass = options.tileClass ? options.tileClass : Tile;\n    /**\n     * @private\n     * @type {Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    _this.tileGrids_ = {};\n    return _this;\n  }\n  /**\n   * Get features whose bounding box intersects the provided extent. Only features for cached\n   * tiles for the last rendered zoom level are available in the source. So this method is only\n   * suitable for requesting tiles for extents that are currently rendered.\n   *\n   * Features are returned in random tile order and as they are included in the tiles. This means\n   * they can be clipped, duplicated across tiles, and simplified to the render resolution.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   * @api\n   */\n  VectorTile.prototype.getFeaturesInExtent = function (extent) {\n    var features = [];\n    var tileCache = this.tileCache;\n    if (tileCache.getCount() === 0) {\n      return features;\n    }\n    var z = fromKey(tileCache.peekFirstKey())[0];\n    var tileGrid = this.tileGrid;\n    tileCache.forEach(function (tile) {\n      if (tile.tileCoord[0] !== z || tile.getState() !== TileState.LOADED) {\n        return;\n      }\n      var sourceTiles = tile.getSourceTiles();\n      for (var i = 0, ii = sourceTiles.length; i < ii; ++i) {\n        var sourceTile = sourceTiles[i];\n        var tileCoord = sourceTile.tileCoord;\n        if (intersects(extent, tileGrid.getTileCoordExtent(tileCoord))) {\n          var tileFeatures = sourceTile.getFeatures();\n          if (tileFeatures) {\n            for (var j = 0, jj = tileFeatures.length; j < jj; ++j) {\n              var candidate = tileFeatures[j];\n              var geometry = candidate.getGeometry();\n              if (intersects(extent, geometry.getExtent())) {\n                features.push(candidate);\n              }\n            }\n          }\n        }\n      }\n    });\n    return features;\n  };\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  VectorTile.prototype.getOverlaps = function () {\n    return this.overlaps_;\n  };\n  /**\n   * clear {@link module:ol/TileCache~TileCache} and delete all source tiles\n   * @api\n   */\n  VectorTile.prototype.clear = function () {\n    this.tileCache.clear();\n    this.sourceTileCache.clear();\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  VectorTile.prototype.expireCache = function (projection, usedTiles) {\n    var tileCache = this.getTileCacheForProjection(projection);\n    var usedSourceTiles = Object.keys(usedTiles).reduce(function (acc, key) {\n      var cacheKey = getCacheKeyForTileKey(key);\n      var tile = tileCache.peek(cacheKey);\n      if (tile) {\n        var sourceTiles = tile.sourceTiles;\n        for (var i = 0, ii = sourceTiles.length; i < ii; ++i) {\n          acc[sourceTiles[i].getKey()] = true;\n        }\n      }\n      return acc;\n    }, {});\n    _super.prototype.expireCache.call(this, projection, usedTiles);\n    this.sourceTileCache.expireCache(usedSourceTiles);\n  };\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection\").default} projection Projection.\n   * @param {VectorRenderTile} tile Vector image tile.\n   * @return {Array<import(\"../VectorTile\").default>} Tile keys.\n   */\n  VectorTile.prototype.getSourceTiles = function (pixelRatio, projection, tile) {\n    var _this = this;\n    if (tile.getState() === TileState.IDLE) {\n      tile.setState(TileState.LOADING);\n      var urlTileCoord = tile.wrappedTileCoord;\n      var tileGrid = this.getTileGridForProjection(projection);\n      var extent = tileGrid.getTileCoordExtent(urlTileCoord);\n      var z = urlTileCoord[0];\n      var resolution = tileGrid.getResolution(z);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      bufferExtent(extent, -resolution, extent);\n      var sourceTileGrid_1 = this.tileGrid;\n      var sourceExtent = sourceTileGrid_1.getExtent();\n      if (sourceExtent) {\n        getIntersection(extent, sourceExtent, extent);\n      }\n      var sourceZ = sourceTileGrid_1.getZForResolution(resolution, this.zDirection);\n      sourceTileGrid_1.forEachTileCoord(extent, sourceZ, function (sourceTileCoord) {\n        var tileUrl = _this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);\n        var sourceTile = _this.sourceTileCache.containsKey(tileUrl) ? _this.sourceTileCache.get(tileUrl) : new _this.tileClass(sourceTileCoord, tileUrl ? TileState.IDLE : TileState.EMPTY, tileUrl, _this.format_, _this.tileLoadFunction);\n        tile.sourceTiles.push(sourceTile);\n        var sourceTileState = sourceTile.getState();\n        if (sourceTileState < TileState.LOADED) {\n          var listenChange_1 = function (event) {\n            _this.handleTileChange(event);\n            var state = sourceTile.getState();\n            if (state === TileState.LOADED || state === TileState.ERROR) {\n              var sourceTileKey = sourceTile.getKey();\n              if (sourceTileKey in tile.errorTileKeys) {\n                if (sourceTile.getState() === TileState.LOADED) {\n                  delete tile.errorTileKeys[sourceTileKey];\n                }\n              } else {\n                tile.loadingSourceTiles--;\n              }\n              if (state === TileState.ERROR) {\n                tile.errorTileKeys[sourceTileKey] = true;\n              } else {\n                sourceTile.removeEventListener(EventType.CHANGE, listenChange_1);\n              }\n              if (tile.loadingSourceTiles === 0) {\n                tile.setState(isEmpty(tile.errorTileKeys) ? TileState.LOADED : TileState.ERROR);\n              }\n            }\n          };\n          sourceTile.addEventListener(EventType.CHANGE, listenChange_1);\n          tile.loadingSourceTiles++;\n        }\n        if (sourceTileState === TileState.IDLE) {\n          sourceTile.extent = sourceTileGrid_1.getTileCoordExtent(sourceTileCoord);\n          sourceTile.projection = projection;\n          sourceTile.resolution = sourceTileGrid_1.getResolution(sourceTileCoord[0]);\n          _this.sourceTileCache.set(tileUrl, sourceTile);\n          sourceTile.load();\n        }\n      });\n      if (!tile.loadingSourceTiles) {\n        tile.setState(tile.sourceTiles.some(function (sourceTile) {\n          return sourceTile.getState() === TileState.ERROR;\n        }) ? TileState.ERROR : TileState.LOADED);\n      }\n    }\n    return tile.sourceTiles;\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!VectorRenderTile} Tile.\n   */\n  VectorTile.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    var coordKey = getKeyZXY(z, x, y);\n    var key = this.getKey();\n    var tile;\n    if (this.tileCache.containsKey(coordKey)) {\n      tile = this.tileCache.get(coordKey);\n      if (tile.key === key) {\n        return tile;\n      }\n    }\n    var tileCoord = [z, x, y];\n    var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    var sourceExtent = this.getTileGrid().getExtent();\n    var tileGrid = this.getTileGridForProjection(projection);\n    if (urlTileCoord && sourceExtent) {\n      var tileExtent = tileGrid.getTileCoordExtent(urlTileCoord);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      bufferExtent(tileExtent, -tileGrid.getResolution(z), tileExtent);\n      if (!intersects(sourceExtent, tileExtent)) {\n        urlTileCoord = null;\n      }\n    }\n    var empty = true;\n    if (urlTileCoord !== null) {\n      var sourceTileGrid = this.tileGrid;\n      var resolution = tileGrid.getResolution(z);\n      var sourceZ = sourceTileGrid.getZForResolution(resolution, 1);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      var extent = tileGrid.getTileCoordExtent(urlTileCoord);\n      bufferExtent(extent, -resolution, extent);\n      sourceTileGrid.forEachTileCoord(extent, sourceZ, function (sourceTileCoord) {\n        empty = empty && !this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);\n      }.bind(this));\n    }\n    var newTile = new VectorRenderTile(tileCoord, empty ? TileState.EMPTY : TileState.IDLE, urlTileCoord, this.getSourceTiles.bind(this, pixelRatio, projection));\n    newTile.key = key;\n    if (tile) {\n      newTile.interimTile = tile;\n      newTile.refreshInterimChain();\n      this.tileCache.replace(coordKey, newTile);\n    } else {\n      this.tileCache.set(coordKey, newTile);\n    }\n    return newTile;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  VectorTile.prototype.getTileGridForProjection = function (projection) {\n    var code = projection.getCode();\n    var tileGrid = this.tileGrids_[code];\n    if (!tileGrid) {\n      // A tile grid that matches the tile size of the source tile grid is more\n      // likely to have 1:1 relationships between source tiles and rendered tiles.\n      var sourceTileGrid_2 = this.tileGrid;\n      var resolutions = sourceTileGrid_2.getResolutions().slice();\n      var origins = resolutions.map(function (resolution, z) {\n        return sourceTileGrid_2.getOrigin(z);\n      });\n      var tileSizes = resolutions.map(function (resolution, z) {\n        return sourceTileGrid_2.getTileSize(z);\n      });\n      var length_1 = DEFAULT_MAX_ZOOM + 1;\n      for (var z = resolutions.length; z < length_1; ++z) {\n        resolutions.push(resolutions[z - 1] / 2);\n        origins.push(origins[z - 1]);\n        tileSizes.push(tileSizes[z - 1]);\n      }\n      tileGrid = new TileGrid({\n        extent: sourceTileGrid_2.getExtent(),\n        origins: origins,\n        resolutions: resolutions,\n        tileSizes: tileSizes\n      });\n      this.tileGrids_[code] = tileGrid;\n    }\n    return tileGrid;\n  };\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  VectorTile.prototype.getTilePixelRatio = function (pixelRatio) {\n    return pixelRatio;\n  };\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  VectorTile.prototype.getTilePixelSize = function (z, pixelRatio, projection) {\n    var tileGrid = this.getTileGridForProjection(projection);\n    var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    return [Math.round(tileSize[0] * pixelRatio), Math.round(tileSize[1] * pixelRatio)];\n  };\n  /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  VectorTile.prototype.updateCacheSize = function (tileCount, projection) {\n    _super.prototype.updateCacheSize.call(this, tileCount * 2, projection);\n    this.sourceTileCache.highWaterMark = this.getTileCacheForProjection(projection).highWaterMark;\n  };\n  return VectorTile;\n}(UrlTile);\nexport default VectorTile;\n/**\n * Sets the loader for a tile.\n * @param {import(\"../VectorTile.js\").default} tile Vector tile.\n * @param {string} url URL.\n */\nexport function defaultLoadFunction(tile, url) {\n  tile.setLoader(\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  function (extent, resolution, projection) {\n    loadFeaturesXhr(url, tile.getFormat(), extent, resolution, projection, tile.onLoad.bind(tile), tile.onError.bind(tile));\n  });\n}","map":{"version":3,"names":["EventType","Tile","TileCache","TileGrid","TileState","UrlTile","VectorRenderTile","DEFAULT_MAX_ZOOM","buffer","bufferExtent","getIntersection","intersects","createXYZ","extentFromProjection","fromKey","getCacheKeyForTileKey","getKeyZXY","isEmpty","loadFeaturesXhr","toSize","VectorTile","_super","__extends","options","_this","projection","extent","tileGrid","maxResolution","maxZoom","undefined","minZoom","tileSize","call","attributions","attributionsCollapsible","cacheSize","interpolate","opaque","state","tileLoadFunction","defaultLoadFunction","tileUrlFunction","url","urls","wrapX","transition","zDirection","format_","format","sourceTileCache","tileCache","highWaterMark","overlaps_","overlaps","tileClass","tileGrids_","prototype","getFeaturesInExtent","features","getCount","z","peekFirstKey","forEach","tile","tileCoord","getState","LOADED","sourceTiles","getSourceTiles","i","ii","length","sourceTile","getTileCoordExtent","tileFeatures","getFeatures","j","jj","candidate","geometry","getGeometry","getExtent","push","getOverlaps","clear","expireCache","usedTiles","getTileCacheForProjection","usedSourceTiles","Object","keys","reduce","acc","key","cacheKey","peek","getKey","pixelRatio","IDLE","setState","LOADING","urlTileCoord","wrappedTileCoord","getTileGridForProjection","resolution","getResolution","sourceTileGrid_1","sourceExtent","sourceZ","getZForResolution","forEachTileCoord","sourceTileCoord","tileUrl","containsKey","get","EMPTY","sourceTileState","listenChange_1","event","handleTileChange","ERROR","sourceTileKey","errorTileKeys","loadingSourceTiles","removeEventListener","CHANGE","addEventListener","set","load","some","getTile","x","y","coordKey","getTileCoordForTileUrlFunction","getTileGrid","tileExtent","empty","sourceTileGrid","bind","newTile","interimTile","refreshInterimChain","replace","code","getCode","sourceTileGrid_2","resolutions","getResolutions","slice","origins","map","getOrigin","tileSizes","getTileSize","length_1","getTilePixelRatio","getTilePixelSize","tmpSize","Math","round","updateCacheSize","tileCount","setLoader","getFormat","onLoad","onError"],"sources":["../src/source/VectorTile.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}