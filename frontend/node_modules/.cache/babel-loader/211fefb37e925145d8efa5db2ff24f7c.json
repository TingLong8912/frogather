{"ast":null,"code":"/**\n * @module ol/source/ImageMapGuide\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport { appendParams } from '../uri.js';\nimport { assign } from '../obj.js';\nimport { containsExtent, getCenter, getHeight, getWidth, scaleFromCenter } from '../extent.js';\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object} [params] Additional parameters.\n */\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nvar ImageMapGuide = /** @class */function (_super) {\n  __extends(ImageMapGuide, _super);\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n  function ImageMapGuide(options) {\n    var _this = this;\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n    _this = _super.call(this, {\n      interpolate: interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    }) || this;\n    /**\n     * @private\n     * @type {?string}\n     */\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.displayDpi_ = options.displayDpi !== undefined ? options.displayDpi : 96;\n    /**\n     * @private\n     * @type {!Object}\n     */\n    _this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    _this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    _this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.metersPerUnit_ = options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.useOverlay_ = options.useOverlay !== undefined ? options.useOverlay : false;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    _this.image_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRevision_ = 0;\n    return _this;\n  }\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  ImageMapGuide.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  ImageMapGuide.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n    var image = this.image_;\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), extent)) {\n      return image;\n    }\n    if (this.ratio_ != 1) {\n      extent = extent.slice();\n      scaleFromCenter(extent, this.ratio_);\n    }\n    var width = getWidth(extent) / resolution;\n    var height = getHeight(extent) / resolution;\n    var size = [width * pixelRatio, height * pixelRatio];\n    if (this.url_ !== undefined) {\n      var imageUrl = this.getUrl(this.url_, this.params_, extent, size, projection);\n      image = new ImageWrapper(extent, resolution, pixelRatio, imageUrl, this.crossOrigin_, this.imageLoadFunction_);\n      image.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    } else {\n      image = null;\n    }\n    this.image_ = image;\n    this.renderedRevision_ = this.getRevision();\n    return image;\n  };\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  ImageMapGuide.prototype.getImageLoadFunction = function () {\n    return this.imageLoadFunction_;\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  ImageMapGuide.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.changed();\n  };\n  /**\n   * @param {string} baseUrl The mapagent url.\n   * @param {Object<string, string|number>} params Request parameters.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string} The mapagent map image request URL.\n   */\n  ImageMapGuide.prototype.getUrl = function (baseUrl, params, extent, size, projection) {\n    var scale = getScale(extent, size, this.metersPerUnit_, this.displayDpi_);\n    var center = getCenter(extent);\n    var baseParams = {\n      'OPERATION': this.useOverlay_ ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n      'VERSION': '2.0.0',\n      'LOCALE': 'en',\n      'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n      'CLIP': '1',\n      'SETDISPLAYDPI': this.displayDpi_,\n      'SETDISPLAYWIDTH': Math.round(size[0]),\n      'SETDISPLAYHEIGHT': Math.round(size[1]),\n      'SETVIEWSCALE': scale,\n      'SETVIEWCENTERX': center[0],\n      'SETVIEWCENTERY': center[1]\n    };\n    assign(baseParams, params);\n    return appendParams(baseUrl, baseParams);\n  };\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  ImageMapGuide.prototype.setImageLoadFunction = function (imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n  return ImageMapGuide;\n}(ImageSource);\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  var mcsW = getWidth(extent);\n  var mcsH = getHeight(extent);\n  var devW = size[0];\n  var devH = size[1];\n  var mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return mcsW * metersPerUnit / (devW * mpp); // width limited\n  } else {\n    return mcsH * metersPerUnit / (devH * mpp); // height limited\n  }\n}\nexport default ImageMapGuide;","map":{"version":3,"names":["EventType","ImageSource","defaultImageLoadFunction","ImageWrapper","appendParams","assign","containsExtent","getCenter","getHeight","getWidth","scaleFromCenter","ImageMapGuide","_super","__extends","options","_this","interpolate","imageSmoothing","undefined","call","projection","resolutions","crossOrigin_","crossOrigin","displayDpi_","displayDpi","params_","params","url_","url","imageLoadFunction_","imageLoadFunction","hidpi_","hidpi","metersPerUnit_","metersPerUnit","ratio_","ratio","useOverlay_","useOverlay","image_","renderedRevision_","prototype","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","getExtent","slice","width","height","size","imageUrl","getUrl","addEventListener","CHANGE","handleImageChange","bind","getImageLoadFunction","updateParams","changed","baseUrl","scale","getScale","center","baseParams","Math","round","setImageLoadFunction","dpi","mcsW","mcsH","devW","devH","mpp"],"sources":["../src/source/ImageMapGuide.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}