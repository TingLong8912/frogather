{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Raster\n */\nimport Disposable from '../Disposable.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageLayer from '../layer/Image.js';\nimport ImageSource from './Image.js';\nimport Source from './Source.js';\nimport TileLayer from '../layer/Tile.js';\nimport TileQueue from '../TileQueue.js';\nimport TileSource from './Tile.js';\nimport { assign } from '../obj.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { create as createTransform } from '../transform.js';\nimport { equals, getCenter, getHeight, getWidth } from '../extent.js';\nimport { getUid } from '../util.js';\nvar hasImageData = true;\ntry {\n  new ImageData(10, 10);\n} catch (_) {\n  hasImageData = false;\n}\n/** @type {CanvasRenderingContext2D} */\nvar context;\n/**\n * @param {Uint8ClampedArray} data Image data.\n * @param {number} width Number of columns.\n * @param {number} height Number of rows.\n * @return {ImageData} Image data.\n */\nexport function newImageData(data, width, height) {\n  if (hasImageData) {\n    return new ImageData(data, width, height);\n  }\n  if (!context) {\n    context = document.createElement('canvas').getContext('2d');\n  }\n  var imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  return imageData;\n}\n/**\n * @typedef {Object} MinionData\n * @property {Array<ArrayBuffer>} buffers Array of buffers.\n * @property {Object} meta Operation metadata.\n * @property {boolean} imageOps The operation is an image operation.\n * @property {number} width The width of the image.\n * @property {number} height The height of the image.\n */\n/* istanbul ignore next */\n/**\n * Create a function for running operations.  This function is serialized for\n * use in a worker.\n * @param {function(Array, Object):*} operation The operation.\n * @return {function(MinionData):ArrayBuffer} A function that takes an object with\n * buffers, meta, imageOps, width, and height properties and returns an array\n * buffer.\n */\nfunction createMinion(operation) {\n  var workerHasImageData = true;\n  try {\n    new ImageData(10, 10);\n  } catch (_) {\n    workerHasImageData = false;\n  }\n  function newWorkerImageData(data, width, height) {\n    if (workerHasImageData) {\n      return new ImageData(data, width, height);\n    } else {\n      return {\n        data: data,\n        width: width,\n        height: height\n      };\n    }\n  }\n  return function (data) {\n    // bracket notation for minification support\n    var buffers = data['buffers'];\n    var meta = data['meta'];\n    var imageOps = data['imageOps'];\n    var width = data['width'];\n    var height = data['height'];\n    var numBuffers = buffers.length;\n    var numBytes = buffers[0].byteLength;\n    if (imageOps) {\n      var images = new Array(numBuffers);\n      for (var b = 0; b < numBuffers; ++b) {\n        images[b] = newWorkerImageData(new Uint8ClampedArray(buffers[b]), width, height);\n      }\n      var output_1 = operation(images, meta).data;\n      return output_1.buffer;\n    }\n    var output = new Uint8ClampedArray(numBytes);\n    var arrays = new Array(numBuffers);\n    var pixels = new Array(numBuffers);\n    for (var b = 0; b < numBuffers; ++b) {\n      arrays[b] = new Uint8ClampedArray(buffers[b]);\n      pixels[b] = [0, 0, 0, 0];\n    }\n    for (var i = 0; i < numBytes; i += 4) {\n      for (var j = 0; j < numBuffers; ++j) {\n        var array = arrays[j];\n        pixels[j][0] = array[i];\n        pixels[j][1] = array[i + 1];\n        pixels[j][2] = array[i + 2];\n        pixels[j][3] = array[i + 3];\n      }\n      var pixel = operation(pixels, meta);\n      output[i] = pixel[0];\n      output[i + 1] = pixel[1];\n      output[i + 2] = pixel[2];\n      output[i + 3] = pixel[3];\n    }\n    return output.buffer;\n  };\n}\n/**\n * Create a worker for running operations.\n * @param {ProcessorOptions} config Processor options.\n * @param {function(MessageEvent): void} onMessage Called with a message event.\n * @return {Worker} The worker.\n */\nfunction createWorker(config, onMessage) {\n  var lib = Object.keys(config.lib || {}).map(function (name) {\n    return 'var ' + name + ' = ' + config.lib[name].toString() + ';';\n  });\n  var lines = lib.concat(['var __minion__ = (' + createMinion.toString() + ')(', config.operation.toString(), ');', 'self.addEventListener(\"message\", function(event) {', '  var buffer = __minion__(event.data);', '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);', '});']);\n  var worker = new Worker(typeof Blob === 'undefined' ? 'data:text/javascript;base64,' + Buffer.from(lines.join('\\n'), 'binary').toString('base64') : URL.createObjectURL(new Blob(lines, {\n    type: 'text/javascript'\n  })));\n  worker.addEventListener('message', onMessage);\n  return worker;\n}\n/**\n * @typedef {Object} FauxMessageEvent\n * @property {Object} data Message data.\n */\n/**\n * Create a faux worker for running operations.\n * @param {ProcessorOptions} config Configuration.\n * @param {function(FauxMessageEvent): void} onMessage Called with a message event.\n * @return {Object} The faux worker.\n */\nfunction createFauxWorker(config, onMessage) {\n  var minion = createMinion(config.operation);\n  var terminated = false;\n  return {\n    postMessage: function (data) {\n      setTimeout(function () {\n        if (terminated) {\n          return;\n        }\n        onMessage({\n          data: {\n            buffer: minion(data),\n            meta: data['meta']\n          }\n        });\n      }, 0);\n    },\n    terminate: function () {\n      terminated = true;\n    }\n  };\n}\n/**\n * @typedef {function(Error, ImageData, (Object|Array<Object>)): void} JobCallback\n */\n/**\n * @typedef {Object} Job\n * @property {Object} meta Job metadata.\n * @property {Array<ImageData>} inputs Array of input data.\n * @property {JobCallback} callback Called when the job is complete.\n */\n/**\n * @typedef {Object} ProcessorOptions\n * @property {number} threads Number of workers to spawn.\n * @property {Operation} operation The operation.\n * @property {Object<string, Function>} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} queue The number of queued jobs to allow.\n * @property {boolean} [imageOps=false] Pass all the image data to the operation instead of a single pixel.\n */\n/**\n * @classdesc\n * A processor runs pixel or image operations in workers.\n */\nvar Processor = /** @class */function (_super) {\n  __extends(Processor, _super);\n  /**\n   * @param {ProcessorOptions} config Configuration.\n   */\n  function Processor(config) {\n    var _this = _super.call(this) || this;\n    _this._imageOps = !!config.imageOps;\n    var threads;\n    if (config.threads === 0) {\n      threads = 0;\n    } else if (_this._imageOps) {\n      threads = 1;\n    } else {\n      threads = config.threads || 1;\n    }\n    /**\n     * @type {Array<Worker>}\n     */\n    var workers = new Array(threads);\n    if (threads) {\n      for (var i = 0; i < threads; ++i) {\n        workers[i] = createWorker(config, _this._onWorkerMessage.bind(_this, i));\n      }\n    } else {\n      workers[0] = createFauxWorker(config, _this._onWorkerMessage.bind(_this, 0));\n    }\n    _this._workers = workers;\n    /**\n     * @type {Array<Job>}\n     * @private\n     */\n    _this._queue = [];\n    _this._maxQueueLength = config.queue || Infinity;\n    _this._running = 0;\n    /**\n     * @type {Object<number, any>}\n     * @private\n     */\n    _this._dataLookup = {};\n    /**\n     * @type {Job}\n     * @private\n     */\n    _this._job = null;\n    return _this;\n  }\n  /**\n   * Run operation on input data.\n   * @param {Array<ImageData>} inputs Array of image data.\n   * @param {Object} meta A user data object.  This is passed to all operations\n   *     and must be serializable.\n   * @param {function(Error, ImageData, Object): void} callback Called when work\n   *     completes.  The first argument is any error.  The second is the ImageData\n   *     generated by operations.  The third is the user data object.\n   */\n  Processor.prototype.process = function (inputs, meta, callback) {\n    this._enqueue({\n      inputs: inputs,\n      meta: meta,\n      callback: callback\n    });\n    this._dispatch();\n  };\n  /**\n   * Add a job to the queue.\n   * @param {Job} job The job.\n   */\n  Processor.prototype._enqueue = function (job) {\n    this._queue.push(job);\n    while (this._queue.length > this._maxQueueLength) {\n      this._queue.shift().callback(null, null);\n    }\n  };\n  /**\n   * Dispatch a job.\n   */\n  Processor.prototype._dispatch = function () {\n    if (this._running || this._queue.length === 0) {\n      return;\n    }\n    var job = this._queue.shift();\n    this._job = job;\n    var width = job.inputs[0].width;\n    var height = job.inputs[0].height;\n    var buffers = job.inputs.map(function (input) {\n      return input.data.buffer;\n    });\n    var threads = this._workers.length;\n    this._running = threads;\n    if (threads === 1) {\n      this._workers[0].postMessage({\n        buffers: buffers,\n        meta: job.meta,\n        imageOps: this._imageOps,\n        width: width,\n        height: height\n      }, buffers);\n      return;\n    }\n    var length = job.inputs[0].data.length;\n    var segmentLength = 4 * Math.ceil(length / 4 / threads);\n    for (var i = 0; i < threads; ++i) {\n      var offset = i * segmentLength;\n      var slices = [];\n      for (var j = 0, jj = buffers.length; j < jj; ++j) {\n        slices.push(buffers[j].slice(offset, offset + segmentLength));\n      }\n      this._workers[i].postMessage({\n        buffers: slices,\n        meta: job.meta,\n        imageOps: this._imageOps,\n        width: width,\n        height: height\n      }, slices);\n    }\n  };\n  /**\n   * Handle messages from the worker.\n   * @param {number} index The worker index.\n   * @param {MessageEvent} event The message event.\n   */\n  Processor.prototype._onWorkerMessage = function (index, event) {\n    if (this.disposed) {\n      return;\n    }\n    this._dataLookup[index] = event.data;\n    --this._running;\n    if (this._running === 0) {\n      this._resolveJob();\n    }\n  };\n  /**\n   * Resolve a job.  If there are no more worker threads, the processor callback\n   * will be called.\n   */\n  Processor.prototype._resolveJob = function () {\n    var job = this._job;\n    var threads = this._workers.length;\n    var data, meta;\n    if (threads === 1) {\n      data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);\n      meta = this._dataLookup[0]['meta'];\n    } else {\n      var length_1 = job.inputs[0].data.length;\n      data = new Uint8ClampedArray(length_1);\n      meta = new Array(threads);\n      var segmentLength = 4 * Math.ceil(length_1 / 4 / threads);\n      for (var i = 0; i < threads; ++i) {\n        var buffer = this._dataLookup[i]['buffer'];\n        var offset = i * segmentLength;\n        data.set(new Uint8ClampedArray(buffer), offset);\n        meta[i] = this._dataLookup[i]['meta'];\n      }\n    }\n    this._job = null;\n    this._dataLookup = {};\n    job.callback(null, newImageData(data, job.inputs[0].width, job.inputs[0].height), meta);\n    this._dispatch();\n  };\n  /**\n   * Terminate all workers associated with the processor.\n   */\n  Processor.prototype.disposeInternal = function () {\n    for (var i = 0; i < this._workers.length; ++i) {\n      this._workers[i].terminate();\n    }\n    this._workers.length = 0;\n  };\n  return Processor;\n}(Disposable);\nexport { Processor };\n/**\n * A function that takes an array of input data, performs some operation, and\n * returns an array of output data.\n * For `pixel` type operations, the function will be called with an array of\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\n * range of 0 - 255. It should return a single pixel array.\n * For `'image'` type operations, functions will be called with an array of\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)\n * and should return a single\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).\n * The operations\n * are called with a second \"data\" argument, which can be used for storage.  The\n * data object is accessible from raster events, where it can be initialized in\n * \"beforeoperations\" and accessed again in \"afteroperations\".\n *\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\n *     (Array<number>|ImageData)} Operation\n */\n/**\n * @enum {string}\n */\nvar RasterEventType = {\n  /**\n   * Triggered before operations are run.  Listeners will receive an event object with\n   * a `data` property that can be used to make data available to operations.\n   * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations\n   * @api\n   */\n  BEFOREOPERATIONS: 'beforeoperations',\n  /**\n   * Triggered after operations are run.  Listeners will receive an event object with\n   * a `data` property.  If more than one thread is used, `data` will be an array of\n   * objects.  If a single thread is used, `data` will be a single object.\n   * @event module:ol/source/Raster.RasterSourceEvent#afteroperations\n   * @api\n   */\n  AFTEROPERATIONS: 'afteroperations'\n};\n/**\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\n * @enum {string}\n */\nvar RasterOperationType = {\n  PIXEL: 'pixel',\n  IMAGE: 'image'\n};\n/**\n * @typedef {import(\"./Image.js\").ImageSourceEventTypes|'beforeoperations'|'afteroperations'} RasterSourceEventTypes\n */\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Raster~RasterSource} instances are instances of this\n * type.\n */\nvar RasterSourceEvent = /** @class */function (_super) {\n  __extends(RasterSourceEvent, _super);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n   * @param {Object|Array<Object>} data An object made available to operations.  For \"afteroperations\" evenets\n   * this will be an array of objects if more than one thread is used.\n   */\n  function RasterSourceEvent(type, frameState, data) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The raster extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    _this.extent = frameState.extent;\n    /**\n     * The pixel resolution (map units per pixel).\n     * @type {number}\n     * @api\n     */\n    _this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\n    /**\n     * An object made available to all operations.  This can be used by operations\n     * as a storage object (e.g. for calculating statistics).\n     * @type {Object}\n     * @api\n     */\n    _this.data = data;\n    return _this;\n  }\n  return RasterSourceEvent;\n}(Event);\nexport { RasterSourceEvent };\n/**\n * @typedef {Object} Options\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\n * sources or layers.  For vector data, use an VectorImage layer.\n * @property {Operation} [operation] Raster operation.\n * The operation will be called with data from input sources\n * and the output will be assigned to the raster source.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} [threads] By default, operations will be run in a single worker thread.\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\n * be run in multiple worker threads.  Note that there is additional overhead in\n * transferring data to multiple workers, and that depending on the user's\n * system, it may not be possible to parallelize the work.\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\n * Supported values are `'pixel'` and `'image'`.  By default,\n * `'pixel'` operations are assumed, and operations will be called with an\n * array of pixels from input sources.  If set to `'image'`, operations will\n * be called with an array of ImageData objects from input sources.\n */\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Image.js\").ImageSourceEventTypes, import(\"./Image.js\").ImageSourceEvent, Return> &\n *   import(\"../Observable\").OnSignature<RasterSourceEventTypes, RasterSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |RasterSourceEventTypes, Return>} RasterSourceOnSignature\n */\n/**\n * @classdesc\n * A source that transforms data from any number of input sources using an\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\n * output pixel values.\n *\n * @fires module:ol/source/Raster.RasterSourceEvent\n * @api\n */\nvar RasterSource = /** @class */function (_super) {\n  __extends(RasterSource, _super);\n  /**\n   * @param {Options} options Options.\n   */\n  function RasterSource(options) {\n    var _this = _super.call(this, {\n      projection: null\n    }) || this;\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {RasterSourceOnSignature<void>}\n     */\n    _this.un;\n    /**\n     * @private\n     * @type {Processor}\n     */\n    _this.processor_ = null;\n    /**\n     * @private\n     * @type {RasterOperationType}\n     */\n    _this.operationType_ = options.operationType !== undefined ? options.operationType : RasterOperationType.PIXEL;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.threads_ = options.threads !== undefined ? options.threads : 1;\n    /**\n     * @private\n     * @type {Array<import(\"../layer/Layer.js\").default>}\n     */\n    _this.layers_ = createLayers(options.sources);\n    var changed = _this.changed.bind(_this);\n    for (var i = 0, ii = _this.layers_.length; i < ii; ++i) {\n      _this.layers_[i].addEventListener(EventType.CHANGE, changed);\n    }\n    /**\n     * @private\n     * @type {import(\"../TileQueue.js\").default}\n     */\n    _this.tileQueue_ = new TileQueue(function () {\n      return 1;\n    }, _this.changed.bind(_this));\n    /**\n     * The most recently requested frame state.\n     * @type {import(\"../PluggableMap.js\").FrameState}\n     * @private\n     */\n    _this.requestedFrameState_;\n    /**\n     * The most recently rendered image canvas.\n     * @type {import(\"../ImageCanvas.js\").default}\n     * @private\n     */\n    _this.renderedImageCanvas_ = null;\n    /**\n     * The most recently rendered revision.\n     * @type {number}\n     */\n    _this.renderedRevision_;\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").FrameState}\n     */\n    _this.frameState_ = {\n      animate: false,\n      coordinateToPixelTransform: createTransform(),\n      declutterTree: null,\n      extent: null,\n      index: 0,\n      layerIndex: 0,\n      layerStatesArray: getLayerStatesArray(_this.layers_),\n      pixelRatio: 1,\n      pixelToCoordinateTransform: createTransform(),\n      postRenderFunctions: [],\n      size: [0, 0],\n      tileQueue: _this.tileQueue_,\n      time: Date.now(),\n      usedTiles: {},\n      viewState: (/** @type {import(\"../View.js\").State} */{\n        rotation: 0\n      }),\n      viewHints: [],\n      wantedTiles: {},\n      mapId: getUid(_this),\n      renderTargets: {}\n    };\n    _this.setAttributions(function (frameState) {\n      var attributions = [];\n      for (var index = 0, iMax = options.sources.length; index < iMax; ++index) {\n        var sourceOrLayer = options.sources[index];\n        var source = sourceOrLayer instanceof Source ? sourceOrLayer : sourceOrLayer.getSource();\n        var attributionGetter = source.getAttributions();\n        if (typeof attributionGetter === 'function') {\n          var sourceAttribution = attributionGetter(frameState);\n          attributions.push.apply(attributions, sourceAttribution);\n        }\n      }\n      return attributions.length !== 0 ? attributions : null;\n    });\n    if (options.operation !== undefined) {\n      _this.setOperation(options.operation, options.lib);\n    }\n    return _this;\n  }\n  /**\n   * Set the operation.\n   * @param {Operation} operation New operation.\n   * @param {Object} [opt_lib] Functions that will be available to operations run\n   *     in a worker.\n   * @api\n   */\n  RasterSource.prototype.setOperation = function (operation, opt_lib) {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n    this.processor_ = new Processor({\n      operation: operation,\n      imageOps: this.operationType_ === RasterOperationType.IMAGE,\n      queue: 1,\n      lib: opt_lib,\n      threads: this.threads_\n    });\n    this.changed();\n  };\n  /**\n   * Update the stored frame state.\n   * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\n   * @param {number} resolution The view resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n   * @return {import(\"../PluggableMap.js\").FrameState} The updated frame state.\n   * @private\n   */\n  RasterSource.prototype.updateFrameState_ = function (extent, resolution, projection) {\n    var frameState = /** @type {import(\"../PluggableMap.js\").FrameState} */assign({}, this.frameState_);\n    frameState.viewState = /** @type {import(\"../View.js\").State} */assign({}, frameState.viewState);\n    var center = getCenter(extent);\n    frameState.extent = extent.slice();\n    frameState.size[0] = Math.round(getWidth(extent) / resolution);\n    frameState.size[1] = Math.round(getHeight(extent) / resolution);\n    frameState.time = Date.now();\n    var viewState = frameState.viewState;\n    viewState.center = center;\n    viewState.projection = projection;\n    viewState.resolution = resolution;\n    return frameState;\n  };\n  /**\n   * Determine if all sources are ready.\n   * @return {boolean} All sources are ready.\n   * @private\n   */\n  RasterSource.prototype.allSourcesReady_ = function () {\n    var ready = true;\n    var source;\n    for (var i = 0, ii = this.layers_.length; i < ii; ++i) {\n      source = this.layers_[i].getSource();\n      if (source.getState() !== 'ready') {\n        ready = false;\n        break;\n      }\n    }\n    return ready;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   */\n  RasterSource.prototype.getImage = function (extent, resolution, pixelRatio, projection) {\n    if (!this.allSourcesReady_()) {\n      return null;\n    }\n    var frameState = this.updateFrameState_(extent, resolution, projection);\n    this.requestedFrameState_ = frameState;\n    // check if we can't reuse the existing ol/ImageCanvas\n    if (this.renderedImageCanvas_) {\n      var renderedResolution = this.renderedImageCanvas_.getResolution();\n      var renderedExtent = this.renderedImageCanvas_.getExtent();\n      if (resolution !== renderedResolution || !equals(extent, renderedExtent)) {\n        this.renderedImageCanvas_ = null;\n      }\n    }\n    if (!this.renderedImageCanvas_ || this.getRevision() !== this.renderedRevision_) {\n      this.processSources_();\n    }\n    frameState.tileQueue.loadMoreTiles(16, 16);\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n    return this.renderedImageCanvas_;\n  };\n  /**\n   * Start processing source data.\n   * @private\n   */\n  RasterSource.prototype.processSources_ = function () {\n    var frameState = this.requestedFrameState_;\n    var len = this.layers_.length;\n    var imageDatas = new Array(len);\n    for (var i = 0; i < len; ++i) {\n      frameState.layerIndex = i;\n      var imageData = getImageData(this.layers_[i], frameState);\n      if (imageData) {\n        imageDatas[i] = imageData;\n      } else {\n        return;\n      }\n    }\n    var data = {};\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data));\n    this.processor_.process(imageDatas, data, this.onWorkerComplete_.bind(this, frameState));\n  };\n  /**\n   * Called when pixel processing is complete.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n   * @param {Error} err Any error during processing.\n   * @param {ImageData} output The output image data.\n   * @param {Object|Array<Object>} data The user data (or an array if more than one thread).\n   * @private\n   */\n  RasterSource.prototype.onWorkerComplete_ = function (frameState, err, output, data) {\n    if (err || !output) {\n      return;\n    }\n    // do nothing if extent or resolution changed\n    var extent = frameState.extent;\n    var resolution = frameState.viewState.resolution;\n    if (resolution !== this.requestedFrameState_.viewState.resolution || !equals(extent, this.requestedFrameState_.extent)) {\n      return;\n    }\n    var context;\n    if (this.renderedImageCanvas_) {\n      context = this.renderedImageCanvas_.getImage().getContext('2d');\n    } else {\n      var width = Math.round(getWidth(extent) / resolution);\n      var height = Math.round(getHeight(extent) / resolution);\n      context = createCanvasContext2D(width, height);\n      this.renderedImageCanvas_ = new ImageCanvas(extent, resolution, 1, context.canvas);\n    }\n    context.putImageData(output, 0, 0);\n    this.changed();\n    this.renderedRevision_ = this.getRevision();\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data));\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n  };\n  RasterSource.prototype.disposeInternal = function () {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n    _super.prototype.disposeInternal.call(this);\n  };\n  return RasterSource;\n}(ImageSource);\n/**\n * Clean up and unregister the worker.\n * @function\n * @api\n */\nRasterSource.prototype.dispose;\n/**\n * A reusable canvas context.\n * @type {CanvasRenderingContext2D}\n * @private\n */\nvar sharedContext = null;\n/**\n * Get image data from a layer.\n * @param {import(\"../layer/Layer.js\").default} layer Layer to render.\n * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n * @return {ImageData} The image data.\n */\nfunction getImageData(layer, frameState) {\n  var renderer = layer.getRenderer();\n  if (!renderer) {\n    throw new Error('Unsupported layer type: ' + layer);\n  }\n  if (!renderer.prepareFrame(frameState)) {\n    return null;\n  }\n  var width = frameState.size[0];\n  var height = frameState.size[1];\n  if (width === 0 || height === 0) {\n    return null;\n  }\n  var container = renderer.renderFrame(frameState, null);\n  var element;\n  if (container instanceof HTMLCanvasElement) {\n    element = container;\n  } else {\n    if (container) {\n      element = container.firstElementChild;\n    }\n    if (!(element instanceof HTMLCanvasElement)) {\n      throw new Error('Unsupported rendered element: ' + element);\n    }\n    if (element.width === width && element.height === height) {\n      var context_1 = element.getContext('2d');\n      return context_1.getImageData(0, 0, width, height);\n    }\n  }\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(width, height);\n  } else {\n    var canvas = sharedContext.canvas;\n    if (canvas.width !== width || canvas.height !== height) {\n      sharedContext = createCanvasContext2D(width, height);\n    } else {\n      sharedContext.clearRect(0, 0, width, height);\n    }\n  }\n  sharedContext.drawImage(element, 0, 0, width, height);\n  return sharedContext.getImageData(0, 0, width, height);\n}\n/**\n * Get a list of layer states from a list of layers.\n * @param {Array<import(\"../layer/Layer.js\").default>} layers Layers.\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\n */\nfunction getLayerStatesArray(layers) {\n  return layers.map(function (layer) {\n    return layer.getLayerState();\n  });\n}\n/**\n * Create layers for all sources.\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\n * @return {Array<import(\"../layer/Layer.js\").default>} Array of layers.\n */\nfunction createLayers(sources) {\n  var len = sources.length;\n  var layers = new Array(len);\n  for (var i = 0; i < len; ++i) {\n    layers[i] = createLayer(sources[i]);\n  }\n  return layers;\n}\n/**\n * Create a layer for the provided source.\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\n * @return {import(\"../layer/Layer.js\").default} The layer.\n */\nfunction createLayer(layerOrSource) {\n  // @type {import(\"../layer/Layer.js\").default}\n  var layer;\n  if (layerOrSource instanceof Source) {\n    if (layerOrSource instanceof TileSource) {\n      layer = new TileLayer({\n        source: layerOrSource\n      });\n    } else if (layerOrSource instanceof ImageSource) {\n      layer = new ImageLayer({\n        source: layerOrSource\n      });\n    }\n  } else {\n    layer = layerOrSource;\n  }\n  return layer;\n}\nexport default RasterSource;","map":{"version":3,"names":["Disposable","Event","EventType","ImageCanvas","ImageLayer","ImageSource","Source","TileLayer","TileQueue","TileSource","assign","createCanvasContext2D","create","createTransform","equals","getCenter","getHeight","getWidth","getUid","hasImageData","ImageData","_","context","newImageData","data","width","height","document","createElement","getContext","imageData","createImageData","set","createMinion","operation","workerHasImageData","newWorkerImageData","buffers","meta","imageOps","numBuffers","length","numBytes","byteLength","images","Array","b","Uint8ClampedArray","output_1","buffer","output","arrays","pixels","i","j","array","pixel","createWorker","config","onMessage","lib","Object","keys","map","name","toString","lines","concat","worker","Worker","Blob","Buffer","from","join","URL","createObjectURL","type","addEventListener","createFauxWorker","minion","terminated","postMessage","setTimeout","terminate","Processor","_super","__extends","_this","call","_imageOps","threads","workers","_onWorkerMessage","bind","_workers","_queue","_maxQueueLength","queue","Infinity","_running","_dataLookup","_job","prototype","process","inputs","callback","_enqueue","_dispatch","job","push","shift","input","segmentLength","Math","ceil","offset","slices","jj","slice","index","event","disposed","_resolveJob","length_1","disposeInternal","RasterEventType","BEFOREOPERATIONS","AFTEROPERATIONS","RasterOperationType","PIXEL","IMAGE","RasterSourceEvent","frameState","extent","resolution","viewState","pixelRatio","RasterSource","options","projection","on","once","un","processor_","operationType_","operationType","undefined","threads_","layers_","createLayers","sources","changed","ii","CHANGE","tileQueue_","requestedFrameState_","renderedImageCanvas_","renderedRevision_","frameState_","animate","coordinateToPixelTransform","declutterTree","layerIndex","layerStatesArray","getLayerStatesArray","pixelToCoordinateTransform","postRenderFunctions","size","tileQueue","time","Date","now","usedTiles","rotation","viewHints","wantedTiles","mapId","renderTargets","setAttributions","attributions","iMax","sourceOrLayer","source","getSource","attributionGetter","getAttributions","sourceAttribution","apply","setOperation","opt_lib","dispose","updateFrameState_","center","round","allSourcesReady_","ready","getState","getImage","renderedResolution","getResolution","renderedExtent","getExtent","getRevision","processSources_","loadMoreTiles","requestAnimationFrame","len","imageDatas","getImageData","dispatchEvent","onWorkerComplete_","err","canvas","putImageData","sharedContext","layer","renderer","getRenderer","Error","prepareFrame","container","renderFrame","element","HTMLCanvasElement","firstElementChild","context_1","clearRect","drawImage","layers","getLayerState","createLayer","layerOrSource"],"sources":["../src/source/Raster.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}