{"ast":null,"code":"/**\n * @module ol/source/IIIF\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport { CustomTile } from './Zoomify.js';\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport { Versions } from '../format/IIIFInfo.js';\nimport { assert } from '../asserts.js';\nimport { getTopLeft } from '../extent.js';\nimport { includes } from '../array.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Size of the cache.\n * @property {null|string} [crossOrigin] The value for the crossOrigin option of the request.\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]] The extent.\n * @property {string} [format='jpg'] Requested image format.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio] Tile pixel ratio.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition] Transition.\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {\n    maximumFractionDigits: 10\n  });\n}\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nvar IIIF = /** @class */function (_super) {\n  __extends(IIIF, _super);\n  /**\n   * @param {Options} [opt_options] Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n  function IIIF(opt_options) {\n    var _this = this;\n    /**\n     * @type {Partial<Options>}\n     */\n    var options = opt_options || {};\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n    var baseUrl = options.url || '';\n    baseUrl = baseUrl + (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === '' ? '' : '/');\n    var version = options.version || Versions.VERSION2;\n    var sizes = options.sizes || [];\n    var size = options.size;\n    assert(size != undefined && Array.isArray(size) && size.length == 2 && !isNaN(size[0]) && size[0] > 0 && !isNaN(size[1]) && size[1] > 0, 60);\n    var width = size[0];\n    var height = size[1];\n    var tileSize = options.tileSize;\n    var tilePixelRatio = options.tilePixelRatio || 1;\n    var format = options.format || 'jpg';\n    var quality = options.quality || (options.version == Versions.VERSION1 ? 'native' : 'default');\n    var resolutions = options.resolutions || [];\n    var supports = options.supports || [];\n    var extent = options.extent || [0, -height, width, 0];\n    var supportsListedSizes = sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    var supportsListedTiles = tileSize !== undefined && (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0 || Array.isArray(tileSize) && tileSize.length > 0);\n    var supportsArbitraryTiling = supports != undefined && Array.isArray(supports) && (includes(supports, 'regionByPx') || includes(supports, 'regionByPct')) && (includes(supports, 'sizeByWh') || includes(supports, 'sizeByH') || includes(supports, 'sizeByW') || includes(supports, 'sizeByPct'));\n    var tileWidth, tileHeight, maxZoom;\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (tileSize.length == 1 || tileSize[1] == undefined && Number.isInteger(tileSize[0])) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n          if (tileSize.length == 2) {\n            if (Number.isInteger(tileSize[0]) && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (tileSize[0] == undefined && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(Math.ceil(Math.log(width / tileWidth) / Math.LN2), Math.ceil(Math.log(height / tileHeight) / Math.LN2));\n        for (var i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        var maxScaleFactor = Math.max.apply(Math, resolutions);\n        // TODO maxScaleFactor might not be a power to 2\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        var ignoredSizesIndex = [];\n        for (var i = 0; i < sizes.length; i++) {\n          var resolution = width / sizes[i][0];\n          if (resolutions.length > 0 && resolutions[resolutions.length - 1] == resolution) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n        if (ignoredSizesIndex.length > 0) {\n          for (var i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n    var tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions\n    });\n    var tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      var regionParam, sizeParam;\n      var zoom = tileCoord[0];\n      if (zoom > maxZoom) {\n        return;\n      }\n      var tileX = tileCoord[1],\n        tileY = tileCoord[2],\n        scale = resolutions[zoom];\n      if (tileX === undefined || tileY === undefined || scale === undefined || tileX < 0 || Math.ceil(width / scale / tileWidth) <= tileX || tileY < 0 || Math.ceil(height / scale / tileHeight) <= tileY) {\n        return;\n      }\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        var regionX = tileX * tileWidth * scale,\n          regionY = tileY * tileHeight * scale;\n        var regionW = tileWidth * scale,\n          regionH = tileHeight * scale,\n          sizeW = tileWidth,\n          sizeH = tileHeight;\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n        if (regionX == 0 && regionW == width && regionY == 0 && regionH == height) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (!supportsArbitraryTiling || includes(supports, 'regionByPx')) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (includes(supports, 'regionByPct')) {\n          var pctX = formatPercentage(regionX / width * 100),\n            pctY = formatPercentage(regionY / height * 100),\n            pctW = formatPercentage(regionW / width * 100),\n            pctH = formatPercentage(regionH / height * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n        if (version == Versions.VERSION3 && (!supportsArbitraryTiling || includes(supports, 'sizeByWh'))) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || includes(supports, 'sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (includes(supports, 'sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (includes(supports, 'sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (includes(supports, 'sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n        if (supportsListedSizes) {\n          var regionWidth = sizes[zoom][0],\n            regionHeight = sizes[zoom][1];\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n      return baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format;\n    };\n    var IiifTileClass = CustomTile.bind(null, toSize(tileSize || 256).map(function (size) {\n      return size * tilePixelRatio;\n    }));\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: options.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition\n    }) || this;\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    _this.zDirection = options.zDirection;\n    return _this;\n  }\n  return IIIF;\n}(TileImage);\nexport default IIIF;","map":{"version":3,"names":["TileGrid","TileImage","CustomTile","DEFAULT_TILE_SIZE","Versions","assert","getTopLeft","includes","toSize","formatPercentage","percentage","toLocaleString","maximumFractionDigits","IIIF","_super","__extends","opt_options","_this","options","interpolate","imageSmoothing","undefined","baseUrl","url","lastIndexOf","length","version","VERSION2","sizes","size","Array","isArray","isNaN","width","height","tileSize","tilePixelRatio","format","quality","VERSION1","resolutions","supports","extent","supportsListedSizes","supportsListedTiles","Number","isInteger","supportsArbitraryTiling","tileWidth","tileHeight","maxZoom","sort","a","b","Math","max","ceil","log","LN2","i","push","pow","maxScaleFactor","apply","round","ignoredSizesIndex","resolution","splice","tileGrid","origin","tileUrlFunction","tileCoord","pixelRatio","projection","regionParam","sizeParam","zoom","tileX","tileY","scale","regionX","regionY","regionW","regionH","sizeW","sizeH","floor","pctX","pctY","pctW","pctH","VERSION3","regionWidth","regionHeight","IiifTileClass","bind","map","call","attributions","attributionsCollapsible","cacheSize","crossOrigin","reprojectionErrorThreshold","state","tileClass","transition","zDirection"],"sources":["../src/source/IIIF.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}