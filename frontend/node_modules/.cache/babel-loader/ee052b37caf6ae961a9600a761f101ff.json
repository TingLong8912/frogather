{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/WebGLPoints\n */\nimport Layer from './Layer.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport { assign } from '../obj.js';\nimport { parseLiteralStyle } from '../webgl/ShaderBuilder.js';\n/**\n * @template {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} VectorSourceType\n * @typedef {Object} Options\n * @property {import('../style/literal.js').LiteralStyle} style Literal style to apply to the layer features.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {VectorSourceType} [source] Point source.\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\n * prevent all hit detection on the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n/**\n * @classdesc\n * Layer optimized for rendering large point datasets. Takes a `style` property which\n * is a serializable JSON object describing how the layer should be rendered.\n *\n * Here are a few samples of literal style objects:\n * ```js\n * const style = {\n *   symbol: {\n *     symbolType: 'circle',\n *     size: 8,\n *     color: '#33AAFF',\n *     opacity: 0.9\n *   }\n * }\n * ```\n *\n * ```js\n * const style = {\n *   symbol: {\n *     symbolType: 'image',\n *     offset: [0, 12],\n *     size: [4, 8],\n *     src: '../static/exclamation-mark.png'\n *   }\n * }\n * ```\n *\n * **Important: a `WebGLPoints` layer must be manually disposed when removed, otherwise the underlying WebGL context\n * will not be garbage collected.**\n *\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} VectorSourceType\n * @extends {Layer<VectorSourceType, WebGLPointsLayerRenderer>}\n * @fires import(\"../render/Event.js\").RenderEvent\n */\nvar WebGLPointsLayer = /** @class */function (_super) {\n  __extends(WebGLPointsLayer, _super);\n  /**\n   * @param {Options<VectorSourceType>} options Options.\n   */\n  function WebGLPointsLayer(options) {\n    var _this = this;\n    var baseOptions = assign({}, options);\n    _this = _super.call(this, baseOptions) || this;\n    /**\n     * @private\n     * @type {import('../webgl/ShaderBuilder.js').StyleParseResult}\n     */\n    _this.parseResult_ = parseLiteralStyle(options.style);\n    /**\n     * @type {Object<string, (string|number)>}\n     * @private\n     */\n    _this.styleVariables_ = options.style.variables || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.hitDetectionDisabled_ = !!options.disableHitDetection;\n    return _this;\n  }\n  WebGLPointsLayer.prototype.createRenderer = function () {\n    return new WebGLPointsLayerRenderer(this, {\n      vertexShader: this.parseResult_.builder.getSymbolVertexShader(),\n      fragmentShader: this.parseResult_.builder.getSymbolFragmentShader(),\n      hitVertexShader: !this.hitDetectionDisabled_ && this.parseResult_.builder.getSymbolVertexShader(true),\n      hitFragmentShader: !this.hitDetectionDisabled_ && this.parseResult_.builder.getSymbolFragmentShader(true),\n      uniforms: this.parseResult_.uniforms,\n      attributes: this.parseResult_.attributes\n    });\n  };\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   */\n  WebGLPointsLayer.prototype.updateStyleVariables = function (variables) {\n    assign(this.styleVariables_, variables);\n    this.changed();\n  };\n  return WebGLPointsLayer;\n}(Layer);\nexport default WebGLPointsLayer;","map":{"version":3,"names":["Layer","WebGLPointsLayerRenderer","assign","parseLiteralStyle","WebGLPointsLayer","_super","__extends","options","_this","baseOptions","call","parseResult_","style","styleVariables_","variables","hitDetectionDisabled_","disableHitDetection","prototype","createRenderer","vertexShader","builder","getSymbolVertexShader","fragmentShader","getSymbolFragmentShader","hitVertexShader","hitFragmentShader","uniforms","attributes","updateStyleVariables","changed"],"sources":["../src/layer/WebGLPoints.js"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,OAAOA,KAAK,MAAM,YAAY;AAC9B,OAAOC,wBAAwB,MAAM,kCAAkC;AACvE,SAAQC,MAAM,QAAO,WAAW;AAChC,SAAQC,iBAAiB,QAAO,2BAA2B;AAE3D;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,IAAAC,gBAAA,0BAAAC,MAAA;EAA+BC,SAAA,CAAAF,gBAAA,EAAAC,MAAA;EAC7B;;;EAGA,SAAAD,iBAAYG,OAAO;IAAnB,IAAAC,KAAA;IACE,IAAMC,WAAW,GAAGP,MAAM,CAAC,EAAE,EAAEK,OAAO,CAAC;YAEvCF,MAAA,CAAAK,IAAA,OAAMD,WAAW,CAAC;IAElB;;;;IAIAD,KAAI,CAACG,YAAY,GAAGR,iBAAiB,CAACI,OAAO,CAACK,KAAK,CAAC;IAEpD;;;;IAIAJ,KAAI,CAACK,eAAe,GAAGN,OAAO,CAACK,KAAK,CAACE,SAAS,IAAI,EAAE;IAEpD;;;;IAIAN,KAAI,CAACO,qBAAqB,GAAG,CAAC,CAACR,OAAO,CAACS,mBAAmB;;EAC5D;EAEAZ,gBAAA,CAAAa,SAAA,CAAAC,cAAc,GAAd;IACE,OAAO,IAAIjB,wBAAwB,CAAC,IAAI,EAAE;MACxCkB,YAAY,EAAE,IAAI,CAACR,YAAY,CAACS,OAAO,CAACC,qBAAqB,EAAE;MAC/DC,cAAc,EAAE,IAAI,CAACX,YAAY,CAACS,OAAO,CAACG,uBAAuB,EAAE;MACnEC,eAAe,EACb,CAAC,IAAI,CAACT,qBAAqB,IAC3B,IAAI,CAACJ,YAAY,CAACS,OAAO,CAACC,qBAAqB,CAAC,IAAI,CAAC;MACvDI,iBAAiB,EACf,CAAC,IAAI,CAACV,qBAAqB,IAC3B,IAAI,CAACJ,YAAY,CAACS,OAAO,CAACG,uBAAuB,CAAC,IAAI,CAAC;MACzDG,QAAQ,EAAE,IAAI,CAACf,YAAY,CAACe,QAAQ;MACpCC,UAAU,EAAE,IAAI,CAAChB,YAAY,CAACgB;KAC/B,CAAC;EACJ,CAAC;EAED;;;;EAIAvB,gBAAA,CAAAa,SAAA,CAAAW,oBAAoB,GAApB,UAAqBd,SAAS;IAC5BZ,MAAM,CAAC,IAAI,CAACW,eAAe,EAAEC,SAAS,CAAC;IACvC,IAAI,CAACe,OAAO,EAAE;EAChB,CAAC;EACH,OAAAzB,gBAAC;AAAD,CAAC,CAnD8BJ,KAAK;AAqDpC,eAAeI,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module"}