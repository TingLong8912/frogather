{"ast":null,"code":"/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport { apply as applyTransform, compose as composeTransform, makeInverse, toString as toTransformString } from '../../transform.js';\nimport { containsCoordinate, containsExtent, getHeight, getIntersection, getWidth, intersects as intersectsExtent, isEmpty } from '../../extent.js';\nimport { fromUserExtent } from '../../proj.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nclass CanvasImageLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n   */\n  constructor(imageLayer) {\n    super(imageLayer);\n\n    /**\n     * @protected\n     * @type {?import(\"../../ImageBase.js\").default}\n     */\n    this.image_ = null;\n  }\n\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   */\n  getImage() {\n    return this.image_ ? this.image_.getImage() : null;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewResolution = viewState.resolution;\n    const imageSource = this.getLayer().getSource();\n    const hints = frameState.viewHints;\n    let renderedExtent = frameState.extent;\n    if (layerState.extent !== undefined) {\n      renderedExtent = getIntersection(renderedExtent, fromUserExtent(layerState.extent, viewState.projection));\n    }\n    if (!hints[ViewHint.ANIMATING] && !hints[ViewHint.INTERACTING] && !isEmpty(renderedExtent)) {\n      if (imageSource) {\n        const projection = viewState.projection;\n        const image = imageSource.getImage(renderedExtent, viewResolution, pixelRatio, projection);\n        if (image) {\n          if (this.loadImage(image)) {\n            this.image_ = image;\n          } else if (image.getState() === ImageState.EMPTY) {\n            this.image_ = null;\n          }\n        }\n      } else {\n        this.image_ = null;\n      }\n    }\n    return !!this.image_;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n    const layer = this.getLayer();\n    const coordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n    const imageExtent = this.image_.getExtent();\n    const img = this.getImage();\n    const imageMapWidth = getWidth(imageExtent);\n    const col = Math.floor(img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth));\n    if (col < 0 || col >= img.width) {\n      return null;\n    }\n    const imageMapHeight = getHeight(imageExtent);\n    const row = Math.floor(img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight));\n    if (row < 0 || row >= img.height) {\n      return null;\n    }\n    return this.getImageData(img, col, row);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const image = this.image_;\n    const imageExtent = image.getExtent();\n    const imageResolution = image.getResolution();\n    const imagePixelRatio = image.getPixelRatio();\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewCenter = viewState.center;\n    const viewResolution = viewState.resolution;\n    const scale = pixelRatio * imageResolution / (viewResolution * imagePixelRatio);\n    const extent = frameState.extent;\n    const resolution = viewState.resolution;\n    const rotation = viewState.rotation;\n    // desired dimensions of the canvas in pixels\n    const width = Math.round(getWidth(extent) / resolution * pixelRatio);\n    const height = Math.round(getHeight(extent) / resolution * pixelRatio);\n\n    // set forward and inverse pixel transforms\n    composeTransform(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n    const canvasTransform = toTransformString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    const context = this.context;\n    const canvas = context.canvas;\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent) {\n      const layerExtent = fromUserExtent(layerState.extent, viewState.projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n    const img = this.getImage();\n    const transform = composeTransform(this.tempTransform, width / 2, height / 2, scale, scale, 0, imagePixelRatio * (imageExtent[0] - viewCenter[0]) / imageResolution, imagePixelRatio * (viewCenter[1] - imageExtent[3]) / imageResolution);\n    this.renderedResolution = imageResolution * pixelRatio / imagePixelRatio;\n    const dw = img.width * transform[0];\n    const dh = img.height * transform[3];\n    if (!this.getLayer().getSource().getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n    this.preRender(context, frameState);\n    if (render && dw >= 0.5 && dh >= 0.5) {\n      const dx = transform[4];\n      const dy = transform[5];\n      const opacity = layerState.opacity;\n      let previousAlpha;\n      if (opacity !== 1) {\n        previousAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n      }\n      context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);\n      if (opacity !== 1) {\n        context.globalAlpha = previousAlpha;\n      }\n    }\n    this.postRender(context, frameState);\n    if (clipped) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n    return this.container;\n  }\n}\nexport default CanvasImageLayerRenderer;","map":{"version":3,"names":["CanvasLayerRenderer","ImageState","ViewHint","apply","applyTransform","compose","composeTransform","makeInverse","toString","toTransformString","containsCoordinate","containsExtent","getHeight","getIntersection","getWidth","intersects","intersectsExtent","isEmpty","fromUserExtent","CanvasImageLayerRenderer","constructor","imageLayer","image_","getImage","prepareFrame","frameState","layerState","layerStatesArray","layerIndex","pixelRatio","viewState","viewResolution","resolution","imageSource","getLayer","getSource","hints","viewHints","renderedExtent","extent","undefined","projection","ANIMATING","INTERACTING","image","loadImage","getState","EMPTY","getData","pixel","layer","coordinate","pixelToCoordinateTransform","slice","layerExtent","getExtent","imageExtent","img","imageMapWidth","col","Math","floor","width","imageMapHeight","row","height","getImageData","renderFrame","target","imageResolution","getResolution","imagePixelRatio","getPixelRatio","viewCenter","center","scale","rotation","round","pixelTransform","size","inversePixelTransform","canvasTransform","useContainer","getBackground","context","canvas","containerReused","clearRect","clipped","render","clipUnrotated","transform","tempTransform","renderedResolution","dw","dh","getInterpolate","imageSmoothingEnabled","preRender","dx","dy","opacity","previousAlpha","globalAlpha","drawImage","postRender","restore","style","container"],"sources":["/Users/yantinglong/Documents/project/frogather/node_modules/ol/renderer/canvas/ImageLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  makeInverse,\n  toString as toTransformString,\n} from '../../transform.js';\nimport {\n  containsCoordinate,\n  containsExtent,\n  getHeight,\n  getIntersection,\n  getWidth,\n  intersects as intersectsExtent,\n  isEmpty,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nclass CanvasImageLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n   */\n  constructor(imageLayer) {\n    super(imageLayer);\n\n    /**\n     * @protected\n     * @type {?import(\"../../ImageBase.js\").default}\n     */\n    this.image_ = null;\n  }\n\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   */\n  getImage() {\n    return this.image_ ? this.image_.getImage() : null;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewResolution = viewState.resolution;\n\n    const imageSource = this.getLayer().getSource();\n\n    const hints = frameState.viewHints;\n\n    let renderedExtent = frameState.extent;\n    if (layerState.extent !== undefined) {\n      renderedExtent = getIntersection(\n        renderedExtent,\n        fromUserExtent(layerState.extent, viewState.projection)\n      );\n    }\n\n    if (\n      !hints[ViewHint.ANIMATING] &&\n      !hints[ViewHint.INTERACTING] &&\n      !isEmpty(renderedExtent)\n    ) {\n      if (imageSource) {\n        const projection = viewState.projection;\n        const image = imageSource.getImage(\n          renderedExtent,\n          viewResolution,\n          pixelRatio,\n          projection\n        );\n        if (image) {\n          if (this.loadImage(image)) {\n            this.image_ = image;\n          } else if (image.getState() === ImageState.EMPTY) {\n            this.image_ = null;\n          }\n        }\n      } else {\n        this.image_ = null;\n      }\n    }\n\n    return !!this.image_;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice()\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const imageExtent = this.image_.getExtent();\n    const img = this.getImage();\n\n    const imageMapWidth = getWidth(imageExtent);\n    const col = Math.floor(\n      img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth)\n    );\n    if (col < 0 || col >= img.width) {\n      return null;\n    }\n\n    const imageMapHeight = getHeight(imageExtent);\n    const row = Math.floor(\n      img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight)\n    );\n    if (row < 0 || row >= img.height) {\n      return null;\n    }\n\n    return this.getImageData(img, col, row);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const image = this.image_;\n    const imageExtent = image.getExtent();\n    const imageResolution = image.getResolution();\n    const imagePixelRatio = image.getPixelRatio();\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewCenter = viewState.center;\n    const viewResolution = viewState.resolution;\n    const scale =\n      (pixelRatio * imageResolution) / (viewResolution * imagePixelRatio);\n\n    const extent = frameState.extent;\n    const resolution = viewState.resolution;\n    const rotation = viewState.rotation;\n    // desired dimensions of the canvas in pixels\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n\n    // set forward and inverse pixel transforms\n    composeTransform(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / pixelRatio,\n      1 / pixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2\n    );\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n\n    const context = this.context;\n    const canvas = context.canvas;\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent) {\n      const layerExtent = fromUserExtent(\n        layerState.extent,\n        viewState.projection\n      );\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    const img = this.getImage();\n\n    const transform = composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      scale,\n      scale,\n      0,\n      (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolution,\n      (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolution\n    );\n\n    this.renderedResolution = (imageResolution * pixelRatio) / imagePixelRatio;\n\n    const dw = img.width * transform[0];\n    const dh = img.height * transform[3];\n\n    if (!this.getLayer().getSource().getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n    if (render && dw >= 0.5 && dh >= 0.5) {\n      const dx = transform[4];\n      const dy = transform[5];\n      const opacity = layerState.opacity;\n      let previousAlpha;\n      if (opacity !== 1) {\n        previousAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n      }\n      context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);\n      if (opacity !== 1) {\n        context.globalAlpha = previousAlpha;\n      }\n    }\n    this.postRender(context, frameState);\n\n    if (clipped) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n\n    return this.container;\n  }\n}\n\nexport default CanvasImageLayerRenderer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}