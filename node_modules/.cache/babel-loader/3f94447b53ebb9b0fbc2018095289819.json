{"ast":null,"code":"/**\n * @module ol/source/TileWMS\n */\n\nimport TileImage from './TileImage.js';\nimport { DEFAULT_VERSION } from './wms.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { buffer, createEmpty } from '../extent.js';\nimport { buffer as bufferSize, scale as scaleSize, toSize } from '../size.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { compareVersions } from '../string.js';\nimport { get as getProjection, transform, transformExtent } from '../proj.js';\nimport { modulo } from '../math.js';\nimport { hash as tileCoordHash } from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nclass TileWMS extends TileImage {\n  /**\n   * @param {Options} [options] Tile WMS options.\n   */\n  constructor(options) {\n    options = options ? options : (/** @type {Options} */{});\n    const params = Object.assign({}, options.params);\n    const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n    const z = tileGrid.getZForResolution(resolution, this.zDirection);\n    const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n    let tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);\n      tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    Object.assign(baseParams, this.params_, params);\n    const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, 1, sourceProjectionObj || projectionObj, baseParams);\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png'\n    };\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n    if (resolution !== undefined) {\n      const mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = resolution * mpu / pixelSize;\n    }\n    Object.assign(baseParams, params);\n    return appendParams(/** @type {string} */this.urls[0], baseParams);\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case 'geoserver':\n          const dpi = 90 * pixelRatio + 0.5 | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case 'mapserver':\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case 'carmentaserver':\n        case 'qgis':\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default:\n          // Unknown `serverType` configured\n          assert(false, 52);\n          break;\n      }\n    }\n    const axisOrientation = projection.getAxisOrientation();\n    const bbox = tileExtent;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      let tmp;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n    params['BBOX'] = bbox.join(',');\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n    return appendParams(url, params);\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    Object.assign(baseParams, this.params_);\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);\n  }\n}\nexport default TileWMS;","map":{"version":3,"names":["TileImage","DEFAULT_VERSION","appendParams","assert","buffer","createEmpty","bufferSize","scale","scaleSize","toSize","calculateSourceResolution","compareVersions","get","getProjection","transform","transformExtent","modulo","hash","tileCoordHash","TileWMS","constructor","options","params","Object","assign","transparent","attributions","attributionsCollapsible","cacheSize","crossOrigin","interpolate","opaque","projection","reprojectionErrorThreshold","tileClass","tileGrid","tileLoadFunction","url","urls","wrapX","undefined","transition","zDirection","gutter_","gutter","params_","v13_","serverType_","serverType","hidpi_","hidpi","tmpExtent_","updateV13_","setKey","getKeyForParams_","getFeatureInfoUrl","coordinate","resolution","projectionObj","sourceProjectionObj","getTileGrid","getTileGridForProjection","z","getZForResolution","tileCoord","getTileCoordForCoordAndZ","getResolutions","length","tileResolution","getResolution","tileExtent","getTileCoordExtent","tileSize","getTileSize","tmpSize","baseParams","x","Math","floor","y","getRequestUrl_","getLegendUrl","layers","LAYERS","isSingleLayer","Array","isArray","mpu","getMetersPerUnit","pixelSize","getGutter","getParams","pixelRatio","getCode","dpi","axisOrientation","getAxisOrientation","bbox","substr","tmp","join","index","getTilePixelRatio","i","res","key","updateParams","version","tileUrlFunction"],"sources":["/Users/yantinglong/Documents/project/frogather/node_modules/ol/source/TileWMS.js"],"sourcesContent":["/**\n * @module ol/source/TileWMS\n */\n\nimport TileImage from './TileImage.js';\nimport {DEFAULT_VERSION} from './wms.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {buffer as bufferSize, scale as scaleSize, toSize} from '../size.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {compareVersions} from '../string.js';\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\nimport {modulo} from '../math.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nclass TileWMS extends TileImage {\n  /**\n   * @param {Options} [options] Tile WMS options.\n   */\n  constructor(options) {\n    options = options ? options : /** @type {Options} */ ({});\n\n    const params = Object.assign({}, options.params);\n\n    const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n\n    const z = tileGrid.getZForResolution(resolution, this.zDirection);\n    const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    let tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        tileResolution\n      );\n      tileExtent = transformExtent(\n        tileExtent,\n        projectionObj,\n        sourceProjectionObj\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    Object.assign(baseParams, this.params_, params);\n\n    const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    Object.assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.urls[0]), baseParams);\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(\n    tileCoord,\n    tileSize,\n    tileExtent,\n    pixelRatio,\n    projection,\n    params\n  ) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case 'geoserver':\n          const dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case 'mapserver':\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case 'carmentaserver':\n        case 'qgis':\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default: // Unknown `serverType` configured\n          assert(false, 52);\n          break;\n      }\n    }\n\n    const axisOrientation = projection.getAxisOrientation();\n    const bbox = tileExtent;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      let tmp;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n    return appendParams(url, params);\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n    };\n    Object.assign(baseParams, this.params_);\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      pixelRatio,\n      projection,\n      baseParams\n    );\n  }\n}\n\nexport default TileWMS;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}