{"ast":null,"code":"/**\n * @module ol/source/ImageArcGISRest\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { containsExtent, getHeight, getWidth } from '../extent.js';\nimport { createCanvasContext2D } from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest~TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageArcGISRest extends ImageSource {\n  /**\n   * @param {Options} [options] Image ArcGIS Rest Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = createCanvasContext2D(1, 1);\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n    const image = this.image_;\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), extent)) {\n      return image;\n    }\n    const params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true\n    };\n    Object.assign(params, this.params_);\n    extent = extent.slice();\n    const centerX = (extent[0] + extent[2]) / 2;\n    const centerY = (extent[1] + extent[3]) / 2;\n    if (this.ratio_ != 1) {\n      const halfWidth = this.ratio_ * getWidth(extent) / 2;\n      const halfHeight = this.ratio_ * getHeight(extent) / 2;\n      extent[0] = centerX - halfWidth;\n      extent[1] = centerY - halfHeight;\n      extent[2] = centerX + halfWidth;\n      extent[3] = centerY + halfHeight;\n    }\n    const imageResolution = resolution / pixelRatio;\n\n    // Compute an integer width and height.\n    const width = Math.ceil(getWidth(extent) / imageResolution);\n    const height = Math.ceil(getHeight(extent) / imageResolution);\n\n    // Modify the extent to match the integer width and height.\n    extent[0] = centerX - imageResolution * width / 2;\n    extent[2] = centerX + imageResolution * width / 2;\n    extent[1] = centerY - imageResolution * height / 2;\n    extent[3] = centerY + imageResolution * height / 2;\n    this.imageSize_[0] = width;\n    this.imageSize_[1] = height;\n    const url = this.getRequestUrl_(extent, this.imageSize_, pixelRatio, projection, params);\n    this.image_ = new ImageWrapper(extent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_, this.context_);\n    this.renderedRevision_ = this.getRevision();\n    this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    return this.image_;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    // (if there is no numeric portion the entire projection code must\n    // form a valid ArcGIS SpatialReference definition).\n    const srid = projection.getCode().split(/:(?=\\d+$)/).pop();\n    params['SIZE'] = size[0] + ',' + size[1];\n    params['BBOX'] = extent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(90 * pixelRatio);\n    const url = this.url_;\n    const modifiedUrl = url.replace(/MapServer\\/?$/, 'MapServer/export').replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    if (modifiedUrl == url) {\n      assert(false, 50); // `options.featureTypes` should be an Array\n    }\n    return appendParams(modifiedUrl, params);\n  }\n\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.image_ = null;\n    this.changed();\n  }\n}\nexport default ImageArcGISRest;","map":{"version":3,"names":["EventType","ImageSource","defaultImageLoadFunction","ImageWrapper","appendParams","assert","containsExtent","getHeight","getWidth","createCanvasContext2D","ImageArcGISRest","constructor","options","attributions","interpolate","projection","resolutions","context_","crossOrigin_","crossOrigin","undefined","hidpi_","hidpi","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","image_","imageSize_","renderedRevision_","ratio_","ratio","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","getExtent","Object","assign","slice","centerX","centerY","halfWidth","halfHeight","imageResolution","width","Math","ceil","height","getRequestUrl_","addEventListener","CHANGE","handleImageChange","bind","getImageLoadFunction","size","srid","getCode","split","pop","join","round","modifiedUrl","replace","getUrl","setImageLoadFunction","changed","setUrl","updateParams"],"sources":["/Users/yantinglong/Documents/project/frogather/node_modules/ol/source/ImageArcGISRest.js"],"sourcesContent":["/**\n * @module ol/source/ImageArcGISRest\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {containsExtent, getHeight, getWidth} from '../extent.js';\nimport {createCanvasContext2D} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest~TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageArcGISRest extends ImageSource {\n  /**\n   * @param {Options} [options] Image ArcGIS Rest Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = createCanvasContext2D(1, 1);\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n    const image = this.image_;\n    if (\n      image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), extent)\n    ) {\n      return image;\n    }\n\n    const params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true,\n    };\n    Object.assign(params, this.params_);\n\n    extent = extent.slice();\n    const centerX = (extent[0] + extent[2]) / 2;\n    const centerY = (extent[1] + extent[3]) / 2;\n    if (this.ratio_ != 1) {\n      const halfWidth = (this.ratio_ * getWidth(extent)) / 2;\n      const halfHeight = (this.ratio_ * getHeight(extent)) / 2;\n      extent[0] = centerX - halfWidth;\n      extent[1] = centerY - halfHeight;\n      extent[2] = centerX + halfWidth;\n      extent[3] = centerY + halfHeight;\n    }\n\n    const imageResolution = resolution / pixelRatio;\n\n    // Compute an integer width and height.\n    const width = Math.ceil(getWidth(extent) / imageResolution);\n    const height = Math.ceil(getHeight(extent) / imageResolution);\n\n    // Modify the extent to match the integer width and height.\n    extent[0] = centerX - (imageResolution * width) / 2;\n    extent[2] = centerX + (imageResolution * width) / 2;\n    extent[1] = centerY - (imageResolution * height) / 2;\n    extent[3] = centerY + (imageResolution * height) / 2;\n\n    this.imageSize_[0] = width;\n    this.imageSize_[1] = height;\n\n    const url = this.getRequestUrl_(\n      extent,\n      this.imageSize_,\n      pixelRatio,\n      projection,\n      params\n    );\n\n    this.image_ = new ImageWrapper(\n      extent,\n      resolution,\n      pixelRatio,\n      url,\n      this.crossOrigin_,\n      this.imageLoadFunction_,\n      this.context_\n    );\n\n    this.renderedRevision_ = this.getRevision();\n\n    this.image_.addEventListener(\n      EventType.CHANGE,\n      this.handleImageChange.bind(this)\n    );\n\n    return this.image_;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    // (if there is no numeric portion the entire projection code must\n    // form a valid ArcGIS SpatialReference definition).\n    const srid = projection\n      .getCode()\n      .split(/:(?=\\d+$)/)\n      .pop();\n\n    params['SIZE'] = size[0] + ',' + size[1];\n    params['BBOX'] = extent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(90 * pixelRatio);\n\n    const url = this.url_;\n\n    const modifiedUrl = url\n      .replace(/MapServer\\/?$/, 'MapServer/export')\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    if (modifiedUrl == url) {\n      assert(false, 50); // `options.featureTypes` should be an Array\n    }\n    return appendParams(modifiedUrl, params);\n  }\n\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.image_ = null;\n    this.changed();\n  }\n}\n\nexport default ImageArcGISRest;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}