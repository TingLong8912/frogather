{"ast":null,"code":"/**\n * @module ol/layer/Heatmap\n */\nimport BaseVector from './BaseVector.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport { clamp } from '../math.js';\nimport { createCanvasContext2D } from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} [source] Point source.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  BLUR: 'blur',\n  GRADIENT: 'gradient',\n  RADIUS: 'radius'\n};\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @extends {BaseVector<import(\"../source/Vector.js\").default, WebGLPointsLayerRenderer>}\n * @api\n */\nclass Heatmap extends BaseVector {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.gradient;\n    delete baseOptions.radius;\n    delete baseOptions.blur;\n    delete baseOptions.weight;\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.gradient_ = null;\n    this.addChangeListener(Property.GRADIENT, this.handleGradientChanged_);\n    this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n    this.setBlur(options.blur !== undefined ? options.blur : 15);\n    this.setRadius(options.radius !== undefined ? options.radius : 8);\n    const weight = options.weight ? options.weight : 'weight';\n    if (typeof weight === 'string') {\n      this.weightFunction_ = function (feature) {\n        return feature.get(weight);\n      };\n    } else {\n      this.weightFunction_ = weight;\n    }\n\n    // For performance reasons, don't sort the features before rendering.\n    // The render order is not relevant for a heatmap representation.\n    this.setRenderOrder(null);\n  }\n\n  /**\n   * Return the blur size in pixels.\n   * @return {number} Blur size in pixels.\n   * @api\n   * @observable\n   */\n  getBlur() {\n    return /** @type {number} */this.get(Property.BLUR);\n  }\n\n  /**\n   * Return the gradient colors as array of strings.\n   * @return {Array<string>} Colors.\n   * @api\n   * @observable\n   */\n  getGradient() {\n    return /** @type {Array<string>} */this.get(Property.GRADIENT);\n  }\n\n  /**\n   * Return the size of the radius in pixels.\n   * @return {number} Radius size in pixel.\n   * @api\n   * @observable\n   */\n  getRadius() {\n    return /** @type {number} */this.get(Property.RADIUS);\n  }\n\n  /**\n   * @private\n   */\n  handleGradientChanged_() {\n    this.gradient_ = createGradient(this.getGradient());\n  }\n\n  /**\n   * Set the blur size in pixels.\n   * @param {number} blur Blur size in pixels.\n   * @api\n   * @observable\n   */\n  setBlur(blur) {\n    this.set(Property.BLUR, blur);\n  }\n\n  /**\n   * Set the gradient colors as array of strings.\n   * @param {Array<string>} colors Gradient.\n   * @api\n   * @observable\n   */\n  setGradient(colors) {\n    this.set(Property.GRADIENT, colors);\n  }\n\n  /**\n   * Set the size of the radius in pixels.\n   * @param {number} radius Radius size in pixel.\n   * @api\n   * @observable\n   */\n  setRadius(radius) {\n    this.set(Property.RADIUS, radius);\n  }\n  createRenderer() {\n    return new WebGLPointsLayerRenderer(this, {\n      className: this.getClassName(),\n      attributes: [{\n        name: 'weight',\n        callback: feature => {\n          const weight = this.weightFunction_(feature);\n          return weight !== undefined ? clamp(weight, 0, 1) : 1;\n        }\n      }],\n      hitDetectionEnabled: true,\n      vertexShader: `\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n        attribute vec4 a_hitColor;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_hitColor = a_hitColor;\n          v_weight = a_weight;\n        }`,\n      fragmentShader: `\n        precision mediump float;\n        uniform float u_blurSlope;\n        uniform mediump int u_hitDetection;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          gl_FragColor = vec4(alpha, alpha, alpha, alpha);\n          if (u_hitDetection > 0) {\n            if (alpha < 0.05) {\n              discard;\n            }\n            gl_FragColor = v_hitColor;\n          }\n      }`,\n      uniforms: {\n        u_size: () => {\n          return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;\n        },\n        u_blurSlope: () => {\n          return this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR));\n        }\n      },\n      postProcesses: [{\n        fragmentShader: `\n            precision mediump float;\n\n            uniform sampler2D u_image;\n            uniform sampler2D u_gradientTexture;\n            uniform float u_opacity;\n\n            varying vec2 v_texCoord;\n\n            void main() {\n              vec4 color = texture2D(u_image, v_texCoord);\n              gl_FragColor.a = color.a * u_opacity;\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\n              gl_FragColor.rgb *= gl_FragColor.a;\n            }`,\n        uniforms: {\n          u_gradientTexture: () => {\n            return this.gradient_;\n          },\n          u_opacity: () => {\n            return this.getOpacity();\n          }\n        }\n      }]\n    });\n  }\n  renderDeclutter() {}\n}\n\n/**\n * @param {Array<string>} colors A list of colored.\n * @return {HTMLCanvasElement} canvas with gradient texture.\n */\nfunction createGradient(colors) {\n  const width = 1;\n  const height = 256;\n  const context = createCanvasContext2D(width, height);\n  const gradient = context.createLinearGradient(0, 0, width, height);\n  const step = 1 / (colors.length - 1);\n  for (let i = 0, ii = colors.length; i < ii; ++i) {\n    gradient.addColorStop(i * step, colors[i]);\n  }\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, width, height);\n  return context.canvas;\n}\nexport default Heatmap;","map":{"version":3,"names":["BaseVector","WebGLPointsLayerRenderer","clamp","createCanvasContext2D","Property","BLUR","GRADIENT","RADIUS","DEFAULT_GRADIENT","Heatmap","constructor","options","baseOptions","Object","assign","gradient","radius","blur","weight","gradient_","addChangeListener","handleGradientChanged_","setGradient","setBlur","undefined","setRadius","weightFunction_","feature","get","setRenderOrder","getBlur","getGradient","getRadius","createGradient","set","colors","createRenderer","className","getClassName","attributes","name","callback","hitDetectionEnabled","vertexShader","fragmentShader","uniforms","u_size","u_blurSlope","Math","max","postProcesses","u_gradientTexture","u_opacity","getOpacity","renderDeclutter","width","height","context","createLinearGradient","step","length","i","ii","addColorStop","fillStyle","fillRect","canvas"],"sources":["/Users/yantinglong/Documents/project/frogather/node_modules/ol/layer/Heatmap.js"],"sourcesContent":["/**\n * @module ol/layer/Heatmap\n */\nimport BaseVector from './BaseVector.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport {clamp} from '../math.js';\nimport {createCanvasContext2D} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} [source] Point source.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  BLUR: 'blur',\n  GRADIENT: 'gradient',\n  RADIUS: 'radius',\n};\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @extends {BaseVector<import(\"../source/Vector.js\").default, WebGLPointsLayerRenderer>}\n * @api\n */\nclass Heatmap extends BaseVector {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign({}, options);\n\n    delete baseOptions.gradient;\n    delete baseOptions.radius;\n    delete baseOptions.blur;\n    delete baseOptions.weight;\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.gradient_ = null;\n\n    this.addChangeListener(Property.GRADIENT, this.handleGradientChanged_);\n\n    this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n\n    this.setBlur(options.blur !== undefined ? options.blur : 15);\n\n    this.setRadius(options.radius !== undefined ? options.radius : 8);\n\n    const weight = options.weight ? options.weight : 'weight';\n    if (typeof weight === 'string') {\n      this.weightFunction_ = function (feature) {\n        return feature.get(weight);\n      };\n    } else {\n      this.weightFunction_ = weight;\n    }\n\n    // For performance reasons, don't sort the features before rendering.\n    // The render order is not relevant for a heatmap representation.\n    this.setRenderOrder(null);\n  }\n\n  /**\n   * Return the blur size in pixels.\n   * @return {number} Blur size in pixels.\n   * @api\n   * @observable\n   */\n  getBlur() {\n    return /** @type {number} */ (this.get(Property.BLUR));\n  }\n\n  /**\n   * Return the gradient colors as array of strings.\n   * @return {Array<string>} Colors.\n   * @api\n   * @observable\n   */\n  getGradient() {\n    return /** @type {Array<string>} */ (this.get(Property.GRADIENT));\n  }\n\n  /**\n   * Return the size of the radius in pixels.\n   * @return {number} Radius size in pixel.\n   * @api\n   * @observable\n   */\n  getRadius() {\n    return /** @type {number} */ (this.get(Property.RADIUS));\n  }\n\n  /**\n   * @private\n   */\n  handleGradientChanged_() {\n    this.gradient_ = createGradient(this.getGradient());\n  }\n\n  /**\n   * Set the blur size in pixels.\n   * @param {number} blur Blur size in pixels.\n   * @api\n   * @observable\n   */\n  setBlur(blur) {\n    this.set(Property.BLUR, blur);\n  }\n\n  /**\n   * Set the gradient colors as array of strings.\n   * @param {Array<string>} colors Gradient.\n   * @api\n   * @observable\n   */\n  setGradient(colors) {\n    this.set(Property.GRADIENT, colors);\n  }\n\n  /**\n   * Set the size of the radius in pixels.\n   * @param {number} radius Radius size in pixel.\n   * @api\n   * @observable\n   */\n  setRadius(radius) {\n    this.set(Property.RADIUS, radius);\n  }\n\n  createRenderer() {\n    return new WebGLPointsLayerRenderer(this, {\n      className: this.getClassName(),\n      attributes: [\n        {\n          name: 'weight',\n          callback: (feature) => {\n            const weight = this.weightFunction_(feature);\n            return weight !== undefined ? clamp(weight, 0, 1) : 1;\n          },\n        },\n      ],\n      hitDetectionEnabled: true,\n      vertexShader: `\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n        attribute vec4 a_hitColor;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_hitColor = a_hitColor;\n          v_weight = a_weight;\n        }`,\n      fragmentShader: `\n        precision mediump float;\n        uniform float u_blurSlope;\n        uniform mediump int u_hitDetection;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          gl_FragColor = vec4(alpha, alpha, alpha, alpha);\n          if (u_hitDetection > 0) {\n            if (alpha < 0.05) {\n              discard;\n            }\n            gl_FragColor = v_hitColor;\n          }\n      }`,\n      uniforms: {\n        u_size: () => {\n          return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;\n        },\n        u_blurSlope: () => {\n          return (\n            this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR))\n          );\n        },\n      },\n      postProcesses: [\n        {\n          fragmentShader: `\n            precision mediump float;\n\n            uniform sampler2D u_image;\n            uniform sampler2D u_gradientTexture;\n            uniform float u_opacity;\n\n            varying vec2 v_texCoord;\n\n            void main() {\n              vec4 color = texture2D(u_image, v_texCoord);\n              gl_FragColor.a = color.a * u_opacity;\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\n              gl_FragColor.rgb *= gl_FragColor.a;\n            }`,\n          uniforms: {\n            u_gradientTexture: () => {\n              return this.gradient_;\n            },\n            u_opacity: () => {\n              return this.getOpacity();\n            },\n          },\n        },\n      ],\n    });\n  }\n\n  renderDeclutter() {}\n}\n\n/**\n * @param {Array<string>} colors A list of colored.\n * @return {HTMLCanvasElement} canvas with gradient texture.\n */\nfunction createGradient(colors) {\n  const width = 1;\n  const height = 256;\n  const context = createCanvasContext2D(width, height);\n\n  const gradient = context.createLinearGradient(0, 0, width, height);\n  const step = 1 / (colors.length - 1);\n  for (let i = 0, ii = colors.length; i < ii; ++i) {\n    gradient.addColorStop(i * step, colors[i]);\n  }\n\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, width, height);\n\n  return context.canvas;\n}\n\nexport default Heatmap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}