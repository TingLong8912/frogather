{"ast":null,"code":"/**\n * @module ol/source/ImageMapGuide\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport { appendParams } from '../uri.js';\nimport { containsExtent, getCenter, getHeight, getWidth, scaleFromCenter } from '../extent.js';\nimport { createCanvasContext2D } from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object} [params] Additional parameters.\n */\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageMapGuide extends ImageSource {\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n  constructor(options) {\n    super({\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = createCanvasContext2D(1, 1);\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.displayDpi_ = options.displayDpi !== undefined ? options.displayDpi : 96;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.metersPerUnit_ = options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useOverlay_ = options.useOverlay !== undefined ? options.useOverlay : false;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n    let image = this.image_;\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), extent)) {\n      return image;\n    }\n    if (this.ratio_ != 1) {\n      extent = extent.slice();\n      scaleFromCenter(extent, this.ratio_);\n    }\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n    if (this.url_ !== undefined) {\n      const imageUrl = this.getUrl(this.url_, this.params_, extent, size, projection);\n      image = new ImageWrapper(extent, resolution, pixelRatio, imageUrl, this.crossOrigin_, this.imageLoadFunction_, this.context_);\n      image.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    } else {\n      image = null;\n    }\n    this.image_ = image;\n    this.renderedRevision_ = this.getRevision();\n    return image;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * @param {string} baseUrl The mapagent url.\n   * @param {Object<string, string|number>} params Request parameters.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string} The mapagent map image request URL.\n   */\n  getUrl(baseUrl, params, extent, size, projection) {\n    const scale = getScale(extent, size, this.metersPerUnit_, this.displayDpi_);\n    const center = getCenter(extent);\n    const baseParams = {\n      'OPERATION': this.useOverlay_ ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n      'VERSION': '2.0.0',\n      'LOCALE': 'en',\n      'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n      'CLIP': '1',\n      'SETDISPLAYDPI': this.displayDpi_,\n      'SETDISPLAYWIDTH': Math.round(size[0]),\n      'SETDISPLAYHEIGHT': Math.round(size[1]),\n      'SETVIEWSCALE': scale,\n      'SETVIEWCENTERX': center[0],\n      'SETVIEWCENTERY': center[1]\n    };\n    Object.assign(baseParams, params);\n    return appendParams(baseUrl, baseParams);\n  }\n\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return mcsW * metersPerUnit / (devW * mpp); // width limited\n  }\n  return mcsH * metersPerUnit / (devH * mpp); // height limited\n}\nexport default ImageMapGuide;","map":{"version":3,"names":["EventType","ImageSource","defaultImageLoadFunction","ImageWrapper","appendParams","containsExtent","getCenter","getHeight","getWidth","scaleFromCenter","createCanvasContext2D","ImageMapGuide","constructor","options","interpolate","projection","resolutions","context_","crossOrigin_","crossOrigin","undefined","displayDpi_","displayDpi","params_","params","url_","url","imageLoadFunction_","imageLoadFunction","hidpi_","hidpi","metersPerUnit_","metersPerUnit","ratio_","ratio","useOverlay_","useOverlay","image_","renderedRevision_","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","getExtent","slice","width","height","size","imageUrl","getUrl","addEventListener","CHANGE","handleImageChange","bind","getImageLoadFunction","updateParams","Object","assign","changed","baseUrl","scale","getScale","center","baseParams","Math","round","setImageLoadFunction","dpi","mcsW","mcsH","devW","devH","mpp"],"sources":["/Users/yantinglong/Documents/project/frogather/node_modules/ol/source/ImageMapGuide.js"],"sourcesContent":["/**\n * @module ol/source/ImageMapGuide\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport {appendParams} from '../uri.js';\nimport {\n  containsExtent,\n  getCenter,\n  getHeight,\n  getWidth,\n  scaleFromCenter,\n} from '../extent.js';\nimport {createCanvasContext2D} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object} [params] Additional parameters.\n */\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageMapGuide extends ImageSource {\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n  constructor(options) {\n    super({\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = createCanvasContext2D(1, 1);\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.displayDpi_ =\n      options.displayDpi !== undefined ? options.displayDpi : 96;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.metersPerUnit_ =\n      options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useOverlay_ =\n      options.useOverlay !== undefined ? options.useOverlay : false;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n    let image = this.image_;\n    if (\n      image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), extent)\n    ) {\n      return image;\n    }\n\n    if (this.ratio_ != 1) {\n      extent = extent.slice();\n      scaleFromCenter(extent, this.ratio_);\n    }\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n\n    if (this.url_ !== undefined) {\n      const imageUrl = this.getUrl(\n        this.url_,\n        this.params_,\n        extent,\n        size,\n        projection\n      );\n      image = new ImageWrapper(\n        extent,\n        resolution,\n        pixelRatio,\n        imageUrl,\n        this.crossOrigin_,\n        this.imageLoadFunction_,\n        this.context_\n      );\n      image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this)\n      );\n    } else {\n      image = null;\n    }\n    this.image_ = image;\n    this.renderedRevision_ = this.getRevision();\n\n    return image;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * @param {string} baseUrl The mapagent url.\n   * @param {Object<string, string|number>} params Request parameters.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string} The mapagent map image request URL.\n   */\n  getUrl(baseUrl, params, extent, size, projection) {\n    const scale = getScale(extent, size, this.metersPerUnit_, this.displayDpi_);\n    const center = getCenter(extent);\n    const baseParams = {\n      'OPERATION': this.useOverlay_\n        ? 'GETDYNAMICMAPOVERLAYIMAGE'\n        : 'GETMAPIMAGE',\n      'VERSION': '2.0.0',\n      'LOCALE': 'en',\n      'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n      'CLIP': '1',\n      'SETDISPLAYDPI': this.displayDpi_,\n      'SETDISPLAYWIDTH': Math.round(size[0]),\n      'SETDISPLAYHEIGHT': Math.round(size[1]),\n      'SETVIEWSCALE': scale,\n      'SETVIEWCENTERX': center[0],\n      'SETVIEWCENTERY': center[1],\n    };\n    Object.assign(baseParams, params);\n    return appendParams(baseUrl, baseParams);\n  }\n\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return (mcsW * metersPerUnit) / (devW * mpp); // width limited\n  }\n  return (mcsH * metersPerUnit) / (devH * mpp); // height limited\n}\n\nexport default ImageMapGuide;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}